package com.jojowonet.modules.fitting.web;


import com.google.common.collect.Maps;
import com.jfinal.plugin.activerecord.Db;
import com.jojowonet.modules.order.utils.StringUtil;
import com.jojowonet.modules.sys.util.TrimMap;

import ivan.common.config.Global;
import ivan.common.entity.mysql.common.User;
import ivan.common.persistence.JqGridPage;
import ivan.common.persistence.Page;
import ivan.common.utils.DateUtils;
import ivan.common.utils.StringUtils;
import ivan.common.utils.UserUtils;
import ivan.common.utils.excel.ExportJqExcel;
import ivan.common.web.BaseController;

import java.util.Iterator;
import java.util.List;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import net.sf.json.JSONArray;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.servlet.mvc.support.RedirectAttributes;

import com.jfinal.plugin.activerecord.Record;
import com.jojowonet.modules.fitting.entity.SiteFittingKeep;
import com.jojowonet.modules.fitting.service.EmpFittingKeepService;
import com.jojowonet.modules.fitting.service.SiteFittingKeepService;
import com.jojowonet.modules.goods.utils.GoodsCategoryUtil;
import com.jojowonet.modules.order.form.SiteTableHeaderForm;
import com.jojowonet.modules.order.utils.CrmUtils;
import com.jojowonet.modules.order.utils.JqGridTableUtils;

@Controller
@RequestMapping(value = "${adminPath}/fitting/siteFittingKeep")
public class SiteFittingKeepController extends BaseController{
	
	@Autowired
	private SiteFittingKeepService siteFittingKeepService;
	
	@Autowired
	private EmpFittingKeepService empFittingKeepService;
	
	@ModelAttribute
	public SiteFittingKeep get(@RequestParam(required=false)String id){
		if(StringUtils.isNotBlank(id)){
			return siteFittingKeepService.get(id);
		}else{
			return new SiteFittingKeep();
		}
		
	}
	//获取公司明细表头
	@RequestMapping(value="list")
	public String list(SiteFittingKeep siteFittingKeep, HttpServletRequest request, HttpServletResponse response, Model model) {
		
		String siteId= CrmUtils.getCurrentSiteId(UserUtils.getUser());
		 List<Record> listR=GoodsCategoryUtil.getSiteCategory(CrmUtils.getCurrentSiteId(UserUtils.getUser()));
		SiteTableHeaderForm stf = JqGridTableUtils.getCustomizedTableHead(siteId, request.getServletPath());
		model.addAttribute("headerData",stf);
		model.addAttribute("siteId",siteId);
		 model.addAttribute("listR", listR);
		
		return "modules/" + "fitting/siteFittingKeepList";
	}
	
	//获取公司明细数据
	@ResponseBody
	@RequestMapping(value ="getSiteFitKeepList")
	public String getSiteFitKeepList(SiteFittingKeep siteFittingKeep, HttpServletRequest request, HttpServletResponse response, Model model) {
			User user = UserUtils.getUser();
			Map<String,Object> map = new TrimMap(getParams(request));
			String siteId= CrmUtils.getCurrentSiteId(user);
			Page<Record> pages = new Page<Record>(request, response);
			Page<Record> page = siteFittingKeepService.getSiteFittingKeep(pages,siteId,map);
			return renderJson(new JqGridPage<>(page));
	}
	
	//导出公司明细  ,工程师明细Execl表
	@RequestMapping(value = "export")
    public String exportFile(HttpServletRequest request, HttpServletResponse response, RedirectAttributes redirectAttributes) {
		try {
			String formPath = request.getParameter("formPath");
			User user = UserUtils.getUser();
			String siteId= CrmUtils.getCurrentSiteId(user);
			Page<Record> pages = new Page<Record>(request, response);
			pages.setPageNo(1);
	        pages.setPageSize(10000);
	        Map<String,Object> map = new TrimMap(getParams(request));
			SiteTableHeaderForm stf = JqGridTableUtils.getCustomizedTableHead(siteId, formPath);
			String title = stf.getExcelTitle();
            String fileName = title+"数据"+DateUtils.getDate("yyyyMMddHHmmss")+".xlsx"; 
            String mx ="";
            String str1="";
            String str2="";
          
			List<Record> list =null;
			 if("公司明细".equals(title)){
				 list = siteFittingKeepService.getSiteFittingKeep(pages, siteId, map).getList();
				 for (Record re : list) {
					switch (re.getStr("ktype")) {
					case "0":
						str1 = "入库";
						str2 = "+";
						break;
					case "1":
						str1 = "出库";
						str2 = "-";
						break;
					case "2":
						str1 = "归还";
						str2 = "+";
						break;
					case "5":
						str1="删除";
						str2="-";
						break;
					case "6":
						str1="新建返厂";
						str2="-";
						break;
					case "7":
						str1="出库至二级网点";
						str2="-";
						break;
					case "8":
						str1="中心网点申请";
						str2="+";
						break;

					default:
						str1="库存调整";
		               str2="";
						
						break;
					}
					String s=re.getBigDecimal("amount").toString();
					if(!s.subSequence(0,1).equals("-")&&str1.equals("库存调整")){
						s="+"+s;
					}
					

			     
			
				
					re.set("type", re.get("type").equals("1")?"配件":"耗材");
					re.set("ktype", str1);
					re.set("amount",str2+s);
				}
			}else if("工程师明细".equals(title)){
				Map<String,Object> map2 = request.getParameterMap();
				list = empFittingKeepService.getEmpFittingKeep(pages, siteId, map2).getList();
				for (Record re : list) {
					if( "1".equals(re.getStr("warranty_type"))){
						re.set("warranty_type", "保外");
					}else if("2".equals(re.getStr("warranty_type"))){
						re.set("warranty_type", "保内");
					}else if("3".equals(re.getStr("warranty_type"))){
						re.set("warranty_type", "保外转保内");
					}else if("0".equals(re.getStr("warranty_type"))){
						re.set("warranty_type", "其他");
					}
					switch (re.getStr("ktype")) {//类型：0领取，1工单使用  2零售，3返还  4调拨
					case "0":
						str1 = "领取";
						str2 = "+";
						break;
					case "1":
						str1 = "工单使用";
						str2 = "-";
						break;
					case "2":
						str1 = "零售";
						str2 = "-";
						break;
					case "3":
						str1 = "返还";
						str2 = "-";
						break;

					default:
						str1="调拨";
						str2="";
						break;
					}
					re.set("type", re.get("type").equals("1")?"配件":"耗材");
					String s=re.getBigDecimal("amount").toString();
					if(!s.subSequence(0,1).equals("-")&&str1.equals("调拨")){
						s="+"+s;
					}
					re.set("ktype", str1);
					re.set("amount",str2+s);
				
			}
			}
    		new ExportJqExcel(title+"数据", stf.getTableHeader(), stf.getSortHeader())
    			.setDataList(list).write(request, response, fileName).dispose();
    		return null;
		} catch (Exception e) {
			e.printStackTrace();
			addMessage(redirectAttributes, "导出数据失败！失败信息："+e.getMessage());
		}
		return "redirect:"+Global.getAdminPath()+"/sys/user/?repage";
    }


	/**
	 * 获取所有网点人员信息（包括服务商、信息员、工程师）
	 * @return
	 */
	@ResponseBody
	@RequestMapping(value = "getApplicants")
	public Map<String,Object> getApplicants(HttpServletRequest request){
		String siteId= CrmUtils.getCurrentSiteId(UserUtils.getUser());
		String name=request.getParameter("q");
		StringBuffer sb=new StringBuffer();
		sb.append(" SELECT a.name FROM crm_employe a INNER JOIN sys_user u ON a.user_id=u.id WHERE u.status='0' AND a.status='0' AND a.site_id=? and a.name like ?  ");
		List<Record> re1=Db.find(sb.toString(),siteId,'%'+name+'%');
		StringBuffer sb2=new StringBuffer();
		sb2.append(" SELECT a.name  FROM crm_non_serviceman a INNER JOIN sys_user u ON a.user_id=u.id WHERE u.status='0' AND a.status='0' AND a.site_id=?  and a.name like ? ");
		List<Record> re2=Db.find(sb2.toString(),siteId,'%'+name+'%');

		StringBuffer sb3=new StringBuffer();
		sb3.append(" SELECT a.name FROM crm_site a WHERE a.id=? and a.name like ? ");
		List<Record> re3=Db.find(sb3.toString(),siteId,'%'+name+'%');
		re1.addAll(re2);
		re1.addAll(re3);
		Map<String,Object> map= Maps.newHashMap();
		map.put("list",re1);
		map.put("total_count",re1.size()+re2.size()+re3.size());
		return map;
	}
}
