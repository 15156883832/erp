package com.jojowonet.modules.order.web;

import com.jfinal.plugin.activerecord.Db;
import com.jfinal.plugin.activerecord.Record;
import com.jojowonet.modules.operate.entity.Site;
import com.jojowonet.modules.operate.service.*;
import com.jojowonet.modules.order.dao.CustomerTypeDao;
import com.jojowonet.modules.order.dao.Order2017Dao;
import com.jojowonet.modules.order.entity.CrmOrder2017;
import com.jojowonet.modules.order.entity.Order;
import com.jojowonet.modules.order.form.SiteTableHeaderForm;
import com.jojowonet.modules.order.service.*;
import com.jojowonet.modules.order.utils.*;
import com.jojowonet.modules.sys.util.TrimMap;
import ivan.common.config.Global;
import ivan.common.entity.mysql.common.User;
import ivan.common.persistence.JqGridPage;
import ivan.common.persistence.Page;
import ivan.common.utils.DateUtils;
import ivan.common.utils.StringUtils;
import ivan.common.utils.UserUtils;
import ivan.common.utils.excel.ExportJqExcel;
import ivan.common.web.BaseController;
import net.sf.json.JSONArray;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.servlet.mvc.support.RedirectAttributes;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import java.util.Map;

@Controller
@RequestMapping(value = "${adminPath}/order2017")
public class Order2017Controller extends BaseController {

    @Autowired
    private OrderService orderService;

    @Autowired
    private Order2017Service order2017Service;
    @Autowired
    private SiteService siteService;
    @Autowired
    private NonServicemanService noService;
    @Autowired
    private OrderOriginService orderOriginServicce;
    @Autowired
    private SysSettleService siteSettleService;
    @Autowired
    private TownshipService townshipService;
    @Autowired
    private SiteMsgService siteMsgService;
    @Autowired
    private Order2017Dao order2017Dao;
    @Autowired
    private OrderMustFillSettingService orderMustFillSettingService;
    
    //全部工单
    @RequestMapping(value ="header")
    public String header(CrmOrder2017 order, HttpServletRequest request, HttpServletResponse response, Model model) {
        model.addAttribute("order", order);
        String siteId= CrmUtils.getCurrentSiteId(UserUtils.getUser());
        String ptype = UserUtils.getUser().getUserType();
        model.addAttribute("ptype",ptype);
        User user = UserUtils.getUser();
        List<String> cateList=null;
        List<String> brandList=null;
        if(!("2".equals(ptype))){
            String cate = noService.servicemanCate(user.getId(),siteId);
            String brand = noService.servicemanBrand(user.getId(),siteId);
            cateList = StringUtil.tolist(cate);
            brandList = StringUtil.tolist(brand);
        }
        model.addAttribute("cateList",cateList);
        model.addAttribute("brandList",brandList);
        SiteTableHeaderForm stf = JqGridTableUtils.getCustomizedTableHead(siteId, request.getServletPath());
        List<Record> listOrigin = orderOriginServicce.filterOrderOrigin(siteId);
        List<String> listOriginlist=new ArrayList<String>();
        for (Record rd : listOrigin) {
            listOriginlist.add(rd.getStr("name"));
        }
        String sql="select id,name from crm_order_mark_settings where site_id=? and status='0' order by sort asc";
        List<Record> list = Db.find(sql,siteId);
        List<Record> category = CategoryUtils.getListCategorySite(siteId);
        model.addAttribute("category", category);
        Map<String, String> brand = BrandUtils.getSiteBrand(siteId, null);
		model.addAttribute("brand", brand);
        model.addAttribute("signList", list);
        model.addAttribute("listorigin", listOrigin);
        model.addAttribute("listoriginlist", listOriginlist);
        model.addAttribute("headerData", stf);
        model.addAttribute("siteId",siteId);
        String setFlag = siteSettleService.getSiteSettleFlag(siteId);
        model.addAttribute("settleFlag", setFlag);

        String erpwx = Global.getConfig("server.erpwx");
        String longUrl = String.format("%s/api/v2/toUserDianSafe?siteId=%s", erpwx, siteId);
        String ret = CrmUtils.getShortUrl(longUrl).replace("\n", "");
        model.addAttribute("oneHref", ret);

        return "modules/order/orderManagement/2017Order/2017OrderList";
    }

    //全部(工单信息)
    @ResponseBody
    @RequestMapping(value ="get2017OrderList")
    public String get2017OrderList(HttpServletRequest request, HttpServletResponse response, Model model) {
        User user = UserUtils.getUser();
        String siteId= CrmUtils.getCurrentSiteId(user);
        Map<String,Object> map = new TrimMap(getParams(request));
        Page<Record> pages = new Page<Record>(request, response);
        List<String> cateList=null;
        List<String> brandList=null;
        if(!("2".equals(user.getUserType()))){
            String cate = noService.servicemanCate(user.getId(),siteId);
            String brand = noService.servicemanBrand(user.getId(),siteId);
            cateList = StringUtil.tolist(cate);
            brandList = StringUtil.tolist(brand);
        }
        Page<Record> page = order2017Service.getOrderHis(pages,siteId,null,map,cateList,brandList);
        return renderJson(new JqGridPage<>(page));
    }

    @RequestMapping(value = "export")
    public String exportFile(HttpServletRequest request, HttpServletResponse response, RedirectAttributes redirectAttributes) {
        try {
            String formPath = request.getParameter("formPath");
            User user = UserUtils.getUser();
            String siteId= CrmUtils.getCurrentSiteId(user);
            Map<String,Object> map = new TrimMap(getParams(request));
            SiteTableHeaderForm stf = JqGridTableUtils.getCustomizedTableHead(siteId, formPath);

            String title = stf.getExcelTitle();
            System.out.println(title);
            String fileName = title+"数据"+DateUtils.getDate("yyyyMMddHHmmss")+".xlsx";
            Page<Record> pages = new Page<Record>(request, response);
            pages.setPageNo(1);
            pages.setPageSize(10000);
            JSONArray jarray = JSONArray.fromObject(stf.getTableHeader());

            List<String> cateList=null;
            List<String> brandList=null;
            if(!("2".equals(user.getUserType()))){
                String cate = noService.servicemanCate(user.getId(),siteId);
                String brand = noService.servicemanBrand(user.getId(),siteId);
                cateList = StringUtil.tolist(cate);
                brandList = StringUtil.tolist(brand);
            }
            List<Record> list =null;
            list = order2017Service.getOrderHis(pages,siteId,null,map,cateList,brandList).getList();
            String phones="";
            for (Record rd : list) {
                phones=(rd.getStr("customer_mobile"));
                if(StringUtils.isNotBlank(rd.getStr("customer_telephone"))){
                    phones+= "/"+(rd.getStr("customer_telephone"));
                }
                if(StringUtils.isNotBlank(rd.getStr("customer_telephone2"))){
                    phones+= "/"+(rd.getStr("customer_telephone2"));
                }
                rd.set("customer_mobile", phones);
                String rAccount = rd.getStr("record_account");
                if("1".equals(rAccount)){
                    rd.set("record_account", "是");
                }else{
                    rd.set("record_account", "否");
                }
                String seAt = rd.getStr("service_attitude");//满意度
                if("1".equals(seAt)){
                    rd.set("service_attitude", "十分不满意");
                }
                if("2".equals(seAt)){
                    rd.set("service_attitude", "不满意");
                }
                if("3".equals(seAt)){
                    rd.set("service_attitude", "一般");
                }
                if("4".equals(seAt)){
                    rd.set("service_attitude", "满意");
                }
                if("5".equals(seAt)){
                    rd.set("service_attitude", "十分满意");
                }
                if("6".equals(seAt)){
                    rd.set("service_attitude", "无效回访");
                }
                if("7".equals(seAt)){
                    rd.set("service_attitude", "回访未成功");
                }
                String disableType = rd.getStr("disable_type");
                if("0".equals(disableType)) {
                    rd.set("disable_type", "");
                }else if("1".equals(disableType)) {
                    rd.set("disable_type", "重复");
                }else if("2".equals(disableType)) {
                    rd.set("disable_type", "机器已好");
                }else if("3".equals(disableType)) {
                    rd.set("disable_type", "费用高不修");
                }else if("4".equals(disableType)) {
                    rd.set("disable_type", "用户没时间");
                }else if("5".equals(disableType)) {
                    rd.set("disable_type", "其他原因");
                }else {
                    rd.set("disable_type", "");
                }

                BigDecimal totalMoney = BigDecimal.valueOf(0);
                if (rd.getBigDecimal("auxiliary_cost") != null) {
                    totalMoney = rd.getBigDecimal("auxiliary_cost");
                }
                if (rd.getBigDecimal("serve_cost") != null) {
                    totalMoney = totalMoney.add(rd.getBigDecimal("serve_cost"));
                }
                if (rd.getBigDecimal("warranty_cost") != null) {
                    totalMoney = totalMoney.add(rd.getBigDecimal("warranty_cost"));
                }
                rd.set("totalMoney", totalMoney);

            }

            //page = orderService.getOrderWaitForDisoType(page, siteId,"1", "jjgd",null);
            new ExportJqExcel(title+"数据",  jarray.toString(), stf.getSortHeader())
                    .setDataList(list).write(request, response, fileName).dispose();
            return null;
        } catch (Exception e) {
            e.printStackTrace();
            addMessage(redirectAttributes, "导出数据失败！失败信息："+e.getMessage());
        }
        return "redirect:"+Global.getAdminPath()+"/sys/user/?repage";
    }

    //新建工单
    @RequestMapping(value = "newFormFormDetail")
    public String saveform(HttpServletRequest request, Model model) {
        String orId = request.getParameter("id");
        CrmOrder2017 order = order2017Dao.get(orId);
        String siteId = order.getSiteId();
        Site site = siteService.get(siteId);
        Map<String, String> brand = BrandUtils.getSiteBrand(siteId, null);
        List<Record> category = CategoryUtils.getListCategorySite(siteId);
        Date curDate = new Date();
        String orderNumber = RandomUtil.randomOrderNumber();
        model.addAttribute("number", orderNumber);
        List<Record> listOrigin = orderOriginServicce.filterOrderOrigin(siteId);
        List<String> listOriginlist = new ArrayList<>();
        for (Record rd : listOrigin) {
            listOriginlist.add(rd.getStr("name"));
        }
        model.addAttribute("listorigin", listOrigin);
        model.addAttribute("listoriginlist", listOriginlist);
        //获取来源
        List<Record> list = orderService.getOrderType();
        model.addAttribute("ordertype", list);
        model.addAttribute("curDate", curDate);
        model.addAttribute("site", site);
        model.addAttribute("category", category);
        model.addAttribute("brand", brand);
        model.addAttribute("order", order);
        model.addAttribute("orderNumSet", siteMsgService.ifOpenOrderSet(siteId));
        int wnsize =0;
        List<Record> towns = townshipService.getTownshipSiteId(siteId);
        if(towns != null){
            model.addAttribute("township", towns);
            wnsize = towns.size();
        }
        model.addAttribute("wnsize", wnsize);
	      //自定义用户类型
	      model.addAttribute("cusTypecount", CustomerTypeDao.getsiteCustomerTypeCount(siteId));
        /*必填设置*/
        List<Record> mustFillInfoList = orderMustFillSettingService.getMustFillInfo();
        Record mustfill=new Record();
        for(Record re:mustFillInfoList){
            Boolean rsu=changeFrom(re.getStr("status"));
            mustfill.set(re.getStr("name"),rsu);
        }
        if(mustFillInfoList.size()<1){
            mustfill.set("customerFeedback",true);
        }
        model.addAttribute("mustfill",mustfill);

        String erpwx = Global.getConfig("server.erpwx");
        String longUrl = String.format("%s/api/v2/toUserDianSafe?siteId=%s", erpwx, siteId);
        String ret = CrmUtils.getShortUrl(longUrl).replace("\n", "");
        model.addAttribute("oneHref", ret);


        List<Record> provincelist=siteMsgService.getprovincelist();
        List<Record> cities = siteMsgService.getCitiesByProvince(site.getProvince());
        List<Record> districts = siteMsgService.getDistrinctsProvince(site.getCity());
        model.addAttribute("provincelist", provincelist);
        model.addAttribute("cities", cities);
        model.addAttribute("districts", districts);
        return "modules/" + "order/orderFormFromDetail";
    }

    private Boolean changeFrom(String op){
        if("0".equals(op)){
            return true;
        }else{
            return false;
        }
    }


}
