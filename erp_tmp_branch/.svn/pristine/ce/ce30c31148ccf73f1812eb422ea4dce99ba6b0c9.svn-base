package com.jojowonet.modules.order.web;

import com.google.common.collect.Lists;
import com.google.common.collect.Maps;
import com.jfinal.plugin.activerecord.Db;
import com.jfinal.plugin.activerecord.Record;
import com.jojowonet.modules.operate.dao.SiteDao;
import com.jojowonet.modules.operate.service.NonServicemanService;
import com.jojowonet.modules.order.dao.OrderDao;
import com.jojowonet.modules.order.entity.Order;
import com.jojowonet.modules.order.form.SiteTableHeaderForm;
import com.jojowonet.modules.order.service.*;
import com.jojowonet.modules.order.utils.*;
import com.jojowonet.modules.sys.util.TranslationUtils;
import com.jojowonet.modules.sys.util.TrimMap;
import ivan.common.config.Global;
import ivan.common.entity.mysql.common.User;
import ivan.common.persistence.JqGridPage;
import ivan.common.persistence.Page;
import ivan.common.utils.DateUtils;
import ivan.common.utils.StringUtils;
import ivan.common.utils.UserUtils;
import ivan.common.utils.excel.ExportJqExcel;
import ivan.common.web.BaseController;

import net.sf.json.JSONArray;
import net.sf.json.JSONObject;
import org.springframework.beans.factory.annotation.Autowired;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.servlet.mvc.support.RedirectAttributes;

import com.jojowonet.modules.operate.entity.Site;
import com.jojowonet.modules.operate.service.SiteService;
import com.jojowonet.modules.order.service.OrderDispatchService;
import com.jojowonet.modules.order.service.OrderOriginService;
import com.jojowonet.modules.order.service.OrderService;
import com.jojowonet.modules.order.service.SecondSiteOrderService;

@Controller
@RequestMapping(value = "${adminPath}/secondOrder")
public class SecondSiteOrderController extends BaseController {
    @Autowired
    private OrderOriginService orderOriginService;
    @Autowired
    private SecondSiteOrderService secondSiteOrderService;
    @Autowired
    private OrderDao orderDao;
    @Autowired
    private OrderService orderService;
    @Autowired
    private OrderDispatchService orderDispatchService;
    @Autowired
    private SysSettleService siteSettleService;
    @Autowired
    private OrderOriginService orderOriginServicce;
    @Autowired
    private SiteService siteService;
    @Autowired
    private SiteDao siteDao;
    @Autowired
    private NonServicemanService noService;

    //处理中工单
    @RequestMapping(value ="secondDuring")
    public String during(Order order, HttpServletRequest request, HttpServletResponse response, Model model) {
        model.addAttribute("order", order);
        String siteId= CrmUtils.getCurrentSiteId(UserUtils.getUser());
        SiteTableHeaderForm stf = JqGridTableUtils.getCustomizedTableHead(siteId, request.getServletPath());
        List<Record> listOrigin = orderOriginService.filterOrderOrigin(siteId);
        List<String> listOriginlist=new ArrayList<String>();
        for (Record rd : listOrigin) {
            listOriginlist.add(rd.getStr("name"));
        }
        List<Record> category = CategoryUtils.getListCategorySite(siteId);
        model.addAttribute("category", category);
        model.addAttribute("listorigin", listOrigin);
        model.addAttribute("listoriginlist", listOriginlist);
        model.addAttribute("headerData", stf);
        model.addAttribute("siteId",siteId);
        model.addAttribute("sites",CrmUtils.getSecondSites(siteId));
        return "modules/order/orderManagement/secondSiteOrder/secondDuring/secondOrderDuringList";
    }

    //处理中工单数据
    @ResponseBody
    @RequestMapping(value ="getWxzList")
    public String getWxzList(Order order, HttpServletRequest request, HttpServletResponse response, Model model) {
        User user = UserUtils.getUser();
        String siteId= CrmUtils.getCurrentSiteId(user);
        Map<String,Object> map =  new TrimMap(getParams(request));
        Page<Record> pages = new Page<Record>(request, response);
        Page<Record> page = secondSiteOrderService.getOrderWaitForDis(pages,siteId,map);
        return renderJson(new JqGridPage<>(page));
    }

    /**
     * 处理中工单数量
     */
    @RequestMapping(value = "getOrderTabCount")
    @ResponseBody
    public JSONObject getOrderTabCount(HttpServletRequest request){
        String siteId = CrmUtils.getCurrentSiteId(UserUtils.getUser());
        User user = UserUtils.getUser();
        Map<String,Object> maps=Maps.newHashMap();
        List<String> cateList=null;
        List<String> brandList=null;
        if(!("2".equals(user.getUserType()))){
            String cate = noService.servicemanCate(user.getId(),siteId);
            String brand = noService.servicemanBrand(user.getId(),siteId);
            cateList = StringUtil.tolist(cate);
            brandList = StringUtil.tolist(brand);
        }
		String sites = CrmUtils.getSiteIdList(siteId);
        long count=orderDao.getOrderWaitDealCount(sites,maps,cateList,brandList);
        Map<String, Long> map = Maps.newHashMap();
        map.put("c1", count);
        return JSONObject.fromObject(map);
    }

    /**
     * 处理中工单详情
     */
    @RequestMapping(value = "duringform")
    public String OrderDuringform(HttpServletRequest request, Model model) {
        String siteId = CrmUtils.getCurrentSiteId(UserUtils.getUser());
        String orderId = request.getParameter("id");
        Order order = orderService.get(orderId);
        List<Record> listOrigin = orderOriginServicce.filterOrderOrigin(siteId);
        List<String> listOriginlist = new ArrayList<String>();
        for (Record rd : listOrigin) {
            listOriginlist.add(rd.getStr("name"));
        }
        Record rds = orderDispatchService.getOrderId(orderId, order.getSiteId());
        String odStatus = (rds == null ? "" : rds.getStr("status"));
        if(StringUtils.isBlank(odStatus)){
            String status=order.getStatus();
            model.addAttribute("dispStatus", TranslationUtils.translateOrderStatus(status));
        }else{
            model.addAttribute("dispStatus", (rds == null ? "" : TranslationUtils.translateDispatchOrderStatus(odStatus)));
        }
        model.addAttribute("listoriginlist", listOriginlist);
        model.addAttribute("order", order);
        return "modules/order/orderManagement/secondSiteOrder/secondDuring/secOrderDuringForm";
    }


    /**
     * 待回访工单表头
     */
    @RequestMapping(value ="waitCallBackTab")
    public String waitCallBackTab(Order order, HttpServletRequest request, HttpServletResponse response, Model model) {
        model.addAttribute("order", order);
        String siteId= CrmUtils.getCurrentSiteId(UserUtils.getUser());
        SiteTableHeaderForm stf = JqGridTableUtils.getCustomizedTableHead(siteId, request.getServletPath());
        List<Record> listOrigin = orderOriginServicce.filterOrderOrigin(siteId);
        List<String> listOriginlist=new ArrayList<String>();
        for (Record rd : listOrigin) {
            listOriginlist.add(rd.getStr("name"));
        }
        List<Record> category = CategoryUtils.getListCategorySite(siteId);
        model.addAttribute("category", category);
        model.addAttribute("listorigin", listOrigin);
        model.addAttribute("listoriginlist", listOriginlist);
        model.addAttribute("headerData", stf);
        model.addAttribute("siteId",siteId);
        String setFlag = siteSettleService.getSiteSettleFlag(siteId);
        model.addAttribute("settleFlag", setFlag);
        model.addAttribute("sites",CrmUtils.getSecondSites(siteId));
        return "modules/order/orderManagement/secondSiteOrder/waitCallBackOrder/secOrderWaitCallBackList";
    }
    /**
     * 待回访工单数据
     */
    @ResponseBody
    @RequestMapping(value ="getWaitCallBackList")
    public String getWaitCallBackList( HttpServletRequest request, HttpServletResponse response) {
        User user = UserUtils.getUser();
        String siteId= CrmUtils.getCurrentSiteId(user);
        
        Map<String,Object> map = new TrimMap(getParams(request));
        Page<Record> pages = new Page<Record>(request, response);
        Page<Record> page = secondSiteOrderService.getOrderWaitCallBack(pages,siteId,map);
        return renderJson(new JqGridPage<>(page));
    }

    /**
     *获取二级网点待回访工单数量
     */

    @ResponseBody
    @RequestMapping(value="getWaitCallBackCount")
    public Map<String,Object> getWaitCallBackCount(){
        String siteId= CrmUtils.getCurrentSiteId(UserUtils.getUser());
        User user = UserUtils.getUser();
        Map<String,Object> resultMap=Maps.newHashMap();
        Map<String,Object> map=Maps.newHashMap();
        List<String> cateList=null;
        List<String> brandList=null;
        if(!("2".equals(user.getUserType()))){
            String cate = noService.servicemanCate(user.getId(),siteId);
            String brand = noService.servicemanBrand(user.getId(),siteId);
            cateList = StringUtil.tolist(cate);
            brandList = StringUtil.tolist(brand);
        }
     	String sites = CrmUtils.getSiteIdList(siteId);
        resultMap.put("c1",orderDao.getOrderWaitCallBackCount(siteId,sites,map,cateList,brandList));
        return resultMap;
    }

    /**
     * 待回访工单详情
     */
    @RequestMapping(value = "waitCallBackDetail")
    public String waitCallBackDetail(HttpServletRequest request, Model model) {
        String orderId = request.getParameter("id");
        Order order = orderService.get(orderId);
        String siteId = order.getSiteId();
        Record dispRd = orderDispatchService.getOrderDispatchForCallBack(order.getId(), siteId);
        String odStatus = (dispRd == null ? "" : dispRd.getStr("status"));
        if(StringUtils.isBlank(odStatus)){
            String status=order.getStatus();
            model.addAttribute("dispStatus", TranslationUtils.translateOrderStatus(status));
        }else{
            model.addAttribute("dispStatus", (dispRd == null ? "" : TranslationUtils.translateDispatchOrderStatus(odStatus)));
        }
        model.addAttribute("order", order);
        return "modules/order/orderManagement/secondSiteOrder/waitCallBackOrder/waitCallBackForm";
    }


    /**
     * 已回访工单表头
     */
    @RequestMapping(value ="hadCallBackTab")
    public String hadCallBackTab(Order order, HttpServletRequest request, HttpServletResponse response, Model model) {
        model.addAttribute("order", order);
        String siteId = CrmUtils.getCurrentSiteId(UserUtils.getUser());
        SiteTableHeaderForm stf = JqGridTableUtils.getCustomizedTableHead(siteId, request.getServletPath());
        List<Record> listOrigin = orderOriginServicce.filterOrderOrigin(siteId);
        List<String> listOriginlist = new ArrayList<String>();
        for (Record rd : listOrigin) {
            listOriginlist.add(rd.getStr("name"));
        }
        List<Record> category = CategoryUtils.getListCategorySite(siteId);
        model.addAttribute("category", category);
        model.addAttribute("listorigin", listOrigin);
        model.addAttribute("listoriginlist", listOriginlist);
        model.addAttribute("headerData", stf);
        model.addAttribute("siteId", siteId);
        model.addAttribute("sites",CrmUtils.getSecondSites(siteId));
        return "modules/order/orderManagement/secondSiteOrder/hadCallBackOrder/secOrderHadCallBackList";
    }
    /**
     * 已回访工单数据
     */
    @ResponseBody
    @RequestMapping(value ="getHadCallBackList")
    public String getHadCallBackList( HttpServletRequest request, HttpServletResponse response) {
        User user = UserUtils.getUser();
        String siteId= CrmUtils.getCurrentSiteId(user);
        Map<String,Object> map = new TrimMap(getParams(request));
        Page<Record> pages = new Page<Record>(request, response);
        map.put("__WXGDList", "8"); // HACK,用此来表明是无效工单列表
        Page<Record> page = secondSiteOrderService.getOrderHadCallBack(pages,siteId,map);
        return renderJson(new JqGridPage<>(page));
    }

    /**
     *获取二级网点已回访工单数量
     */

    @ResponseBody
    @RequestMapping(value="getHadCallBackCount")
    public Map<String,Object> getHadCallBackCount(){
        String siteId= CrmUtils.getCurrentSiteId(UserUtils.getUser());
        User user = UserUtils.getUser();
        Map<String,Object> resultMap=Maps.newHashMap();
        Map<String,Object> map=Maps.newHashMap();
        List<String> cateList=null;
        List<String> brandList=null;
        if(!("2".equals(user.getUserType()))){
            String cate = noService.servicemanCate(user.getId(),siteId);
            String brand = noService.servicemanBrand(user.getId(),siteId);
            cateList = StringUtil.tolist(cate);
            brandList = StringUtil.tolist(brand);
        }
        String sites = CrmUtils.getSiteIdList(siteId);
        resultMap.put("c1",orderDao.getOrderHadCallBackCount(siteId,sites,map,cateList,brandList));
        return resultMap;
    }

    /**
     * 已回访工单详情
     */
    @RequestMapping(value = "hadCallBackform")
    public String hadCallBackform(HttpServletRequest request, Model model) {
        String orderId = request.getParameter("id");
        Order order = orderService.get(orderId);
        model.addAttribute("order", order);
        Record rds = orderDispatchService.getOrderId(orderId, order.getSiteId());
        String odStatus = (rds == null ? "" : rds.getStr("status"));
        if(StringUtils.isBlank(odStatus)){
            String status=order.getStatus();
            model.addAttribute("dispStatus", TranslationUtils.translateOrderStatus(status));
        }else{
            model.addAttribute("dispStatus", (rds == null ? "" : TranslationUtils.translateDispatchOrderStatus(odStatus)));
        }
        return "modules/order/orderManagement/secondSiteOrder/hadCallBackOrder/hadCallBackForm";
    }

    /**
     * 导出处理中、待回访工单
     */
    @RequestMapping(value = "exportDuringOrCallBack")
    public String exportDuringOrCallBack(HttpServletRequest request, HttpServletResponse response, RedirectAttributes redirectAttributes) {
        try {
            String formPath = request.getParameter("formPath");
            User user = UserUtils.getUser();
            String siteId= CrmUtils.getCurrentSiteId(user);
            Map<String,Object> map = new TrimMap(getParams(request));
            SiteTableHeaderForm stf = JqGridTableUtils.getCustomizedTableHead(siteId, formPath);

            String title = stf.getExcelTitle();
            System.out.println(title);
            String fileName = title+"数据"+ DateUtils.getDate("yyyyMMddHHmmss")+".xlsx";
            Page<Record> pages = new Page<Record>(request, response);
            pages.setPageNo(1);
            pages.setPageSize(10000);
            JSONArray jarray = JSONArray.fromObject(stf.getTableHeader());
            String whoExport=request.getParameter("whoExport");
            List<Record> list =null;
            List<String> cateList=null;
            List<String> brandList=null;
            if(!("2".equals(user.getUserType()))){
                String cate = noService.servicemanCate(user.getId(),siteId);
                String brand = noService.servicemanBrand(user.getId(),siteId);
                cateList = StringUtil.tolist(cate);
                brandList = StringUtil.tolist(brand);
            }
        	String sites = CrmUtils.getSiteIdList(siteId);
            if("wait".equals(whoExport)){
                //待回访工单
                list=orderDao.getOrderWaitCallBack(pages,siteId,sites,map,cateList,brandList);
            }else if("deal".equals(whoExport)){
                //处理中工单
                list=orderDao.getOrderWaitDeal(pages,sites,map,cateList,brandList);
            }else if("had".equals(whoExport)){
                //已回访工单
                list=orderDao.getOrderHadCallBack(pages,siteId,sites,map,cateList,brandList);
            }
            String phones="";
            for (Record rd : list) {
                phones=(rd.getStr("customer_mobile"));
                if(StringUtils.isNotBlank(rd.getStr("customer_telephone"))){
                    phones+= "/"+(rd.getStr("customer_telephone"));
                }
                if(StringUtils.isNotBlank(rd.getStr("customer_telephone2"))){
                    phones+= "/"+(rd.getStr("customer_telephone2"));
                }
                rd.set("customer_mobile", phones);
                String rAccount = rd.getStr("record_account");
                if("1".equals(rAccount)){
                    rd.set("record_account", "是");
                }else{
                    rd.set("record_account", "否");
                }
                String seAt = rd.getStr("service_attitude");//满意度
                if("1".equals(seAt)){
                    rd.set("service_attitude", "十分不满意");
                }
                if("2".equals(seAt)){
                    rd.set("service_attitude", "不满意");
                }
                if("3".equals(seAt)){
                    rd.set("service_attitude", "一般");
                }
                if("4".equals(seAt)){
                    rd.set("service_attitude", "满意");
                }
                if("5".equals(seAt)){
                    rd.set("service_attitude", "十分满意");
                }
            }

            new ExportJqExcel(title+"数据",  jarray.toString(), stf.getSortHeader())
                    .setDataList(list).write(request, response, fileName).dispose();
            return null;
        } catch (Exception e) {
            e.printStackTrace();
            addMessage(redirectAttributes, "导出数据失败！失败信息："+e.getMessage());
        }
        return "redirect:"+ Global.getAdminPath()+"/sys/user/?repage";
    }

	// 待处理
	@RequestMapping(value = "secondWaitDealOrder")
	public String secondWaitDealOrder(Order order, HttpServletRequest request,HttpServletResponse response, Model model) {
		String siteId = CrmUtils.getCurrentSiteId(UserUtils.getUser());
		model.addAttribute("order", order);
		SiteTableHeaderForm stf = JqGridTableUtils.getCustomizedTableHead(
				siteId, request.getServletPath());
		model.addAttribute("headerData", stf);
		List<Record> listOrigin = orderOriginServicce.filterOrderOrigin(siteId);
		List<Record> listSecondList = secondSiteOrderService.getSecondSiteList(siteId);
		List<String> listOriginlist = new ArrayList<String>();
		for (Record rd : listOrigin) {
			listOriginlist.add(rd.getStr("name"));
		}
		List<Record> category = CategoryUtils.getListCategorySite(siteId);
		model.addAttribute("category", category);
		model.addAttribute("siteNow", secondSiteOrderService.getSiteById(siteId));
		model.addAttribute("listorigin", listOrigin);
		model.addAttribute("listoriginlist", listOriginlist);
		model.addAttribute("listSecondList", listSecondList);
		return "modules/order/orderManagement/secondSiteOrder/secondWaitDealOrder";
	}

	// 待处理
	@ResponseBody
	@RequestMapping(value = "secondWaitDealOrderList")
	public String secondWaitDealOrderList(Order order,HttpServletRequest request, HttpServletResponse response) {
		User user = UserUtils.getUser();
		String siteId = CrmUtils.getCurrentSiteId(user);
		Map<String, Object> map = new TrimMap(getParams(request));
		Page<Record> pages = new Page<Record>(request, response);
		Page<Record> page = null;
		page = secondSiteOrderService.getSecondWaitDealOrderList(pages, siteId, map);
		return renderJson(new JqGridPage<>(page));
	}


	//新建工单
	@RequestMapping(value = "newOrder")
	public String form(Order order, Model model,HttpServletRequest request) {
		String oId = request.getParameter("oId");
		User user = UserUtils.getUser();
		String siteId= CrmUtils.getCurrentSiteId(user);
		Site site = siteService.get(siteId);
		Map<String, String> brand = BrandUtils.getSiteBrand(siteId,null);
		List<Record> category = CategoryUtils.getListCategorySite(siteId);
		Date curDate = new Date();
		String orderId = RandomUtil.randomOrderNumber();
		order.setNumber(orderId);
		List<Record> listOrigin = orderOriginServicce.filterOrderOrigin(siteId);
		List<String> listOriginlist=new ArrayList<String>();
		   for (Record rd : listOrigin) {
			   listOriginlist.add(rd.getStr("name"));
		}
		model.addAttribute("listorigin", listOrigin);
		model.addAttribute("listoriginlist", listOriginlist);
		//获取来源
		List<Record> list = orderService.getOrderType();
		model.addAttribute("ordertype", list);
		order.setRepairTime(curDate);
		model.addAttribute("site", site);

		model.addAttribute("category", category);
		model.addAttribute("brand", brand);
		model.addAttribute("order", order);
		model.addAttribute("orderCopy", orderService.get(oId));
		return "modules/" + "order/orderManagement/secondSiteOrder/newSecondOrderForm";
	}

	//工单入库
	@ResponseBody
	@RequestMapping(value = "save")
	public Object save(HttpServletRequest request,Order or, Model model, RedirectAttributes redirectAttributes) {
		Map<String,Object> map = getParams(request);
		String siteId =  CrmUtils.getCurrentSiteId(UserUtils.getUser());
		Long count = Db.queryLong("select count(1) as cnt from crm_order where number=? and site_id=?", or.getNumber(), siteId);
		if (count > 0) {
			return null;
		}
		secondSiteOrderService.save(or,map);
		return or;
	}

	@ResponseBody
	@RequestMapping(value = "getSecondOrderTabCount")
	public Map<String,Object> getSecondOrderTabCount(){
		String siteId =  CrmUtils.getCurrentSiteId(UserUtils.getUser());
		return secondSiteOrderService.getSecondOrderTabCount(siteId);
	}

	@ResponseBody
	@RequestMapping(value = "getSecondSiteDetailMsg")
	public List<Record> getSecondSiteDetailMsg(String searchName,String selectcategory,String selectbrand,HttpServletRequest request, HttpServletResponse response){
		String siteId =  CrmUtils.getCurrentSiteId(UserUtils.getUser());
		List<Record> list = secondSiteOrderService.getSecondSiteDetailMsg(searchName,siteId,selectcategory,selectbrand);
		return list;
	}

	//派工
	@ResponseBody
	@RequestMapping(value = "plDispatch")
	public Map<String,Object> plDispatch(String ids,String secondSiteId,HttpServletRequest request){
		String siteId =  CrmUtils.getCurrentSiteId(UserUtils.getUser());
		return secondSiteOrderService.plDispatch(ids,siteId,secondSiteId);
	}

	//转派
	@ResponseBody
	@RequestMapping(value = "plDispatchZp")
	public Map<String,Object> plDispatchZp(String ids,String secondSiteId,String reason,HttpServletRequest request){
		String siteId =  CrmUtils.getCurrentSiteId(UserUtils.getUser());
		return secondSiteOrderService.plDispatchZp(ids,siteId,secondSiteId,reason);
	}

	@RequestMapping(value = "export")
    public String exportFile(HttpServletRequest request, HttpServletResponse response, RedirectAttributes redirectAttributes) {
		try {
			String formPath = request.getParameter("formPath");
			User user = UserUtils.getUser();
			String siteId= CrmUtils.getCurrentSiteId(user);
			Map<String,Object> map = new TrimMap(getParams(request));
			SiteTableHeaderForm stf = JqGridTableUtils.getCustomizedTableHead(siteId, formPath);
			String title = stf.getExcelTitle();
			System.out.println(title);
            String fileName = title+"数据"+DateUtils.getDate("yyyyMMddHHmmss")+".xlsx";
            Page<Record> pages = new Page<Record>(request, response);
            pages.setPageNo(1);
            pages.setPageSize(10000);
            JSONArray jarray = JSONArray.fromObject(stf.getTableHeader());
			List<Record> list =null;
			list = secondSiteOrderService.getSecondWaitDealOrderList(pages, siteId, map).getList();
			 String phones="";
			 for (Record rd : list) {
				 phones=(rd.getStr("customer_mobile"));
				 if(StringUtils.isNotBlank(rd.getStr("customer_telephone"))){
					 phones+= "/"+(rd.getStr("customer_telephone"));
				 }
				 if(StringUtils.isNotBlank(rd.getStr("customer_telephone2"))){
					 phones+= "/"+(rd.getStr("customer_telephone2"));
				 }
				 rd.set("customer_mobile", phones);
				 String rAccount = rd.getStr("record_account");
				 if("1".equals(rAccount)){
					 rd.set("record_account", "是");
				 }else{
					 rd.set("record_account", "否");
				 }
				 String seAt = rd.getStr("service_attitude");//满意度
				 if("1".equals(seAt)){
					 rd.set("service_attitude", "十分不满意");
				 }
				 if("2".equals(seAt)){
					 rd.set("service_attitude", "不满意");
				 }
				 if("3".equals(seAt)){
					 rd.set("service_attitude", "一般");
				 }
				 if("4".equals(seAt)){
					 rd.set("service_attitude", "满意");
				 }
				 if("5".equals(seAt)){
					 rd.set("service_attitude", "十分满意");
				 }
			}
    		new ExportJqExcel(title+"数据",  jarray.toString(), stf.getSortHeader())
    			.setDataList(list).write(request, response, fileName).dispose();
    		return null;
		} catch (Exception e) {
			e.printStackTrace();
			addMessage(redirectAttributes, "导出数据失败！失败信息："+e.getMessage());
		}
		return "redirect:"+Global.getAdminPath()+"/sys/user/?repage";
    }
	
	@ResponseBody
	@RequestMapping(value="waitDealOrderPlfd")
	public String waitDealOrderPlfd(String id,String latestProcess,HttpServletRequest request, HttpServletResponse response){
		return secondSiteOrderService.wdplfd(id,latestProcess);
	}

	// 待处理工单详情
	@RequestMapping(value = "secondWaitDealOrderForm")
	public String form(HttpServletRequest request, Model model) {
		String orderId = request.getParameter("id");
		Order order = orderService.get(orderId);
		User user = UserUtils.getUser();
		String siteId = CrmUtils.getCurrentSiteId(user);
		//模板获取
		List<Record> listModel = MsgModelUtils.getListModel(order.getStatus());
		model.addAttribute("listModel", listModel);

		model.addAttribute("number", order.getNumber());
		if (StringUtils.isNotBlank(order.getCustomerMobile())) {
			model.addAttribute("lenMobile", order.getCustomerMobile().length());//号码长度
		} else {
			model.addAttribute("lenMobile", 0);//号码长度
		}
		List<Record> category = CategoryUtils.getListCategorySite(siteId);
		Map<String, String> brand = BrandUtils.getSiteBrand(siteId, null);
		model.addAttribute("brand", brand);
		List<String> brandlist = new ArrayList<String>();
		for (String value : brand.values()) {
			brandlist.add(value);
		}
		List<String> catelist = new ArrayList<String>();
		for (Record caterd : category) {
			catelist.add(caterd.getStr("name"));
		}
		model.addAttribute("catelist", catelist);
		model.addAttribute("brandlist", brandlist);
		model.addAttribute("category", category);
		model.addAttribute("order", order);
		model.addAttribute("siteName", siteDao.get(siteId).getName());
		// 信息来源
		List<Record> listOrigin = orderOriginServicce.filterOrderOrigin(siteId);
		List<String> listOriginlist = new ArrayList<String>();
		for (Record rdss : listOrigin) {
			listOriginlist.add(rdss.getStr("name"));
		}
		model.addAttribute("listorigin", listOrigin);
		model.addAttribute("listoriginlist", listOriginlist);
		// 时间要求
		List<Record> list = orderDispatchService.getAllProLimit(new ArrayList<Record>());
		List<String> listStr = Lists.newArrayList();
		for (int i = 0; i < list.size(); i++) {
			listStr.add(list.get(i).getStr("name"));
		}
		Record rds = orderDispatchService.getOrderId(orderId, order.getSiteId());
        String odStatus = (rds == null ? "" : rds.getStr("status"));
        if(StringUtils.isBlank(odStatus)){
            String status=order.getStatus();
            model.addAttribute("dispStatus", TranslationUtils.translateOrderStatus(status));
        }else{
            model.addAttribute("dispStatus", (rds == null ? "" : TranslationUtils.translateDispatchOrderStatus(odStatus)));
        }
		model.addAttribute("proLimitList", listStr);
		return "modules/" + "order/orderManagement/secondSiteOrder/secondWaitDealOrderForm";
	}
	
	
	/*//待处理工单直接封单
	@RequestMapping(value = "plDispatchZp")
	public String wdplfd(String id,String latestProcess,HttpServletRequest request){
		return secondSiteOrderService.wdplfd(id,latestProcess);
	}*/

	@ResponseBody
	@RequestMapping(value = "recvOrders")
	public Object recvOrders(HttpServletRequest request) {
		String orderIds = request.getParameter("ids");
		return secondSiteOrderService.recvOrders(orderIds);
	}
	
	 
	@ResponseBody
	@RequestMapping(value = "refuseOrders")
	public Object refuseOrders(HttpServletRequest request) {
		String orderIds = request.getParameter("ids");
		return secondSiteOrderService.refuseOrders(orderIds);
	}

}
