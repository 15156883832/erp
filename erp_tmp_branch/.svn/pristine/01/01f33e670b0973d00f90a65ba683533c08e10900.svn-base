package com.jojowonet.modules.goods.web;

import ivan.common.config.Global;
import ivan.common.entity.mysql.common.User;
import ivan.common.persistence.JqGridPage;
import ivan.common.persistence.Page;
import ivan.common.utils.DateUtils;
import ivan.common.utils.UserUtils;
import ivan.common.utils.excel.ExportJqExcel;
import ivan.common.web.BaseController;

import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import net.sf.json.JSONArray;

import org.apache.commons.lang3.StringUtils;
import org.apache.poi.ss.formula.functions.T;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.servlet.mvc.support.RedirectAttributes;

import com.jfinal.plugin.activerecord.Record;
import com.jojowonet.modules.goods.entity.GoodsSiteselfOrder;
import com.jojowonet.modules.goods.service.GoodsSiteSelfService;
import com.jojowonet.modules.goods.service.SiteselfOrderService;
import com.jojowonet.modules.operate.dao.SiteDao;
import com.jojowonet.modules.order.form.SiteTableHeaderForm;
import com.jojowonet.modules.order.service.GoodsCategoryService;
import com.jojowonet.modules.order.utils.CrmUtils;
import com.jojowonet.modules.order.utils.JqGridTableUtils;
import com.jojowonet.modules.order.utils.Result;

@Controller
@RequestMapping(value = "${adminPath}/goods/siteselfOrder")
public class SiteselfOrderController extends BaseController {
	@Autowired
	private GoodsSiteSelfService goodsSiteSelfService;
	@Autowired
	private SiteselfOrderService siteselfOrderService;
	@Autowired
	private GoodsCategoryService goodsCategoryService;
	@Autowired
	private SiteDao siteDao;
	
	/*
	 * 服务商权限 订单信息 表头字段
	 * */
	@RequestMapping(value ="headerList")
	public String getHeaderList(GoodsSiteselfOrder goodsSiteselfOrder,HttpServletRequest request,HttpServletResponse response,Model model){
	     String siteId = CrmUtils.getCurrentSiteId(UserUtils.getUser());
	     List<Record> records = siteselfOrderService.categoryType(siteId);
		 List<Record> rd2 = goodsSiteSelfService.getSiteEmployeList(siteId);//服务工程师
		 List<Record> rd1 = goodsSiteSelfService.getSiteServiceInfoList(siteId);//网点人员
		 model.addAttribute("rd3", siteDao.get(siteId));
		 model.addAttribute("rd2", rd2);
		 model.addAttribute("rd1", rd1);
		 model.addAttribute("categoryType", records);
		 Map<String, Object> map = getParams(request);
	     Page<Record> pages = new Page<Record>(request,response);
	     Page<Record> page = siteselfOrderService.siteselfOrderList(pages,siteId,map);
	     model.addAttribute("page", page);
	     model.addAttribute("map", map);
		 return "modules/goods/siteselfOrder";
	}
	
	/*
	 * 服务商权限 订单信息 列表
	 * */
	@ResponseBody
	@RequestMapping(value = "siteselfOrderGrid")
	public  String getSiteCategoryList(HttpServletRequest request,HttpServletResponse response){
	    String siteId = CrmUtils.getCurrentSiteId(UserUtils.getUser());
	    Map<String,Object> map =request.getParameterMap();
		Page<Record> pages = new Page<Record>(request,response);
		Page<Record> page = siteselfOrderService.siteselfOrderList(pages,siteId,map);
		return renderJson(new JqGridPage<>(page));
	}
	
	/*
	 * 服务商权限 订单信息 列表中点击收款操作 查出详细信息
	 * */
	@ResponseBody
	@RequestMapping(value = "queryById")
	public  Record queryById(String rowId,HttpServletRequest request,HttpServletResponse response){
	   return siteselfOrderService.queryById(rowId);
	}
	
	/*
	 * 服务商权限 订单信息 列表中点击收款操作 查出详细信息，更具结算利润设置显示
	 * */
	@ResponseBody
	@RequestMapping(value = "queryByIdMoney")
	public  Map<String,Object> queryByIdMoney(String rowId,HttpServletRequest request,HttpServletResponse response){
		Map<String,Object>  mapMsg = new HashMap<String, Object>();
		String siteId = CrmUtils.getCurrentSiteId(UserUtils.getUser());
		Record rd = siteselfOrderService.queryById(rowId);
		Record salesSet = goodsCategoryService.getGoodsSalesSet(siteId);
		mapMsg.put("gsd", rd);
		mapMsg.put("salesSet", salesSet);
		return mapMsg;
	}
	
	/*
	 * 服务商权限 订单信息  点击收款按钮确定付款，可以更改实交金额，
	 * */
	@ResponseBody
	@RequestMapping(value = "confirmAmount")
	public Boolean confirmAmount(String rowId, String confirmAmount, String status, String salesCommissions,String oneTch,String idsArr,String nameArrs,String marks,String commissionsRemarks, HttpServletRequest request, HttpServletResponse response) {
		Map<String, Object> map = request.getParameterMap();
		String pNum1 = ((String[]) map.get("pNum"))[0];
		double pNum = Double.parseDouble(pNum1);
		String gId = ((String[]) map.get("gId"))[0];
		String uid = CrmUtils.getCurrentSiteId(UserUtils.getUser());
		String uname = CrmUtils.getUserXM();
		return siteselfOrderService.confirmAmount(rowId, confirmAmount, status, gId, pNum, uid, uname, salesCommissions,oneTch ,idsArr,nameArrs,marks,commissionsRemarks);
	}
	
	/*
	 * 服务商权限 订单信息  点击收款按钮确定付款，可以更改实交金额，
	 * */
	@ResponseBody
	@RequestMapping(value = "confirmAmountHz")
	public Boolean confirmAmountHz(String rowId, String confirmAmount, String status, String salesCommissions,String oneTch,String idsArr,String nameArrs,String marks,String commissionsRemarks, HttpServletRequest request, HttpServletResponse response) {
		Map<String, Object> map = request.getParameterMap();
		String pNum1 = ((String[]) map.get("pNum"))[0];
		double pNum = Double.parseDouble(pNum1);
		String gId = ((String[]) map.get("gId"))[0];
		String uid = CrmUtils.getCurrentSiteId(UserUtils.getUser());
		String uname = CrmUtils.getUserXM();
		return siteselfOrderService.confirmAmountHz(rowId, confirmAmount, status, gId, pNum, uid, uname, salesCommissions,oneTch ,idsArr,nameArrs,marks,commissionsRemarks);
	}
	
	@ResponseBody
	@RequestMapping(value = "confirmAmount1")
	public  Boolean confirmAmount1(String rowId,String confirmAmount,String status,String pNum,String gId,String salesCommissions,String oneTch,String idsArr,String nameArrs, HttpServletRequest request,HttpServletResponse response){
		String uid = CrmUtils.getCurrentSiteId(UserUtils.getUser());
		String uname = CrmUtils.getUserXM();
		return siteselfOrderService.confirmAmount1(rowId,confirmAmount,status,pNum,gId,uid,uname,salesCommissions,oneTch ,idsArr,nameArrs);
	}
	
	/*
	 * 服务商权限 订单信息 订单(出库)详情
	 * */
	@ResponseBody
	@RequestMapping(value = "detailMsg")
	public  Record detailMsg(String rowId,HttpServletRequest request,HttpServletResponse response){
	   return siteselfOrderService.detailMsg(rowId);
	}
	
	/*
	 * 服务商权限 订单信息 订单(出库)详情
	 * */
	@ResponseBody
	@RequestMapping(value = "detailMsgEdit")
	public  Record detailMsgEdit(String rowId,HttpServletRequest request,HttpServletResponse response){
		return siteselfOrderService.detailMsgEdit(rowId);
	}
	
	/*
	 * 服务商权限 订单信息 订单(出库)详情
	 * */
	@RequestMapping(value = "toDetailMsgPage")
	public  String toDetailMsgPage(String id,String mark,HttpServletRequest request,HttpServletResponse response,Model model){
		User user = UserUtils.getUser();
		String siteId= CrmUtils.getCurrentSiteId(user);
		Record rd = siteselfOrderService.detailMsgEdit(id);
		if(StringUtils.isNotBlank(rd.getStr("good_icon"))){
			rd.set("firstIcon", rd.getStr("good_icon").split(",")[0]);
		}
		List<Record> list = siteselfOrderService.queryTichByOrderId(siteId,id);
		model.addAttribute("detail", rd);
		model.addAttribute("list", list);
		model.addAttribute("mark", mark);
		return "modules/goods/goodsOrdersDetail";
	}

	/*
	 * 服务商权限 订单信息  出库操作
	 * */
	@ResponseBody
	@RequestMapping(value = "outStock")
	public  String outStock(String rowId,String goodId,Double purchaseNum,HttpServletRequest request,HttpServletResponse response){
	   return siteselfOrderService.outStock(rowId,goodId,purchaseNum);
	}
	
	//公司订单导出数据
	@RequestMapping(value="export")
	public String exportfile(HttpServletRequest request, HttpServletResponse response, RedirectAttributes redirectAttributes){
		try {
			String formPath = request.getParameter("formPath");
			User user = UserUtils.getUser();
			String siteId= CrmUtils.getCurrentSiteId(user);
			Page<Record> pages = new Page<Record>(request, response);
			pages.setPageNo(1);
	        pages.setPageSize(10000);
			Map<String,Object> map = getParams(request);
			SiteTableHeaderForm stf = JqGridTableUtils.getCustomizedTableHead(siteId, formPath);
			JSONArray jarray = JSONArray.fromObject(stf.getTableHeader());
			String title = stf.getExcelTitle();
	        String fileName = title+"数据"+DateUtils.getDate("yyyyMMddHHmmss")+".xlsx"; 
	    	
			
	        List<Record> list = siteselfOrderService.siteselfOrderList1(pages,siteId,map);
	        if(list.size()>0){
				 for(Record rd : list){
					 if(rd.getStr("status")!=null){
						 String st = rd.getStr("status");
						 if(st.equals("1") || st.equals("4")){
							 rd.set("status", "待收款");
						 }else if(st.equals("3") || st.equals("2")){
							 rd.set("status", "已完成");
						 }else if(st.equals("0")){
							 rd.set("status", "已取消");
						 }
					 }
				 }
	        }
			new ExportJqExcel(title+"数据", jarray.toString(), stf.getSortHeader())
				.setDataList(list).write(request, response, fileName).dispose();
			return null;
		} catch (Exception e) {
			e.printStackTrace();
			addMessage(redirectAttributes, "导出数据失败！失败信息："+e.getMessage());
		}
		return "redirect:"+Global.getAdminPath()+"/sys/user/?repage";
	}
	
	//工程师自购订单导出数据
	@RequestMapping(value="exportZg")
	public String exportfileZg(HttpServletRequest request, HttpServletResponse response, RedirectAttributes redirectAttributes){
		try {
			String formPath = request.getParameter("formPath");
			User user = UserUtils.getUser();
			String siteId= CrmUtils.getCurrentSiteId(user);
			Page<Record> pages = new Page<Record>(request, response);
			pages.setPageNo(1);
			pages.setPageSize(10000);
			Map<String,Object> map = getParams(request);
			SiteTableHeaderForm stf = JqGridTableUtils.getCustomizedTableHead(siteId, formPath);
			JSONArray jarray = JSONArray.fromObject(stf.getTableHeader());
			String title = stf.getExcelTitle();
			String fileName = title+"数据"+DateUtils.getDate("yyyyMMddHHmmss")+".xlsx"; 
			List<Record> list = siteselfOrderService.employeBuyBySelfOrderList(pages,siteId,map);
			if(list.size()>0){
				for(Record rd : list){
					if(rd.getStr("status")!=null){
						String st = rd.getStr("status");
						if(st.equals("3")){
							rd.set("status", "待确认");
						}else if(st.equals("5")){
							rd.set("status", "已确认");
						}else if(st.equals("0")){
							rd.set("status", "已取消");
						}
					}
				}
			}
			new ExportJqExcel(title+"数据", jarray.toString(), stf.getSortHeader())
			.setDataList(list).write(request, response, fileName).dispose();
			return null;
		} catch (Exception e) {
			e.printStackTrace();
			addMessage(redirectAttributes, "导出数据失败！失败信息："+e.getMessage());
		}
		return "redirect:"+Global.getAdminPath()+"/sys/user/?repage";
	}
	
	@ResponseBody
	@RequestMapping(value="addEmployeDetail")
	public void addEmployeDetail(){
		System.out.print("添加工程师明细成功！！！----"+siteselfOrderService.addEmployeDetail());
	}
	//取消商品订单
	@ResponseBody
	@RequestMapping(value="cancelGoodsOrder")
	public Result<T> cancelGoodsOrder(HttpServletRequest request){
		String ids = request.getParameter("yxIds");
		String reason = request.getParameter("reason");
		return siteselfOrderService.cancelGoodsOrder(ids,reason);
	}
	
	//删除商品订单
	@ResponseBody
	@RequestMapping(value="deleteGoodsOrders")
	public String deleteGoodsOrders(HttpServletRequest request) {
		String ids = request.getParameter("ids");
		return siteselfOrderService.deleteGoodsOrders(ids);
	}
	
	//工程师自购订单-列表
	@RequestMapping(value = "employeBuyBySelfOrder")
	public String employeBuyBySelfOrder(HttpServletRequest request, HttpServletResponse response, Model model) {
		String siteId = CrmUtils.getCurrentSiteId(UserUtils.getUser());
		List<Record> records = siteselfOrderService.categoryType(siteId);
		List<Record> rd2 = goodsSiteSelfService.getSiteEmployeList(siteId);// 服务工程师
		List<Record> rd1 = goodsSiteSelfService.getSiteServiceInfoList(siteId);// 网点人员
		model.addAttribute("rd3", siteDao.get(siteId));
		model.addAttribute("rd2", rd2);
		model.addAttribute("rd1", rd1);
		model.addAttribute("categoryType", records);
		Map<String, Object> map = getParams(request);
		Page<Record> pages = new Page<Record>(request, response);
		Page<Record> page = siteselfOrderService.employeBuyBySelfOrder(pages, siteId, map);
		model.addAttribute("page", page);
		model.addAttribute("map", map);
		return "modules/goods/employeBuyBySelfOrder";
	}
	
	@ResponseBody
	@RequestMapping(value="confirmOrder")
	public String confirmOrder(String id,HttpServletRequest request) {
		return siteselfOrderService.confirmOrder(id);
	}
	
	@RequestMapping(value="printGoodsOrder")
	public String printGoodsOrder(HttpServletRequest request,Model model) {
		String siteId = CrmUtils.getCurrentSiteId(UserUtils.getUser());
		String ids = request.getParameter("ids");
		List<Record> list = siteselfOrderService.getPrintDataByIds(ids);
		model.addAttribute("list",list);
		model.addAttribute("site",siteDao.get(siteId));
		return "modules/goods/printOrders";
	}
}
