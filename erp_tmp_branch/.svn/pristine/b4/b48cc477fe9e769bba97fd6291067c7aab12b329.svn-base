package com.jojowonet.modules.goods.service;

import com.google.common.collect.Lists;
import com.jfinal.plugin.activerecord.Db;
import com.jfinal.plugin.activerecord.Record;
import com.jojowonet.modules.goods.dao.GoodsEmployeOwnDao;
import com.jojowonet.modules.goods.dao.GoodsEmployeOwnDetailDao;
import com.jojowonet.modules.goods.dao.GoodsSiteSelfOrderDeductDetailDao;
import com.jojowonet.modules.goods.dao.GoodsSiteselfDetailDao;
import com.jojowonet.modules.goods.entity.GoodsEmployeOwn;
import com.jojowonet.modules.goods.entity.GoodsEmployeOwnDetail;
import com.jojowonet.modules.goods.entity.GoodsSiteSelfOrderDeductDetail;
import com.jojowonet.modules.goods.entity.GoodsSiteselfDetail;
import com.jojowonet.modules.operate.service.NonServicemanService;
import com.jojowonet.modules.operate.service.SiteService;
import com.jojowonet.modules.order.utils.CrmUtils;
import com.jojowonet.modules.order.utils.Result;

import com.jojowonet.modules.order.utils.StringUtil;
import ivan.common.entity.mysql.common.User;
import ivan.common.persistence.Page;
import ivan.common.service.BaseService;
import ivan.common.utils.StringUtils;
import ivan.common.utils.UserUtils;

import org.apache.poi.ss.formula.functions.T;
import org.hibernate.SQLQuery;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;
import org.springframework.transaction.annotation.Transactional;

import java.math.BigDecimal;
import java.sql.PreparedStatement;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;


@Component
@Transactional(readOnly = true)
public class SiteselfOrderService extends BaseService {
	@Autowired
	private GoodsSiteselfDetailDao goodsSiteselfDetailDao;
	@Autowired
	private SiteService siteService;
	@Autowired
	private NonServicemanService nonService;
	@Autowired
	private GoodsSiteSelfOrderDeductDetailDao goodsSiteSelfOrderDeductDetailDao;
	@Autowired
	private GoodsEmployeOwnDetailDao goodsEmployeOwnDetailDao;
	@Autowired
	private GoodsEmployeOwnDao goodsEmployeOwnDao;
	
	public Page<Record> siteselfOrderList(Page<Record> page,String siteId,Map<String,Object> map) {//服务商权限 订单信息 列表
		if(map.get("pageSize")!=null){
			if(StringUtils.isNotBlank(map.get("pageSize").toString())){
				page.setPageSize(Integer.valueOf(map.get("pageSize").toString()));
				page.setPageNo(Integer.valueOf(map.get("pageNo").toString()));
			}
		}
		List<Record> list = siteselfOrderList1(page,siteId,map);
		for(Record rd : list){
			rd.set("firstIcon", "");
			if(StringUtils.isNotBlank(rd.getStr("good_icon"))){
				rd.set("firstIcon", rd.getStr("good_icon").split(",")[0]);//商品列表显示图片
			}
			//出库方式
			String status=rd.getStr("status");
			String outstockType=rd.getStr("outstock_type");
			BigDecimal stocks=rd.getBigDecimal("stocks");
			BigDecimal purchaseNum=rd.getBigDecimal("purchase_num");
			if("0".equals(status) || "1".equals(status) || "2".equals(status) ){
				
			}
			if("3".equals(status)){
				
			}
		}
		Long count = queryCount(siteId,map);
		page.setList(list);
		page.setCount(count);
		return page;
	}
	public Page<Record> employeBuyBySelfOrder(Page<Record> page,String siteId,Map<String,Object> map) {//服务商权限 订单信息 列表
		if(map.get("pageSize")!=null){
			if(StringUtils.isNotBlank(map.get("pageSize").toString())){
				page.setPageSize(Integer.valueOf(map.get("pageSize").toString()));
				page.setPageNo(Integer.valueOf(map.get("pageNo").toString()));
			}
		}
		List<Record> list = employeBuyBySelfOrderList(page,siteId,map);
		for(Record rd : list){
			rd.set("firstIcon", "");
			if(StringUtils.isNotBlank(rd.getStr("good_icon"))){
				rd.set("firstIcon", rd.getStr("good_icon").split(",")[0]);//商品列表显示图片
			}
			//出库方式
			String status=rd.getStr("status");
			String outstockType=rd.getStr("outstock_type");
			BigDecimal stocks=rd.getBigDecimal("stocks");
			BigDecimal purchaseNum=rd.getBigDecimal("purchase_num");
			if("0".equals(status) || "1".equals(status) || "2".equals(status) ){
				
			}
			if("3".equals(status)){
				
			}
		}
		Long count = queryCountEbbsol(siteId,map);
		page.setList(list);
		page.setCount(count);
		return page;
	}
	
	public List<Record> siteselfOrderList(String siteId,Map<String,Object> map) {//服务商权限 订单信息 列表
		return siteselfOrderListExcel(null,siteId,map);
	}
   
	public List<Record> categoryType(String siteId) {//网点商品类别
		StringBuilder stringBuilder = new StringBuilder();
		stringBuilder.append("SELECT * FROM crm_goods_category WHERE status='0' AND site_id='"+siteId+"'") ;
		return Db.find(stringBuilder.toString());
	}
	
	public List<Record> categoryType1() {//平台合作商品类别
		StringBuilder stringBuilder = new StringBuilder();
		stringBuilder.append("SELECT a.* FROM crm_goods_category a WHERE a.site_id IS NULL AND a.status='0'  ") ;
		return Db.find(stringBuilder.toString());
	}
	
	public List<Record> categoryType2() {//短信类别
		StringBuilder stringBuilder = new StringBuilder();
		stringBuilder.append("SELECT a.* FROM crm_goods_category a WHERE a.site_id IS NULL AND a.status='0' AND a.name like '%短信%'  ") ;
		return Db.find(stringBuilder.toString());
	}
	
	public List<Record> categoryType3() {//来电弹屏类别
		StringBuilder stringBuilder = new StringBuilder();
		stringBuilder.append("SELECT a.* FROM crm_goods_category a WHERE a.site_id IS NULL AND a.status='0' AND a.name like '%来电弹屏%'  ") ;
		return Db.find(stringBuilder.toString());
	}
	
	public List<Record> siteselfOrderList1(Page<Record> page,String siteId,Map<String, Object> map) {//服务商权限 订单信息 列表具体查询
		StringBuilder stringBuilder = new StringBuilder();
		stringBuilder.append("SELECT oc.id as ocId,oc.imgs as ocImgs,DATE_FORMAT(a.placing_order_time,'%Y-%m-%d %H:%i:%s') as xiadanTime,DATE_FORMAT(a.confirm_time,'%Y-%m-%d %H:%i:%s') as confirmTime,a.*,b.stocks,b.unit,s.name as siteName FROM crm_goods_siteself_order a left join crm_goods_siteself b on a.good_id=b.id left join crm_site s on a.site_id=s.id LEFT JOIN crm_order_collections oc ON oc.order_id=a.id AND oc.status='0' AND oc.source='1'  WHERE a.outstock_type!='3' and a.good_brand!='浩泽'  and a.site_id='"+siteId+"'");
		stringBuilder.append(siteselfOrderSql(map));
		stringBuilder.append(" order by a.placing_order_time desc");
		if(page!=null){
			stringBuilder.append(" limit " + page.getPageSize() + " offset " + (page.getPageNo()-1)*page.getPageSize());
		}
		return Db.find(stringBuilder.toString());
	}
	
	public List<Record> employeBuyBySelfOrderList(Page<Record> page,String siteId,Map<String, Object> map) {//服务商权限 订单信息 列表具体查询
		StringBuilder stringBuilder = new StringBuilder();
		stringBuilder.append("SELECT oc.id as ocId,oc.imgs as ocImgs,DATE_FORMAT(a.placing_order_time,'%Y-%m-%d %H:%i:%s') as xiadanTime,DATE_FORMAT(a.confirm_time,'%Y-%m-%d %H:%i:%s') as confirmTime,a.*,b.stocks,b.unit,s.name as siteName FROM crm_goods_siteself_order a left join crm_goods_siteself b on a.good_id=b.id left join crm_site s on a.site_id=s.id LEFT JOIN crm_order_collections oc ON oc.order_id=a.id AND oc.status='0' AND oc.source='1'  WHERE a.outstock_type='3'  and a.site_id='"+siteId+"'");
		stringBuilder.append(siteselfOrderSqlZg(map));
		stringBuilder.append(" order by a.placing_order_time desc");
		if(page!=null){
			stringBuilder.append(" limit " + page.getPageSize() + " offset " + (page.getPageNo()-1)*page.getPageSize());
		}
		return Db.find(stringBuilder.toString());
	}
	
	public List<Record> siteselfOrderListExcel(Page<Record> page,String siteId,Map<String, Object> map) {//服务商权限 订单信息 列表具体查询
		StringBuilder stringBuilder = new StringBuilder();
		stringBuilder.append("SELECT a.* FROM crm_goods_siteself_order a  WHERE  a.good_brand!='浩泽' AND a.site_id='"+siteId+"'");
		stringBuilder.append(siteselfOrderSql(map));
		stringBuilder.append(" order by a.placing_order_time desc");
		if(page!=null){
			stringBuilder.append(" limit " + page.getPageSize() + " offset " + (page.getPageNo()-1)*page.getPageSize());
		}
		return Db.find(stringBuilder.toString());
	}
	
	public String siteselfOrderSql(Map<String, Object> map) {//查询条件
		StringBuilder stringBuilder = new StringBuilder();
		if (StringUtils.isNotEmpty(   (CharSequence) map.get("number")  ) ) {
			String numb=map.get("number").toString().trim();
			stringBuilder.append(" and a.number like '%"+numb+"%' ");
		}
		if (StringUtils.isNotEmpty(   (CharSequence) map.get("customerName")  ) ) {
			String numb=map.get("customerName").toString().trim();
			stringBuilder.append(" and a.customer_name like '%"+numb+"%' ");
		}
		if (StringUtils.isNotEmpty(   (CharSequence) map.get("customerMobile")  ) ) {
			String numb=map.get("customerMobile").toString().trim();
			stringBuilder.append(" and a.customer_contact like '%"+numb+"%' ");
		}
		if (StringUtils.isNotEmpty(   (CharSequence) map.get("status")  ) ) {
			String st=map.get("status").toString().trim();
			if(st.equals("1z")){
				stringBuilder.append(" and (a.status in ('1','4'))");
			}else if(st.equals("2z")){
				stringBuilder.append(" and a.status in ('2','3') ");
			}else if(st.equals("0z")){
				stringBuilder.append(" and a.status = '0' ");
			}
		}
		if (StringUtils.isNotEmpty(   (CharSequence) map.get("placingOrderBy")  ) ) {
			String numb=map.get("placingOrderBy").toString().trim();
			stringBuilder.append(" and a.creator like '%"+numb+"%' ");
		}
		if (StringUtils.isNotEmpty(   (CharSequence) map.get("goodName")  ) ) {
			String numb=map.get("goodName").toString().trim();
			stringBuilder.append(" and a.good_name like '%"+numb+"%' ");
		}
		if (StringUtils.isNotEmpty(   (CharSequence) map.get("goodCategory")  ) ) {
			String numb=map.get("goodCategory").toString().trim();
			stringBuilder.append(" and a.good_category = '"+numb+"' ");
		}

		if(StringUtil.checkParamsValid(map.get("xiaoNames"))){
			String[] xiaoNames=((map.get("xiaoNames").toString())).split(",");
			if(xiaoNames.length>0) {
				stringBuilder.append("and (a.placing_name like "+StringUtil.joinInSqlforselforder(xiaoNames)+")");
			}
		}
		if(StringUtil.checkParamsValid(map.get("placingOrderTimeMin"))){
			String placingOrderTimeMin=map.get("placingOrderTimeMin").toString().trim();
			stringBuilder.append(" and a.placing_order_time >= '"+placingOrderTimeMin+"' ");
		}
		if(StringUtil.checkParamsValid(map.get("placingOrderTimeMax"))){
			String placingOrderTimeMax=map.get("placingOrderTimeMax").toString().trim();
			stringBuilder.append(" and a.placing_order_time <= '"+placingOrderTimeMax+"' ");
		}
		if(StringUtil.checkParamsValid(map.get("confirmTimeMin"))){
			String confirmTimeMin=map.get("confirmTimeMin").toString().trim();
			stringBuilder.append(" and a.confirm_time >= '"+confirmTimeMin+"' ");
		}
		if(StringUtil.checkParamsValid(map.get("confirmTimeMax"))){
			String confirmTimeMax=map.get("confirmTimeMax").toString().trim();
			stringBuilder.append(" and a.confirm_time <= '"+confirmTimeMax+"' ");
		}
		return stringBuilder.toString();
	}
	
	public String siteselfOrderSqlZg(Map<String, Object> map) {//查询条件
		StringBuilder stringBuilder = new StringBuilder();
		if (StringUtils.isNotEmpty(   (CharSequence) map.get("number")  ) ) {
			String numb=map.get("number").toString().trim();
			stringBuilder.append(" and a.number like '%"+numb+"%' ");
		}
		if (StringUtils.isNotEmpty(   (CharSequence) map.get("customerName")  ) ) {
			String numb=map.get("customerName").toString().trim();
			stringBuilder.append(" and a.customer_name like '%"+numb+"%' ");
		}
		if (StringUtils.isNotEmpty(   (CharSequence) map.get("customerMobile")  ) ) {
			String numb=map.get("customerMobile").toString().trim();
			stringBuilder.append(" and a.customer_contact like '%"+numb+"%' ");
		}
		if (StringUtils.isNotEmpty(   (CharSequence) map.get("status")  ) ) {
			String st=map.get("status").toString().trim();
			stringBuilder.append(" and a.status='"+st+"'");
		}
		if (StringUtils.isNotEmpty(   (CharSequence) map.get("placingOrderBy")  ) ) {
			String numb=map.get("placingOrderBy").toString().trim();
			stringBuilder.append(" and a.creator like '%"+numb+"%' ");
		}
		if (StringUtils.isNotEmpty(   (CharSequence) map.get("goodName")  ) ) {
			String numb=map.get("goodName").toString().trim();
			stringBuilder.append(" and a.good_name like '%"+numb+"%' ");
		}
		if (StringUtils.isNotEmpty(   (CharSequence) map.get("goodCategory")  ) ) {
			String numb=map.get("goodCategory").toString().trim();
			stringBuilder.append(" and a.good_category = '"+numb+"' ");
		}
		
		if(StringUtil.checkParamsValid(map.get("xiaoNames"))){
			String[] xiaoNames=((map.get("xiaoNames").toString())).split(",");
			if(xiaoNames.length>0) {
				stringBuilder.append("and (a.placing_name like "+StringUtil.joinInSqlforselforder(xiaoNames)+")");
			}
		}

		if(StringUtil.checkParamsValid(map.get("placingOrderTimeMin"))){
			String placingOrderTimeMin=map.get("placingOrderTimeMin").toString().trim();
			stringBuilder.append(" and a.placing_order_time >= '"+placingOrderTimeMin+"' ");
		}
		if(StringUtil.checkParamsValid(map.get("placingOrderTimeMax"))){
			String placingOrderTimeMax=map.get("placingOrderTimeMax").toString().trim();
			stringBuilder.append(" and a.placing_order_time <= '"+placingOrderTimeMax+"' ");
		}
		if(StringUtil.checkParamsValid(map.get("confirmTimeMin"))){
			String confirmTimeMin=map.get("confirmTimeMin").toString().trim();
			stringBuilder.append(" and a.confirm_time >= '"+confirmTimeMin+"' ");
		}
		if(StringUtil.checkParamsValid(map.get("confirmTimeMax"))){
			String confirmTimeMax=map.get("confirmTimeMax").toString().trim();
			stringBuilder.append(" and a.confirm_time <= '"+confirmTimeMax+"' ");
		}

		return stringBuilder.toString();
	}

	private String getParamValue(Map<String, Object> map, String param) {
		Object value = map.get(param);
		return value == null ? null : ((String[]) map.get(param))[0];
	}

	private String getTrimmedParamValue(Map<String, Object> map, String param) {
		return org.apache.commons.lang.StringUtils.trim(getParamValue(map, param));
	}
	
	public Long queryCount(String siteId,Map<String, Object> map) {//服务商权限 订单信息 列表数据总数
		StringBuilder sb = new StringBuilder();
		sb.append("SELECT count(*) FROM crm_goods_siteself_order a  WHERE a.outstock_type!='3' and a.good_brand!='浩泽' AND a.site_id='"+siteId+"'");
		sb.append(siteselfOrderSql(map));
		return Db.queryLong(sb.toString());
	}
	
	public Long queryCountEbbsol(String siteId,Map<String, Object> map) {//服务商权限 订单信息 列表数据总数
		StringBuilder sb = new StringBuilder();
		sb.append("SELECT count(*) FROM crm_goods_siteself_order a  WHERE a.outstock_type='3'  AND a.site_id='"+siteId+"'");
		sb.append(siteselfOrderSqlZg(map));
		return Db.queryLong(sb.toString());
	}
	
	
	public Record queryById(String rowId) {//服务商权限 订单信息 列表中点击收款操作 查出详细信息
		return Db.findFirst("SELECT a.commissions_remarks,c.payment_type as zfType,c.id as zfId,c.imgs as zfImg,c.payment_amount as zfMoney,a.*,b.site_price,b.ratio_deduct_val,b.unit,b.deduct_type,b.employe_price FROM crm_goods_siteself_order a left join crm_goods_siteself b on a.good_id=b.id left join crm_order_collections c on a.id=c.order_id and c.status='0' and c.source='1' WHERE  a.id='"+rowId+"'");
	}
	
	// 自营商品订单确认收款
	@Transactional
	public Boolean confirmAmount(String rowId, String confirmAmount, String status, String gId, Double pNum, String uid, String uname, String salesCommissions,String oneTch,String idsArr,String nameArrs,String marks,String commissionsRemarks) {//服务商权限 订单信息  点击收款按钮确定付款，可以更改实交金额
		SimpleDateFormat sf = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
		Date now = new Date();
		String dat = sf.format(now);
		BigDecimal allTc = new BigDecimal(0);
		String[] oneArr = oneTch.split(",");
		for(String my : oneArr){
			allTc = allTc.add(new BigDecimal(my));
		}
		confirmAmount = confirmAmount.trim();
		if(StringUtils.isBlank(salesCommissions)){
			salesCommissions="0";
		}
		Record order = Db.findFirst("select a.*,b.site_price as sitePrice from crm_goods_siteself_order a left join crm_goods_siteself b on a.good_id=b.id where a.id=? ",rowId);
		/*if (status.equals("1")) {//公司库存，1:待收款待出库
			SQLQuery sqlQuery3 = goodsSiteselfDetailDao.getSession().createSQLQuery("UPDATE crm_goods_siteself_order a SET a.status='2',a.confirm_time='"+dat+"', a.confirm_amount='"+confirmAmount+"',a.confirm_by='"+uid+"',a.confirmor='"+uname+"',a.sales_commissions='"+allTc+"',a.placing_order_by='"+idsArr+"',a.placing_name='"+nameArrs+"' WHERE a.id='"+rowId+"'");
			sqlQuery3.executeUpdate();
		} else if (status.equals("4")) {//工程师库存，4:待收款已出库
*/		SQLQuery sqlQuery3 = goodsSiteselfDetailDao.getSession().createSQLQuery("UPDATE crm_goods_siteself_order a SET a.status='3',a.confirm_time='"+dat+"',a.pay_mark='"+marks+"', a.confirm_amount='"+confirmAmount+"',a.confirm_by='"+uid+"',a.confirmor='"+uname+"',a.sales_commissions='"+allTc+"',a.placing_order_by='"+idsArr+"',a.placing_name='"+nameArrs+"',a.commissions_remarks='"+commissionsRemarks+"' WHERE a.id='"+rowId+"'");
		sqlQuery3.executeUpdate();
		SQLQuery sqlQuery4 = goodsSiteselfDetailDao.getSession().createSQLQuery("UPDATE crm_goods_siteself a set a.sales=(a.sales+'" + pNum + "') WHERE a.status='0' AND a.id='" + gId + "'");
		sqlQuery4.executeUpdate();
		//}
		
		Long detailCount = Db.queryLong("select count(*) from crm_goods_siteself_detail a where a.order_id='"+rowId+"' and a.good_id='"+gId+"' and a.status='0'");
		if(detailCount > 0){
			SQLQuery sqlQuery2 = goodsSiteselfDetailDao.getSession().createSQLQuery("update crm_goods_siteself_detail a set a.pay_money='"+confirmAmount+"' where a.order_id='"+rowId+"' and a.good_id='"+gId+"' and a.status='0'");
			sqlQuery2.executeUpdate();
		}
		Long detailEmp = Db.queryLong("select count(*) from crm_goods_employe_owndetail a where a.order_id='"+rowId+"' and a.good_id='"+gId+"' and a.site_id='"+order.getStr("site_id")+"' and a.type='1' and a.status='0'");
		if(detailEmp > 0){
			SQLQuery sqlQuery1 = goodsSiteselfDetailDao.getSession().createSQLQuery("update crm_goods_employe_owndetail a set a.pay_money='"+confirmAmount+"' where a.order_id='"+rowId+"' and a.good_id='"+gId+"' and a.site_id='"+order.getStr("site_id")+"' and a.type='1' and a.status='0'");
			sqlQuery1.executeUpdate();
		}
		List<String> list = Lists.newArrayList();
		List<GoodsSiteSelfOrderDeductDetail> listAdd = Lists.newArrayList();;
		Date nowd = new Date();
		for(int i=0;i<idsArr.split(",").length;i++){
			String sql = "";
			Record rdc = Db.findFirst("select a.* from crm_goods_siteself_order_deduct_detail a where a.salesman_id ='"+idsArr.split(",")[i]+"' and a.site_order_id='"+rowId+"' and a.status='0'");
			if(rdc!=null){
				sql = "UPDATE crm_goods_siteself_order_deduct_detail a  SET a.sales_commissions ='"+oneTch.split(",")[i]+"'  WHERE a.salesman_id ='"+idsArr.split(",")[i]+"' and a.site_order_id='"+rowId+"' ";
				//list.add(sql);
				SQLQuery sqlQuery9 = goodsSiteselfDetailDao.getSession().createSQLQuery(sql);
				sqlQuery9.executeUpdate();
			}else{
				Record rdUser = Db.findFirst("select a.* from sys_user a where a.id=?",idsArr.split(",")[i]);
				GoodsSiteSelfOrderDeductDetail sodd = new GoodsSiteSelfOrderDeductDetail();
				sodd.setCreateTime(nowd);
				sodd.setCreator(order.getStr("creator"));
				sodd.setGoodName(order.getStr("good_name"));
				sodd.setGoodNumber(order.getStr("good_number"));
				sodd.setSalemanType(rdUser.getStr("user_type"));
				sodd.setSalesCommissions(new BigDecimal(oneTch.split(",")[i]));
				sodd.setSalesman(nameArrs.split(",")[i]);
				sodd.setSalesmanId(idsArr.split(",")[i]);
				sodd.setSiteId(order.getStr("site_id"));
				sodd.setSiteOrderId(rowId);
				sodd.setStatus("0");
				listAdd.add(sodd);
			}
		}
		String delIds="";
		for(String str : order.getStr("placing_order_by").split(",")){
			String mark1="0";
			for(int j=0;j<idsArr.split(",").length;j++){
				if(str.equals(idsArr.split(",")[j])){
					mark1="1";
				}
			}
			if(!"1".equals(mark1)){
				if("".equals(delIds)){
					delIds="'"+str+"'";
				}else{
					delIds=delIds+",'"+str+"'";
				}
			}
		}
		if(StringUtils.isNotBlank(delIds)){
			SQLQuery sqlQuery0 = goodsSiteselfDetailDao.getSession().createSQLQuery("update crm_goods_siteself_order_deduct_detail a set a.status='1' where a.salesman_id in("+delIds+") and a.site_order_id='"+rowId+"'");
			sqlQuery0.executeUpdate();
		}
		if(listAdd.size()>0){
			goodsSiteSelfOrderDeductDetailDao.save(listAdd);
		}
		/*if(list.size()>0){//jfinal事务不回滚
			Db.batch(list, list.size());
		}*/
		//更新利润表
		String nameNow = CrmUtils.getUserXM();//销售人nameArrs;总额：confirmAmount；工程师提成：allTc；成本：
		Double chenben = Double.valueOf(allTc.toString()) + Double.valueOf(order.getBigDecimal("sitePrice").toString()) * pNum;
		Double lr = Double.valueOf(confirmAmount)-chenben;
		if(lr <= 0) {
			lr = Double.valueOf(0);
		}
		SQLQuery sqlQueryPay = goodsSiteselfDetailDao.getSession().createSQLQuery("UPDATE crm_goods_siteself_profit_detail a SET a.confirmor='"+nameNow+"', a.confirm_time=NOW(),a.salesman='"+nameArrs+"',a.gross_sales='"+confirmAmount+"',a.cost_sales='"+chenben+"',a.profit='"+lr+"',a.site_price='"+Double.valueOf(order.getBigDecimal("sitePrice").toString()) * pNum+"' WHERE a.site_id='"+order.getStr("site_id")+"' AND a.site_order_id='"+order.getStr("id")+"' AND a.status='0'");
		sqlQueryPay.executeUpdate();
		return true;
	}
	
	// 自营商品订单确认收款
	@Transactional
	public Boolean confirmAmountHz(String rowId, String confirmAmount, String status, String gId, Double pNum, String uid, String uname, String salesCommissions,String oneTch,String idsArr,String nameArrs,String marks,String commissionsRemarks) {//服务商权限 订单信息  点击收款按钮确定付款，可以更改实交金额
		SimpleDateFormat sf = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
		Date now = new Date();
		String dat = sf.format(now);
		BigDecimal allTc = new BigDecimal(0);
		String[] oneArr = oneTch.split(",");
		for(String my : oneArr){
			allTc = allTc.add(new BigDecimal(my));
		}
		confirmAmount = confirmAmount.trim();
		if(StringUtils.isBlank(salesCommissions)){
			salesCommissions="0";
		}
		Record order = Db.findFirst("select a.*,b.site_price as sitePrice from crm_goods_siteself_order a left join crm_goods_siteself b on a.good_id=b.id where a.id=? ",rowId);
		if (status.equals("1")) {//公司库存，1:待收款待出库
			SQLQuery sqlQuery3 = goodsSiteselfDetailDao.getSession().createSQLQuery("UPDATE crm_goods_siteself_order a SET a.status='2',a.confirm_time='"+dat+"',a.pay_mark='"+marks+"', a.confirm_amount='"+confirmAmount+"',a.confirm_by='"+uid+"',a.confirmor='"+uname+"',a.sales_commissions='"+allTc+"',a.placing_order_by='"+idsArr+"',a.placing_name='"+nameArrs+"',a.commissions_remarks='"+commissionsRemarks+"'  WHERE a.id='"+rowId+"'");
			sqlQuery3.executeUpdate();
		} else if (status.equals("4")) {//工程师库存，4:待收款已出库
		 	SQLQuery sqlQuery3 = goodsSiteselfDetailDao.getSession().createSQLQuery("UPDATE crm_goods_siteself_order a SET a.status='3',a.confirm_time='"+dat+"',a.pay_mark='"+marks+"', a.confirm_amount='"+confirmAmount+"',a.confirm_by='"+uid+"',a.confirmor='"+uname+"',a.sales_commissions='"+allTc+"',a.placing_order_by='"+idsArr+"',a.placing_name='"+nameArrs+"',a.commissions_remarks='"+commissionsRemarks+"'  WHERE a.id='"+rowId+"'");
			sqlQuery3.executeUpdate();
			SQLQuery sqlQuery4 = goodsSiteselfDetailDao.getSession().createSQLQuery("UPDATE crm_goods_siteself a set a.sales=(a.sales+'" + pNum + "') WHERE a.status='0' AND a.id='" + gId + "'");
			sqlQuery4.executeUpdate();
		 }
		 
		 Long detailCount = Db.queryLong("select count(*) from crm_goods_siteself_detail a where a.order_id='"+rowId+"' and a.good_id='"+gId+"' and a.status='0'");
		 if(detailCount > 0){
			 SQLQuery sqlQuery2 = goodsSiteselfDetailDao.getSession().createSQLQuery("update crm_goods_siteself_detail a set a.pay_money='"+confirmAmount+"' where a.order_id='"+rowId+"' and a.good_id='"+gId+"' and a.status='0'");
			 sqlQuery2.executeUpdate();
		 }
		 Long detailEmp = Db.queryLong("select count(*) from crm_goods_employe_owndetail a where a.order_id='"+rowId+"' and a.good_id='"+gId+"' and a.site_id='"+order.getStr("site_id")+"' and a.type='1' and a.status='0'");
		 if(detailEmp > 0){
			 SQLQuery sqlQuery1 = goodsSiteselfDetailDao.getSession().createSQLQuery("update crm_goods_employe_owndetail a set a.pay_money='"+confirmAmount+"' where a.order_id='"+rowId+"' and a.good_id='"+gId+"' and a.site_id='"+order.getStr("site_id")+"' and a.type='1' and a.status='0'");
			 sqlQuery1.executeUpdate();
		 }
		 List<String> list = Lists.newArrayList();
		 List<GoodsSiteSelfOrderDeductDetail> listAdd = Lists.newArrayList();;
		 Date nowd = new Date();
		 for(int i=0;i<idsArr.split(",").length;i++){
			 String sql = "";
			 Record rdc = Db.findFirst("select a.* from crm_goods_siteself_order_deduct_detail a where a.salesman_id ='"+idsArr.split(",")[i]+"' and a.site_order_id='"+rowId+"' and a.status='0'");
			 if(rdc!=null){
				 sql = "UPDATE crm_goods_siteself_order_deduct_detail a  SET a.sales_commissions ='"+oneTch.split(",")[i]+"'  WHERE a.salesman_id ='"+idsArr.split(",")[i]+"' and a.site_order_id='"+rowId+"' ";
				 //list.add(sql);
				 SQLQuery sqlQuery9 = goodsSiteselfDetailDao.getSession().createSQLQuery(sql);
				 sqlQuery9.executeUpdate();
			 }else{
				 Record rdUser = Db.findFirst("select a.* from sys_user a where a.id=?",idsArr.split(",")[i]);
				 GoodsSiteSelfOrderDeductDetail sodd = new GoodsSiteSelfOrderDeductDetail();
				 sodd.setCreateTime(nowd);
				 sodd.setCreator(order.getStr("creator"));
				 sodd.setGoodName(order.getStr("good_name"));
				 sodd.setGoodNumber(order.getStr("good_number"));
				 sodd.setSalemanType(rdUser.getStr("user_type"));
				 sodd.setSalesCommissions(new BigDecimal(oneTch.split(",")[i]));
				 sodd.setSalesman(nameArrs.split(",")[i]);
				 sodd.setSalesmanId(idsArr.split(",")[i]);
				 sodd.setSiteId(order.getStr("site_id"));
				 sodd.setSiteOrderId(rowId);
				 sodd.setStatus("0");
				 listAdd.add(sodd);
			 }
		 }
		 String delIds="";
		 for(String str : order.getStr("placing_order_by").split(",")){
			 String mark1="0";
			 for(int j=0;j<idsArr.split(",").length;j++){
				 if(str.equals(idsArr.split(",")[j])){
					 mark1="1";
				 }
			 }
			 if(!"1".equals(mark1)){
				 if("".equals(delIds)){
					 delIds="'"+str+"'";
				 }else{
					 delIds=delIds+",'"+str+"'";
				 }
			 }
		 }
		 if(StringUtils.isNotBlank(delIds)){
			 SQLQuery sqlQuery0 = goodsSiteselfDetailDao.getSession().createSQLQuery("update crm_goods_siteself_order_deduct_detail a set a.status='1' where a.salesman_id in("+delIds+") and a.site_order_id='"+rowId+"'");
			 sqlQuery0.executeUpdate();
		 }
		 if(listAdd.size()>0){
			 goodsSiteSelfOrderDeductDetailDao.save(listAdd);
		 }
		 /*if(list.size()>0){//jfinal事务不回滚
			Db.batch(list, list.size());
		}*/
		//更新利润表
		String nameNow = CrmUtils.getUserXM();//销售人nameArrs;总额：confirmAmount；工程师提成：allTc；成本：
		Double chenben = Double.valueOf(allTc.toString()) + Double.valueOf(order.getBigDecimal("sitePrice").toString()) * pNum;
		Double lr = Double.valueOf(confirmAmount)-chenben;
		if(lr <= 0) {
			lr = Double.valueOf(0);
		}
		SQLQuery sqlQueryPay = goodsSiteselfDetailDao.getSession().createSQLQuery("UPDATE crm_goods_siteself_profit_detail a SET a.confirmor='"+nameNow+"', a.confirm_time=NOW(),a.salesman='"+nameArrs+"',a.gross_sales='"+confirmAmount+"',a.cost_sales='"+chenben+"',a.profit='"+lr+"',a.site_price='"+Double.valueOf(order.getBigDecimal("sitePrice").toString()) * pNum+"' WHERE a.site_id='"+order.getStr("site_id")+"' AND a.site_order_id='"+order.getStr("id")+"' AND a.status='0'");
		sqlQueryPay.executeUpdate();
		return true;
	}
	
	// 平台商品订单确认收款
	@Transactional
	public Boolean confirmAmount1(String rowId,String confirmAmount,String status,String pNum,String gId,String uid,String uname,String salesCommissions,String oneTch,String idsArr,String nameArrs) {//服务商权限 订单信息  点击收款按钮确定付款，可以更改实交金额
		SimpleDateFormat sf = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
		Date now = new Date();
		String dat = sf.format(now);
		BigDecimal allTc = new BigDecimal(0);
		String[] oneArr = oneTch.split(",");
		for(String my : oneArr){
			allTc = allTc.add(new BigDecimal(my));
		}
		confirmAmount = confirmAmount.trim();
		if(StringUtils.isBlank(salesCommissions)){
			salesCommissions="0";
		}
		Record order = Db.findFirst("select * from crm_goods_siteself_order where id=? ",rowId);
		/*if (status.equals("1")) {//公司库存，1:待收款待出库
			SQLQuery sqlQuery3 = goodsSiteselfDetailDao.getSession().createSQLQuery("UPDATE crm_goods_siteself_order a SET a.status='2',a.confirm_time='"+dat+"', a.confirm_amount='"+confirmAmount+"',a.confirm_by='"+uid+"',a.confirmor='"+uname+"',a.sales_commissions='"+allTc+"',a.placing_order_by='"+idsArr+"',a.placing_name='"+nameArrs+"' WHERE a.id='"+rowId+"'");
			sqlQuery3.executeUpdate();
		} else if (status.equals("4")) {//工程师库存，4:待收款已出库
*/		SQLQuery sqlQuery3 = goodsSiteselfDetailDao.getSession().createSQLQuery("UPDATE crm_goods_siteself_order a SET a.status='3',a.confirm_time='"+dat+"', a.confirm_amount='"+confirmAmount+"',a.confirm_by='"+uid+"',a.confirmor='"+uname+"',a.sales_commissions='"+allTc+"',a.placing_order_by='"+idsArr+"',a.placing_name='"+nameArrs+"' WHERE a.id='"+rowId+"'");
		sqlQuery3.executeUpdate();
		SQLQuery sqlQuery4 = goodsSiteselfDetailDao.getSession().createSQLQuery("UPDATE crm_goods_siteself a set a.sales=(a.sales+'" + pNum + "') WHERE a.status='0' AND a.id='" + gId + "'");
		sqlQuery4.executeUpdate();
		//}
		
		Long detailCount = Db.queryLong("select count(*) from crm_goods_siteself_detail a where a.order_id='"+rowId+"' and a.good_id='"+gId+"' and a.status='0'");
		if(detailCount > 0){
			SQLQuery sqlQuery2 = goodsSiteselfDetailDao.getSession().createSQLQuery("update crm_goods_siteself_detail a set a.pay_money='"+confirmAmount+"' where a.order_id='"+rowId+"' and a.good_id='"+gId+"' and a.status='0'");
			sqlQuery2.executeUpdate();
		}
		Long detailEmp = Db.queryLong("select count(*) from crm_goods_employe_owndetail a where a.order_id='"+rowId+"' and a.good_id='"+gId+"' and a.site_id='"+order.getStr("site_id")+"' and a.type='1' and a.status='0'");
		if(detailEmp > 0){
			SQLQuery sqlQuery1 = goodsSiteselfDetailDao.getSession().createSQLQuery("update crm_goods_employe_owndetail a set a.pay_money='"+confirmAmount+"' where a.order_id='"+rowId+"' and a.good_id='"+gId+"' and a.site_id='"+order.getStr("site_id")+"' and a.type='1' and a.status='0'");
			sqlQuery1.executeUpdate();
		}
		List<String> list = Lists.newArrayList();
		List<GoodsSiteSelfOrderDeductDetail> listAdd = Lists.newArrayList();;
		Date nowd = new Date();
		for(int i=0;i<idsArr.split(",").length;i++){
			String sql = "";
			Record rdc = Db.findFirst("select a.* from crm_goods_siteself_order_deduct_detail a where a.salesman_id ='"+idsArr.split(",")[i]+"' and a.site_order_id='"+rowId+"' and a.status='0'");
			if(rdc!=null){
				sql = "UPDATE crm_goods_siteself_order_deduct_detail a  SET a.sales_commissions ='"+oneTch.split(",")[i]+"'  WHERE a.salesman_id ='"+idsArr.split(",")[i]+"' and a.site_order_id='"+rowId+"' ";
				//list.add(sql);
				SQLQuery sqlQuery9 = goodsSiteselfDetailDao.getSession().createSQLQuery(sql);
				sqlQuery9.executeUpdate();
			}else{
				Record rdUser = Db.findFirst("select a.* from sys_user a where a.id=?",idsArr.split(",")[i]);
				GoodsSiteSelfOrderDeductDetail sodd = new GoodsSiteSelfOrderDeductDetail();
				sodd.setCreateTime(nowd);
				sodd.setCreator(order.getStr("creator"));
				sodd.setGoodName(order.getStr("good_name"));
				sodd.setGoodNumber(order.getStr("good_number"));
				sodd.setSalemanType(rdUser.getStr("user_type"));
				sodd.setSalesCommissions(new BigDecimal(oneTch.split(",")[i]));
				sodd.setSalesman(nameArrs.split(",")[i]);
				sodd.setSalesmanId(idsArr.split(",")[i]);
				sodd.setSiteId(order.getStr("site_id"));
				sodd.setSiteOrderId(rowId);
				sodd.setStatus("0");
				listAdd.add(sodd);
			}
		}
		String delIds="";
		for(String str : order.getStr("placing_order_by").split(",")){
			String mark1="0";
			for(int j=0;j<idsArr.split(",").length;j++){
				if(str.equals(idsArr.split(",")[j])){
					mark1="1";
				}
			}
			if(!"1".equals(mark1)){
				if("".equals(delIds)){
					delIds="'"+str+"'";
				}else{
					delIds=delIds+",'"+str+"'";
				}
			}
		}
		if(StringUtils.isNotBlank(delIds)){
			SQLQuery sqlQuery0 = goodsSiteselfDetailDao.getSession().createSQLQuery("update crm_goods_siteself_order_deduct_detail a set a.status='1' where a.salesman_id in("+delIds+") and a.site_order_id='"+rowId+"'");
			sqlQuery0.executeUpdate();
		}
		if(listAdd.size()>0){
			goodsSiteSelfOrderDeductDetailDao.save(listAdd);
		}
		/*if(list.size()>0){//jfinal事务不回滚
			Db.batch(list, list.size());
		}*/
		return true;
	}
	
	public Record detailMsg(String rowId) {//服务商权限 订单信息 订单(出库)详情
		return Db.findFirst("SELECT a.*,(a.purchase_num * p.site_price) as jiage,b.stocks,b.source,b.unit,b.customer_price,b.rebate_price,b.stocks FROM crm_goods_siteself_order a LEFT JOIN crm_goods_siteself b ON a.good_id=b.id left join crm_goods_platform p on a.good_number=p.number  WHERE  a.id='"+rowId+"'");
		
	}
	
	public Record detailMsgEdit(String rowId) {//服务商权限 订单信息 订单(出库)详情
		Record rd = Db.findFirst("SELECT b.site_price,b.employe_price,c.payment_type as zfType,c.id as zfId,c.imgs as zfImg,c.payment_amount as zfMoney,a.*,(a.purchase_num * p.site_price) as jiage,b.stocks,b.source,b.unit,b.customer_price,b.rebate_price,b.stocks FROM crm_goods_siteself_order a LEFT JOIN crm_goods_siteself b ON a.good_id=b.id left join crm_goods_platform p on a.good_number=p.number left join crm_order_collections c on a.id=c.order_id and c.status='0' and c.source='1'  WHERE  a.id='"+rowId+"'");
		String emIds  =rd.getStr("placing_order_by");
		String moneys = "";
		if(StringUtils.isNotBlank(emIds)){
			for(String st : emIds.split(",")){
				Record rds = Db.findFirst("select * from  crm_goods_siteself_order_deduct_detail a where a.site_order_id='"+rowId+"' and a.salesman_id='"+st+"'");
				if(rds!=null) {
					if(StringUtils.isBlank(moneys)){
						moneys=rds.getBigDecimal("sales_commissions").toString();
					}else{
						moneys=moneys+","+rds.getBigDecimal("sales_commissions").toString();
					}
				}
			}
		}
		rd.set("moneys", moneys);
		return rd;
	}
	
	@Transactional
	public String  outStock(String rowId,String goodId,Double purchaseNum) {//服务商权限 订单信息  出库操作
		User user = UserUtils.getUser();
		Record rd =  Db.findFirst("select a.*,b.source,b.stocks,b.number as goodNumber,e.id as emId from crm_goods_siteself_order a left join crm_goods_siteself b on a.good_id=b.id left join crm_employe e on e.user_id=a.create_by  where a.id=? and e.status='0'",rowId);
		String status = rd.getStr("status");
		if(!"2".equals(status) && !"1".equals(status)){
			return "yck";
		}
		if("2".equals(rd.getStr("source"))){//如果是平台商品，则校验有库存够不够
			BigDecimal stks = rd.getBigDecimal("stocks");
			if(stks==null){
				return "noStocks";
			}else{
				Double goodsStocks = Double.valueOf(rd.getBigDecimal("stocks").toString());
				int i = purchaseNum.compareTo(goodsStocks);
				if(i == 1){
					return "noStocks";
				}
			}
		}
		String stats = "3";//默认出库后的状态是已完成
		if("1".equals(status)){//如果当前状态是待收款待出库，则出库之后是状态4：待收款已出库状态
			stats = "4";
		}
		String string = "UPDATE crm_goods_siteself a SET a.stocks=(a.stocks-'"+purchaseNum+"'),a.sales=(a.sales+'"+purchaseNum+"') WHERE a.status='0' AND a.id='"+goodId+"'";//公司库存减少
		SQLQuery sqlQuery8 = goodsSiteselfDetailDao.getSession().createSQLQuery(string);
		sqlQuery8.executeUpdate();
		//出库后订单状态改3:已完成
		SQLQuery sqlQuery7 = goodsSiteselfDetailDao.getSession().createSQLQuery("UPDATE crm_goods_siteself_order a SET a.status='"+stats+"',a.outstock_time=NOW(),a.outstock_type='1' WHERE a.id='"+rowId+"'");
		sqlQuery7.executeUpdate();
		String rt = detailEntity(goodId,rowId,rd.getBigDecimal("confirm_amount"));//出入库明细里新增一条入库数据
		
		List<GoodsEmployeOwnDetail> listAdd = new ArrayList<>();
		String type="1";
		Date dt = new Date();
		GoodsEmployeOwnDetail geod = new GoodsEmployeOwnDetail();
		geod.setAmount(purchaseNum);
		geod.setCreateBy(user.getId());
		geod.setCreateTime(dt);
		geod.setEmployeId(rd.getStr("emId"));
		geod.setGoodId(goodId);
		geod.setGoodNumber(rd.getStr("good_number"));
		geod.setOrderId(rowId);
		geod.setPayMoney(rd.getBigDecimal("confirm_amount"));
		geod.setSiteId(rd.getStr("site_id"));
		geod.setType("1");//领用
		geod.setMark("1");
		listAdd.add(geod);
		
		GoodsEmployeOwnDetail geod1 = new GoodsEmployeOwnDetail();
		geod1.setAmount(purchaseNum);
		geod1.setCreateBy(user.getId());
		geod1.setCreateTime(dt);
		geod1.setEmployeId(rd.getStr("emId"));
		geod1.setGoodId(goodId);
		geod1.setGoodNumber(rd.getStr("good_number"));
		geod1.setOrderId(rowId);
		//geod1.setPayMoney(rd.getBigDecimal("confirm_amount"));
		geod1.setSiteId(rd.getStr("site_id"));
		geod1.setType("2");//零售
		geod1.setMark("1");
		listAdd.add(geod1);
		goodsEmployeOwnDetailDao.save(listAdd);//添加服务工程师出入库明细
		//查看这个工程师有没有维护这个商品
		Long countE = Db.queryLong("select count(*) from crm_goods_employe_own a  where a.site_id='"+rd.getStr("site_id")+"' and a.good_id='"+goodId+"' and a.employe_id='"+rd.getStr("emId")+"'");
		if(countE < 1){//小于1说明这个工程师并没有维护这个商品，则给他维护上
			GoodsEmployeOwn geo = new GoodsEmployeOwn();
			geo.setEmployeId(rd.getStr("emId"));
			geo.setGoodId(goodId);
			geo.setGoodNumber(rd.getStr("goodNumber"));
			geo.setReceives(purchaseNum);
			geo.setSales(purchaseNum);
			geo.setSiteId(rd.getStr("site_id"));
			geo.setStocks(0);
			goodsEmployeOwnDao.save(geo);
		}else{//否则已经维护改商品，对应的销售数量和领取数量改变
			String sqlOwn = "update crm_goods_employe_own a set a.sales=(a.sales+'"+purchaseNum+"'),a.receives=(a.receives+'"+purchaseNum+"') where a.site_id='"+rd.getStr("site_id")+"' and a.good_id='"+goodId+"' and a.employe_id='"+rd.getStr("emId")+"'";
			SQLQuery sqlQueryOwn = goodsSiteselfDetailDao.getSession().createSQLQuery(sqlOwn);
			sqlQueryOwn.executeUpdate();
		}
		if("no".equals(rt)){
			return "yxj";//商品信息有误
		}
		return "ok";
	}
	
	public Record querySiteselfById(String goodId,String rowId) {//根据商品Id查出商品基本信息
		String sql = "SELECT a.*,b.purchase_num,b.id as odId,b.placing_name,b.creator as oCreator FROM crm_goods_siteself a LEFT JOIN crm_goods_siteself_order b ON a.id=b.good_id WHERE  b.id='"+rowId+"'";
		return Db.findFirst(sql);
	}
	
	public String detailEntity(String goodId,String rowId,BigDecimal confirmAmount) {//公司出入库明细表中新增一条出库数据
		User user = UserUtils.getUser();
		String siteId = CrmUtils.getCurrentSiteId(user);
		GoodsSiteselfDetail gsd = new GoodsSiteselfDetail();
		Record rd = querySiteselfById(goodId,rowId);
		if(rd!=null){
			String name = "";
			if (User.USER_TYPE_SIT.equals(user.getUserType())) {
				name = siteService.getUserSite(user.getId()).getName();
			} else {
				name = nonService.getNonServiceman(user).getName();
			}
			gsd.setGoodId(rd.getStr("id"));
			gsd.setGoodNumber(rd.getStr("number"));
			gsd.setGoodName(rd.getStr("name"));
			gsd.setGoodBrand(rd.getStr("brand"));
			gsd.setGoodModel(rd.getStr("model"));
			gsd.setGoodCategory(rd.getStr("category"));;
			gsd.setUnit(rd.getStr("unit"));
			gsd.setType("2");//1入库：2出库
			gsd.setSitePrice(rd.getBigDecimal("site_price"));
			gsd.setEmployePrice(rd.getBigDecimal("employe_price"));
			gsd.setCustomerPrice(rd.getBigDecimal("customer_price"));
			gsd.setAmount(rd.getBigDecimal("purchase_num"));
			gsd.setApplicant(rd.getStr("oCreator"));
			gsd.setSiteId(siteId);
			gsd.setCreateTime(new Date());
			gsd.setOrderId(rowId);
			gsd.setApplyTime(new Date());
			gsd.setConfirmor(name);
			gsd.setConfirmTime(new Date());
			gsd.setPayMoney(confirmAmount);
			goodsSiteselfDetailDao.save(gsd);
			String string = "UPDATE crm_goods_siteself_profit_detail a SET a.siteself_detail_id='"+gsd.getId()+"' WHERE a.status='0' and a.site_order_id='"+rowId+"' AND a.site_id='"+siteId+"'";//浩泽净水公司库存出库是更新服务商利润表中的明细id
			SQLQuery sqlQuery = goodsSiteselfDetailDao.getSession().createSQLQuery(string);
			sqlQuery.executeUpdate();
			logger.info("site goodsOrder outStocks detail(服务商自营商品出库生成明细)--"+rd.getBigDecimal("purchase_num"));
			return "ok";
		}
		return "no";
	}
	
	//添加公司库存出库时的工程师出入库明细记录
	//todo 需要确认
	public String addEmployeDetail(){
		List<Record> list = Db.find("SELECT a.*,u.emId,s.user_id as uId FROM crm_goods_siteself_order a LEFT JOIN (SELECT m.id,m.user_type,n.id AS emId FROM sys_user m LEFT JOIN crm_employe n ON m.id=n.user_id) u  ON u.id=a.create_by left join crm_site s on s.id=a.site_id WHERE a.status IN('3','4') AND a.outstock_type='1' AND u.user_type='4'");
		List<GoodsEmployeOwnDetail> listAdd = new ArrayList<>();
		for(Record rd : list){
			String type="1";
			Long count1 = Db.queryLong("select count(*) from crm_goods_employe_owndetail where order_id=? and `type`='1' and `status`='0'",rd.getStr("id"));
			Long count2 = Db.queryLong("select count(*) from crm_goods_employe_owndetail where order_id=? and `type`='2' and `status`='0'",rd.getStr("id"));
			if(count1<1){
				if("1".equals(type)){
					listAdd.add(bornEntity(rd,"1"));
				}
			}
			type="2";
			if(count2<1){
				if("2".equals(type)){
					listAdd.add(bornEntity(rd,"2"));
				}
			}
		}
		if(listAdd.size()>0){
			goodsEmployeOwnDetailDao.save(listAdd);
		}
		return "success";
	}
	
	public GoodsEmployeOwnDetail bornEntity(Record rd,String type){
		GoodsEmployeOwnDetail geod = new GoodsEmployeOwnDetail();
		geod.setAmount(rd.getBigDecimal("purchase_num").doubleValue());
		geod.setCreateTime(rd.getDate("placing_order_time"));
		geod.setSiteId(rd.getStr("site_id"));
		geod.setOrderId(rd.getStr("id"));
		geod.setEmployeId(rd.getStr("emId"));
		if("1".equals(type)){
			geod.setPayMoney(rd.getBigDecimal("confirm_amount"));
		}
		geod.setGoodId(rd.getStr("good_id"));
		geod.setGoodNumber(rd.getStr("good_number"));
		geod.setType(type);
		geod.setCreateBy(rd.getStr("uId"));
		return geod;
	}
	
	//取消商品订单
	@Transactional(rollbackFor=Exception.class)
	public Result<T> cancelGoodsOrder(String ids,String reason){
		List<Record> list = Db.find("select a.*,sd.type as sdType,b.customer_price,b.employe_price,b.site_price,b.unit,e.id as emId from crm_goods_siteself_order a left join crm_goods_siteself b on a.good_id=b.id left join crm_employe e on e.user_id=a.create_by left join crm_goods_siteself_detail sd on sd.order_id=a.id where a.id in("+ids+")");
		User user = UserUtils.getUser();
		Result<T> rt = new Result<>();
		String nowName = CrmUtils.getUserXM();
		List<GoodsSiteselfDetail> listDt = new ArrayList<>();//服务商出入库明细
		List<GoodsEmployeOwnDetail> listDet = new ArrayList<>();//工程师出入库明细
		String sqlUp = "update crm_goods_siteself_order a set a.status='0',a.cancel_reason='"+reason+"' where a.id in("+ids+")";//更新商品订单状态为0，删除状态
		String confirmSql = "update crm_goods_siteself_order_deduct_detail a set a.status='1' where a.site_order_id in ("+ids+") and a.site_id='"+CrmUtils.getCurrentSiteId(user)+"' and a.status='0'";
		Date dt = new Date();
		for(Record rd : list){
			String status =rd.getStr("status");
			String osType =rd.getStr("outstock_type");
			String sql = "";
			String wxSql = "";
			String wxSql1 = "";
			GoodsSiteselfDetail gsd = new GoodsSiteselfDetail();
			GoodsEmployeOwnDetail geod = new GoodsEmployeOwnDetail();
			if(("3".equals(status) || "4".equals(status)) || "5".equals(status) &&  !"2".equals(osType) ){//如果状态为已出库（osType：1公司库存出库 0工程师库存出库3工程师自购库存）
				if("0".equals(osType)){//0：工程师库存出库,工程师库存加
					//工程师库存加回去
					sql = "update crm_goods_employe_own a set a.stocks=(a.stocks+'"+rd.getBigDecimal("purchase_num")+"'),a.sales=(a.sales-'"+rd.getBigDecimal("purchase_num")+"') where a.employe_id='"+rd.getStr("emId")+"' and a.good_id='"+rd.getStr("good_id")+"' and a.site_id='"+rd.getStr("site_id")+"'";
					//工程师出入库明细置为无效
					wxSql = "update crm_goods_employe_owndetail a set a.status='1' where a.employe_id='"+rd.getStr("emId")+"' and a.site_id='"+rd.getStr("site_id")+"' and a.order_id='"+rd.getStr("id")+"'";
					/*geod.setAmount(Double.valueOf(rd.getBigDecimal("purchase_num").toString()));
					geod.setCreateBy(user.getId());
					geod.setCreateTime(dt);
					geod.setEmployeId(rd.getStr("emId"));
					geod.setGoodId(rd.getStr("good_id"));
					geod.setGoodNumber(rd.getStr("good_number"));
					geod.setOrderId(rd.getStr("id"));
					geod.setPayMoney(rd.getBigDecimal("confirm_amount"));
					geod.setSiteId(rd.getStr("site_id"));
					geod.setType("4");//工程师库存出库去下订单时工程师库存入库
					listDet.add(geod);*/
				}
				if("1".equals(osType)){//1：公司库存出库，（包括两种类型：1pc端零售 2工程师提交订单公司库存出库）
					//公司库存加回去
					sql = "update crm_goods_siteself a set a.stocks=(a.stocks+'"+rd.getBigDecimal("purchase_num")+"'),a.sales=(a.sales-'"+rd.getBigDecimal("purchase_num")+"') where a.id='"+rd.getStr("good_id")+"' and a.site_id='"+rd.getStr("site_id")+"' and a.status='0' ";
					//公司出入明细置为无效
					wxSql = "update crm_goods_siteself_detail a set a.status='1' where a.order_id='"+rd.getStr("id")+"' and a.site_id='"+rd.getStr("site_id")+"' ";
					/*if(!"3".equals(rd.getStr("sdType"))){//公司出入库明细type为3时表示pc零售
						//工程师出入库明细置为无效
						wxSql1 = "update crm_goods_employe_owndetail a set a.status='1' where a.employe_id='"+rd.getStr("emId")+"' and a.site_id='"+rd.getStr("site_id")+"' and a.order_id='"+rd.getStr("id")+"'";
					}*/
					/*gsd.setAmount(rd.getBigDecimal("purchase_num"));
					gsd.setApplicant(nowName);
					gsd.setApplyTime(dt);
					gsd.setConfirmor(nowName);
					gsd.setConfirmTime(dt);
					gsd.setCreateTime(dt);
					gsd.setCustomerPrice(rd.getBigDecimal("customer_price"));
					gsd.setEmployePrice(rd.getBigDecimal("employe_price"));
					gsd.setSitePrice(rd.getBigDecimal("site_price"));
					gsd.setGoodBrand(rd.getStr("good_brand"));
					gsd.setGoodCategory(rd.getStr("good_category"));
					gsd.setGoodId(rd.getStr("good_id"));
					gsd.setGoodModel(rd.getStr("good_model"));
					gsd.setGoodName(rd.getStr("good_name"));
					gsd.setGoodNumber(rd.getStr("good_number"));
					gsd.setOrderId(rd.getStr("id"));
					gsd.setPayMoney(rd.getBigDecimal("confirm_amount"));
					gsd.setSiteId(rd.getStr("site_id"));
					gsd.setType("7");//取消订单入库
					gsd.setUnit(rd.getStr("unit"));
					listDt.add(gsd);*/
				}
				if("3".equals(osType)) {
					//工程师库存加回去
					sql = "update crm_goods_employe_own a set a.zg_stocks=(a.zg_stocks+'"+rd.getBigDecimal("purchase_num")+"'),a.zg_sales=(a.zg_sales-'"+rd.getBigDecimal("purchase_num")+"') where a.employe_id='"+rd.getStr("emId")+"' and a.good_id='"+rd.getStr("good_id")+"' and a.site_id='"+rd.getStr("site_id")+"'";
					//工程师出入库明细置为无效
					wxSql = "update crm_goods_employe_owndetail a set a.status='1' where a.employe_id='"+rd.getStr("emId")+"' and a.site_id='"+rd.getStr("site_id")+"' and a.order_id='"+rd.getStr("id")+"'";
				}
			}
			if(!"".equals(sql)){
				SQLQuery sqlQuery1 = goodsSiteselfDetailDao.getSession().createSQLQuery(sql);//对应的库存添加
				sqlQuery1.executeUpdate();
			}
			if(!"".equals(wxSql)){
				SQLQuery sqlQuery2 = goodsSiteselfDetailDao.getSession().createSQLQuery(wxSql);//删除订单对应的出库记录
				sqlQuery2.executeUpdate();
			}
			if(!"".equals(wxSql1)){
				SQLQuery sqlQuery3 = goodsSiteselfDetailDao.getSession().createSQLQuery(wxSql1);//删除订单对应的出库记录
				sqlQuery3.executeUpdate();
			}
			if(!"".equals(confirmSql)){
				SQLQuery sqlQuery4 = goodsSiteselfDetailDao.getSession().createSQLQuery(confirmSql);//删除订单对应的出库记录
				sqlQuery4.executeUpdate();
			}
		}
		SQLQuery sqlQuery = goodsSiteselfDetailDao.getSession().createSQLQuery(sqlUp);//更新订单状态为0删除状态
		sqlQuery.executeUpdate();
		
		SQLQuery sqlQueryProfit = goodsSiteselfDetailDao.getSession().createSQLQuery("update crm_goods_siteself_profit_detail a set a.status='1' where a.site_order_id in ("+ids+")");//服务商利润表置为删除状态
		sqlQueryProfit.executeUpdate();
		/*if(listDt.size()>0){
			goodsSiteselfDetailDao.save(listDt);//服务商出入库如明细
		}
		if(listDet.size()>0){
			goodsEmployeOwnDetailDao.save(listDet);//工程师出入库如明细
		}*/
		rt.setCode("200");
		rt.setMsg("cancel success!");
		return rt;
	}
	
	/*工单关联商品销售*/
	public List<Record> orderVsGoods(String siteId,String orderNumber){
		return Db.find("select a.*,b.site_price,b.source as goodSource,b.stocks from crm_goods_siteself_order a left join crm_order o on o.id=a.order_id left join crm_goods_siteself b on a.good_id=b.id  where a.site_id=? and o.site_id=? and o.number=?",siteId,siteId,orderNumber);
	}
	
	public List<Record> queryTichByOrderId(String siteId,String id){
		return Db.find("select a.* from  crm_goods_siteself_order_deduct_detail a where a.status='0' and a.site_order_id=? and a.site_id=?",id,siteId);
	}
	
	@Transactional(rollbackFor=Exception.class)
	public String deleteGoodsOrders(String ids) {
		SQLQuery sqlQueryProfit = goodsSiteselfDetailDao.getSession().createSQLQuery("delete from crm_goods_siteself_order where id in ("+StringUtil.joinInSql(ids.split(","))+") and status='0'");//彻底删除这条订单：王总说的
		sqlQueryProfit.executeUpdate();
		return "200";
	}
	
	@Transactional(rollbackFor=Exception.class)
	public String confirmOrder(String id) {
		SQLQuery sqlQueryProfit = goodsSiteselfDetailDao.getSession().createSQLQuery("update crm_goods_siteself_order a set a.status='5',a.confirm_time=NOW(),a.confirmor='"+CrmUtils.getUserXM()+"' where a.id='"+id+"' ");
		sqlQueryProfit.executeUpdate();
		return "200";
	}
	
	//批量打印
	public List<Record> getPrintDataByIds(String ids) {
		return Db.find("select a.*,b.unit,b.customer_price from crm_goods_siteself_order a left join crm_goods_siteself b on a.good_id=b.id where a.id in("+StringUtil.joinInSql(ids.split(","))+") order by a.placing_order_time desc ");
	}
}
