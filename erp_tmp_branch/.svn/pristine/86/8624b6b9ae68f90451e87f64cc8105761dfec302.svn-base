package com.jojowonet.modules.order.service;

import com.jfinal.plugin.activerecord.Db;
import com.jfinal.plugin.activerecord.Record;
import com.jojowonet.modules.operate.dao.EmployeDao;
import com.jojowonet.modules.operate.dao.NonServicemanDao;
import com.jojowonet.modules.operate.service.NonServicemanService;
import com.jojowonet.modules.order.dao.AnnouncementSiteReadDao;
import com.jojowonet.modules.order.dao.OrderDao;
import com.jojowonet.modules.order.dao.OrderDispatchDao;
import com.jojowonet.modules.order.dao.OrderFeedbackDao;
import com.jojowonet.modules.order.utils.StringUtil;
import com.jojowonet.modules.sys.util.InvalidOrderPusher;
import ivan.common.entity.mysql.common.User;
import ivan.common.service.BaseService;
import ivan.common.utils.UserUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;
import org.springframework.transaction.annotation.Transactional;

import java.util.List;
import java.util.Map;

@Component
@Transactional(readOnly = false)
public class OrderDispatch2017Service extends BaseService {

    @Autowired
    private OrderDispatchDao orderDispatchDao;

    @Autowired
    private OrderDao orderDao;
    @Autowired
    private NonServicemanDao nonDao;
    @Autowired
    private EmployeDao empDao;
    @Autowired
    private OrderFeedbackDao ofkDao;
    @Autowired
    private PushMessageService pushMessageService;
    @Autowired
    private AnnouncementSiteReadDao announcementSiteReadDao;
    @Autowired
    private InvalidOrderPusher invalidOrderPusher;

	/*@Autowired
	private SiteService siteService;*/

    @Autowired
    private NonServicemanService nonService;

    /*
     * 点击下一单
     */
    public Record getNextOrderId(Map<String,Object> map, String time, String siteId, String orderId, String parentNumber){
        String status=null;
        if(map.get("statusFlagMap")!=null){
            status = map.get("statusFlagMap").toString();
        }
        ////查出时间相同工单的工单编号大于当前工单编号的条数
        Long num = whereData(map,time,siteId,orderId,parentNumber);
        //查出时间相同工单的工单编号小于当前工单编号的条数
        Long num1 = whereData1(map,time,siteId,orderId,parentNumber);
        StringBuffer sf = new StringBuffer();
        sf.append(" SELECT o.*, cb.service_attitude, cod.dispatch_time, cod.id as dispId,cod.`status` as disp_status,  ");
        sf.append("(SELECT f.name FROM `crm_order_mark_settings` AS f WHERE f.`id`=o.`flag`) AS flag,");
        sf.append("(SELECT f.feedback FROM `crm_order_feedback_2017` AS f WHERE f.`order_id`=o.`id` ORDER BY f.feedback_time DESC LIMIT 1) AS feedresult FROM crm_order_2017 o ");
        sf.append(" left join crm_order_callback_2017 cb on cb.order_id = o.id and cb.site_id = '" + siteId + "' ");
        sf.append(" left join crm_order_dispatch_2017 cod on cod.order_id = o.id and cod.site_id = '" + siteId + "' and cod.status in ('1','2','4','5') ");
        if(num < 1){
            sf.append(" WHERE o.site_id=? and o.id != '"+orderId+"' and o.create_time <= '"+time+"' ");
        }else{
            if(num1 < 1){
                sf.append(" WHERE o.site_id=? and o.id != '"+orderId+"' and o.create_time < '"+time+"' ");
            }else{
                sf.append(" WHERE o.site_id=? and o.id != '"+orderId+"' and o.create_time <= '"+time+"' ");
            }
        }

        if(status == null) {
            status = "";
        }
        String[] statusx = null;
        if (StringUtil.isNotBlank(status)) {
            statusx = status.split(",");
        }
        if (statusx != null && statusx.length > 0) {
            sf.append(" AND o.status IN (" + StringUtil.joinInSql(statusx) + ") ");
        }
        User user = UserUtils.getUser();
        List<String> cateList=null;
        List<String> brandList=null;
        if(!("2".equals(user.getUserType()))){
            String cate = nonService.servicemanCate(user.getId(),siteId);
            String brand = nonService.servicemanBrand(user.getId(),siteId);
            cateList = StringUtil.tolist(cate);
            brandList = StringUtil.tolist(brand);
        }
        sf.append(orderDao.getOrderWholeCondition(map,siteId,cateList,brandList));

        if(num < 1){
            sf.append("ORDER BY o.create_time DESC,o.number desc");
        }else{//存在时间相同工单的工单编号大于当前工单编号的工单

            if(num1 < 1){
                sf.append("ORDER BY o.create_time DESC,o.number desc");
            }else{
                sf.append(" and o.number < '"+parentNumber+"' ORDER BY o.create_time DESC,o.number desc");
            }
        }
        sf.append(" limit 1 offset 0 ");
        return Db.findFirst(sf.toString(), siteId);
    }
    /*
     * 点击上一单
     */
    public Record getPreviousOrderId(Map<String,Object> map,String time,String siteId,String orderId,String parentNumber){
        String status=null;
        if(map.get("statusFlagMap")!=null){
            status = map.get("statusFlagMap").toString();
        }
        //查出时间相同工单的工单编号大于当前工单编号的条数
        Long num = whereData(map,time,siteId,orderId,parentNumber);
        //查出时间相同工单的工单编号小于当前工单编号的条数
        Long num1 = whereData1(map,time,siteId,orderId,parentNumber);
        StringBuffer sf = new StringBuffer();
        sf.append(" SELECT o.*, cb.service_attitude, cod.dispatch_time, cod.id as dispId,cod.`status` as disp_status,  ");
        sf.append("(SELECT f.name FROM `crm_order_mark_settings` AS f WHERE f.`id`=o.`flag`) AS flag,");
        sf.append("(SELECT f.feedback FROM `crm_order_feedback_2017` AS f WHERE f.`order_id`=o.`id` ORDER BY f.feedback_time DESC LIMIT 1) AS feedresult FROM crm_order_2017 o ");
        sf.append(" left join crm_order_callback_2017 cb on cb.order_id = o.id and cb.site_id = '" + siteId + "' ");
        sf.append(" left join crm_order_dispatch_2017 cod on cod.order_id = o.id and cod.site_id = '" + siteId + "' and cod.status in ('1','2','4','5') ");
        if(num1 < 1){
            sf.append(" WHERE o.site_id=? and o.id != '"+orderId+"' and o.create_time >= '"+time+"' ");
        }else{
            if(num < 1){
                sf.append(" WHERE o.site_id=? and o.id != '"+orderId+"' and o.create_time > '"+time+"' ");
            }else{
                sf.append(" WHERE o.site_id=? and o.id != '"+orderId+"' and o.create_time >= '"+time+"' ");
            }
        }
        if(status == null) {
            status = "";
        }
        String[] statusx = null;
        if (StringUtil.isNotBlank(status)) {
            statusx = status.split(",");
        }
        if (statusx != null && statusx.length > 0) {
            sf.append(" AND o.status IN (" + StringUtil.joinInSql(statusx) + ") ");
        }
        User user = UserUtils.getUser();
        List<String> cateList=null;
        List<String> brandList=null;
        if(!("2".equals(user.getUserType()))){
            String cate = nonService.servicemanCate(user.getId(),siteId);
            String brand = nonService.servicemanBrand(user.getId(),siteId);
            cateList = StringUtil.tolist(cate);
            brandList = StringUtil.tolist(brand);
        }
        sf.append(orderDao.getOrderWholeCondition(map,siteId,cateList,brandList));
        if(num1 < 1){
            sf.append(" ORDER BY o.create_time ASC,o.number asc");
        }else{
            if(num < 1){
                sf.append(" ORDER BY o.create_time ASC,o.number asc");
            }else{
                sf.append(" and o.number > '"+parentNumber+"'  ORDER BY o.create_time ASC,o.number asc");
            }
        }
        sf.append(" limit 1 offset 0 ");
        return Db.findFirst(sf.toString(), siteId);
    }

    public Long whereData(Map<String,Object> map,String time,String siteId,String orderId,String parentNumber){
        String status=null;
        if(map.get("statusFlagMap")!=null){
            status = map.get("statusFlagMap").toString();
        }
        StringBuffer sf = new StringBuffer();
        sf.append(" SELECT count(1) as count FROM crm_order_2017 o  ");
        sf.append(" left join crm_order_dispatch_2017 cod on cod.order_id = o.id and cod.site_id = '"+siteId+"' and cod.status in ('1','2','4','5')");
        sf.append(" WHERE o.site_id=? and o.id != '"+orderId+"' and o.create_time = '"+time+"' and o.number > '"+parentNumber+"' ");
        if(status == null) {
            status = "";
        }
        String[] statusx = null;
        if (StringUtil.isNotBlank(status)) {
            statusx = status.split(",");
        }
        if (statusx != null && statusx.length > 0) {
            sf.append(" AND o.status IN (" + StringUtil.joinInSql(statusx) + ") ");
        }
        User user = UserUtils.getUser();
        List<String> cateList=null;
        List<String> brandList=null;
        if(!("2".equals(user.getUserType()))){
            String cate = nonService.servicemanCate(user.getId(),siteId);
            String brand = nonService.servicemanBrand(user.getId(),siteId);
            cateList = StringUtil.tolist(cate);
            brandList = StringUtil.tolist(brand);
        }
        sf.append(orderDao.getOrderWholeCondition(map,siteId,cateList,brandList));
        sf.append(" limit 1 offset 0 ");
        return Db.queryLong(sf.toString(),siteId);
    }
    public Long whereData1(Map<String,Object> map,String time,String siteId,String orderId,String parentNumber){
        String status=null;
        if(map.get("statusFlagMap")!=null){
            status = map.get("statusFlagMap").toString();
        }
        StringBuffer sf = new StringBuffer();
        sf.append(" SELECT count(1) as count FROM crm_order_2017 o  ");
        sf.append(" left join crm_order_dispatch_2017  cod on cod.order_id = o.id and cod.site_id = '"+siteId+"' and cod.status in ('1','2','4','5')");
        sf.append(" WHERE o.site_id=? and o.id != '"+orderId+"' and o.create_time = '"+time+"' and o.number < '"+parentNumber+"' ");
        if(status == null) {
            status = "";
        }
        String[] statusx = null;
        if (StringUtil.isNotBlank(status)) {
            statusx = status.split(",");
        }
        if (statusx != null && statusx.length > 0) {
            sf.append(" AND o.status IN (" + StringUtil.joinInSql(statusx) + ") ");
        }
        User user = UserUtils.getUser();
        List<String> cateList=null;
        List<String> brandList=null;
        if(!("2".equals(user.getUserType()))){
            String cate = nonService.servicemanCate(user.getId(),siteId);
            String brand = nonService.servicemanBrand(user.getId(),siteId);
            cateList = StringUtil.tolist(cate);
            brandList = StringUtil.tolist(brand);
        }
        sf.append(orderDao.getOrderWholeCondition(map,siteId,cateList,brandList));
        sf.append(" limit 1 offset 0 ");
        return Db.queryLong(sf.toString(),siteId);
    }

}
