package com.jojowonet.modules.finance.service;

import com.jfinal.plugin.activerecord.Db;
import com.jfinal.plugin.activerecord.Record;
import com.jojowonet.modules.finance.dao.RevenueDao;
import com.jojowonet.modules.order.utils.TableMigrationMapper;
import ivan.common.persistence.Page;
import ivan.common.service.BaseService;
import ivan.common.utils.StringUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;
import org.springframework.transaction.annotation.Transactional;

import java.util.List;
import java.util.Map;

@Component
@Transactional(readOnly = true)
public class RevenueService extends BaseService {

	@Autowired
	private RevenueDao revenueDao;
	@Autowired
	TableMigrationMapper tableMapper;

	public Page<Record> findOrder(Page<Record> page, Map<String, Object> map) {
		return findOrder(page, map, "");
	}

	public Page<Record> findOrder(Page<Record> page, Map<String, Object> map, String migration) {
		List<Record> rds = revenueDao.getOrderRevenueList(page, map, migration);
		for (Record rd : rds) {
			String sd="";
			String s="";
			String s2="";
			String money="";
			List<Record> settledetaillist=revenueDao.getsettledetaillist(rd.getStr("id"), migration);
			List<Record> settlementlist=revenueDao.getsettlementlist(rd.getStr("id"), migration);
			for (Record mrd : settlementlist) {
				s+=mrd.getStr("service_measures")+":";
				if(StringUtils.isNotBlank(mrd.getStr("settlement_detail"))){
					sd=mrd.getStr("settlement_detail").replace("###", ":");
					s+=sd;
				}
			}
			for (Record srd : settledetaillist) {
				if(srd.getBigDecimal("sum_money")!=null){
					money=srd.getBigDecimal("sum_money").toString();
				}else{
					money="0.00";
				}
				if("2".equals(srd.getStr("type"))){
					s+=srd.getStr("service_measures")+":"+money+";";
				}

				if(StringUtils.isNotBlank(srd.getStr("remarks"))){
					s2+=srd.getStr("service_measures")+":"+srd.getStr("remarks")+";";
				}else{
					s2+="";
				}

			}
			if (settledetaillist.size() == 0) {
				/*没有结算*/
				rd.set("settl",0);
			} else if (settledetaillist.size() > 0) {
				/*已结算*/
				rd.set("settl",1);
			}else{
				rd.set("settl",0);
			}
			rd.set("settlement_detail", s);
			rd.set("remarks", s2);
		}
		Long count = revenueDao.countOrderRevenue(map, migration);
		page.setList(rds);
		page.setCount(count);
		return page;
	}

	public Page<Record> findGoods(Page<Record> page, Map<String, Object> map,String siteId) {
		List<Record> rds = revenueDao.getGoodsRevenueList(page, map, siteId);
		Long count = revenueDao.countGoodsRevenue(map,siteId);
		page.setList(rds);
		page.setCount(count);
		return page;
	}
	
	public Record getSumMoney(Map<String, Object> map){
		return revenueDao.getSumMoney(map);
	}
	
	public Record queryById(String placingName){
		String sql = " SELECT a.*  FROM crm_goods_siteself_order a  WHERE a.placing_name=? AND a.status!='0' ";
		return Db.findFirst(sql,placingName);
	}
	
	public Page<Record> employeDetail(Page<Record> page, Map<String, Object> map,String siteId){
		return employeDetail(page, map, siteId, "");
	}

	public Page<Record> employeDetail(Page<Record> page, Map<String, Object> map,String siteId, String migration){
		List<Record> list = revenueDao.getEmployeDetail(page,map,siteId,migration);
		Long count = revenueDao.getEmployeDetailcount(map,siteId,migration);
		page.setCount(count);
		page.setList(list);
		return page;
	}

	public Page<Record> employeGoodsDetail(Page<Record> page, Map<String, Object> map,String siteId){
		List<Record> list = revenueDao.getEmployeGoodsDetail(page,map,siteId);
		Long count = revenueDao.getEmployeGoodsDetailcount(map,siteId);
		page.setCount(count);
		page.setList(list);
		return page;
	}
	
	public List<Record> empList(String siteId){
		return empList(siteId, "");
	}

	public List<Record> empList(String siteId, String migration){
		StringBuffer sb=new StringBuffer();
		sb.append(" select distinct(a.employe_name) from ").append(tableMapper.mapOrderSettlementDetail(migration)).append(" a left join crm_employe e on a.employe_id=e.id and e.status='0' ");
		sb.append(" inner join ").append(tableMapper.mapOrder(migration)).append(" c on c.id=a.order_id ");
		sb.append(" where a.site_id='"+siteId+"' and c.status !='8' ");
		return  Db.find(sb.toString());
	}

	public List<Record> empGoodsList(String siteId){
		return  Db.find("SELECT DISTINCT(a.salesman) FROM crm_goods_siteself_order_deduct_detail a LEFT JOIN crm_non_serviceman e ON a.salesman_id=e.user_id WHERE a.site_id=? AND e.status='0' AND a.saleman_type='3' UNION ALL SELECT DISTINCT(a.salesman) FROM crm_goods_siteself_order_deduct_detail a LEFT JOIN crm_employe e ON a.salesman_id=e.user_id WHERE a.site_id=? AND e.status='0' AND a.saleman_type='4'",siteId,siteId);
	}
	
	public Page<Record> empCountPage(String siteId,Page<Record> page,Map<String, Object> map1){
		List<Record> list = employeCount(page,map1,siteId);
		Long count = revenueDao.getEmplistCount(map1, siteId);
		page.setCount(count);
		page.setList(list);
		return page;
	}
	//商品汇总
	public Page<Record> empGoodsCountPage(String siteId,Page<Record> page,Map<String, Object> map1){
		List<Record> list = revenueDao.employeGoodsCount(page,map1,siteId);
		Long count = revenueDao.getEmplistGoodsCount(map1, siteId);
		page.setCount(count);
		page.setList(list);
		return page;
	}
	
	
	
	public List<Record> employeCount(Page<Record> page,Map<String, Object> map1,String siteId){
		return revenueDao.getSumMoneyAndEmpName(page,map1,siteId);
	}
	
	public String getParamValue(Map<String, Object> map, String param) {
        Object value = map.get(param);
        return value == null ? null : (map.get(param).toString());
    }
    
	public String getTrimmedParamValue(Map<String, Object> map, String param) {
        return StringUtils.trim(getParamValue(map, param));
    }

	//审核不通过
	public int reviewFailed(String id,String reviewRemark) {
		return revenueDao.reviewFailed(id,reviewRemark);
	}
     //审核通过
	public int reviewPass(String id,String reviewRemark) {
		return revenueDao.reviewPass(id,reviewRemark);
		
	}
	
}
