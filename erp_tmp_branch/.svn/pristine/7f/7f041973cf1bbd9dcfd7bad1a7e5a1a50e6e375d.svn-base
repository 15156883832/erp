package com.jojowonet.modules.fitting.web;

import com.google.common.collect.Maps;
import com.google.common.reflect.TypeToken;
import com.google.gson.Gson;
import com.jfinal.plugin.activerecord.Db;
import com.jfinal.plugin.activerecord.Record;
import com.jojowonet.modules.fitting.dao.FittingApplyPlanDao;
import com.jojowonet.modules.fitting.dao.FittingDao;
import com.jojowonet.modules.fitting.entity.Fitting;
import com.jojowonet.modules.fitting.entity.FittingApply;
import com.jojowonet.modules.fitting.entity.FittingApplyPlan;
import com.jojowonet.modules.fitting.form.Target;
import com.jojowonet.modules.fitting.service.FittingApplyPlanService;
import com.jojowonet.modules.fitting.service.FittingApplyService;
import com.jojowonet.modules.fitting.service.FittingService;
import com.jojowonet.modules.goods.service.GoodsSiteSelfService;
import com.jojowonet.modules.goods.utils.GoodsCategoryUtil;
import com.jojowonet.modules.operate.entity.Employe;
import com.jojowonet.modules.operate.service.EmployeService;
import com.jojowonet.modules.operate.service.SiteMsgService;
import com.jojowonet.modules.order.form.SiteTableHeaderForm;
import com.jojowonet.modules.order.service.OrderFittingService;
import com.jojowonet.modules.order.service.PushMessageService;
import com.jojowonet.modules.order.utils.*;
import com.jojowonet.modules.sys.util.TranslationService;
import com.jojowonet.modules.sys.util.TrimMap;
import ivan.common.config.Global;
import ivan.common.entity.mysql.common.User;
import ivan.common.persistence.JqGridPage;
import ivan.common.persistence.Page;
import ivan.common.persistence.Parameter;
import ivan.common.utils.DateUtils;
import ivan.common.utils.IdGen;
import ivan.common.utils.StringUtils;
import ivan.common.utils.UserUtils;
import ivan.common.utils.excel.ExportJqExcel;
import ivan.common.web.BaseController;
import net.sf.json.JSONArray;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.servlet.mvc.support.RedirectAttributes;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.validation.Valid;
import java.math.BigDecimal;
import java.text.SimpleDateFormat;
import java.util.*;

/**
 * 备件申请Controller
 *
 * @author Ivan
 * @version 2017-05-20
 */
@Controller
@RequestMapping(value = "${adminPath}/fitting/fittingApply")
public class FittingApplyController extends BaseController {

    private static final Log logger = LogFactory.getLog(FittingApplyController.class);

    @Autowired
    private FittingApplyService fittingApplyService;
    @Autowired
    private OrderFittingService orderFittingService;

    @Autowired
    private FittingService fiService;

    @Autowired
    private EmployeService employeService;

    @Autowired
    private PushMessageService pushmessageService;
    
	@Autowired
	private SiteMsgService siteMsgService;
	@Autowired
    TranslationService translationService;
	@Autowired
    private FittingApplyPlanDao fittingApplyPlanDao;
    @Autowired
    private GoodsSiteSelfService goodsSiteSelfService;

    //备件申请管理表头
    @RequestMapping(value = "getApplyList")
    public String getApplyList(FittingApply fittingApply, HttpServletRequest request, HttpServletResponse response, Model model) {
        User user = UserUtils.getUser();
        String siteId = CrmUtils.getCurrentSiteId(user);
        SiteTableHeaderForm stf = JqGridTableUtils.getCustomizedTableHead(siteId, request.getServletPath());
        List<Record> listR= GoodsCategoryUtil.getSiteCategory(CrmUtils.getCurrentSiteId(UserUtils.getUser()));
        List<Record> applianceCategory = CategoryUtils.getListCategorySite(siteId);
        model.addAttribute("listR", listR);
        model.addAttribute("applianceCategory", applianceCategory);
        model.addAttribute("headerData", stf);
        return "modules/" + "fitting/fittingApplyList";
    }

    //备件申请管理待审核数据
    @ResponseBody
    @RequestMapping(value = "getlist")
    public String getlist(FittingApply fittingApply, HttpServletRequest request, HttpServletResponse response, Model model) {
        User user = UserUtils.getUser();
        String siteId = CrmUtils.getCurrentSiteId(user);
        Map<String, Object> ma = new TrimMap(getParams(request));
        Page<Record> page = fittingApplyService.getfindList(new Page<Record>(request, response), siteId, 0, ma);// 0表示待审核的配件申请
        return renderJson(new JqGridPage<>(page));
    }

    
    @RequestMapping(value = "fittingManage")
    public String fittingManage(FittingApply fittingApply, HttpServletRequest request, HttpServletResponse response, Model model) {
        User user = UserUtils.getUser();
        String siteId = CrmUtils.getCurrentSiteId(user);
        SiteTableHeaderForm stf = JqGridTableUtils.getCustomizedTableHead(siteId, request.getServletPath());
       /* List<Record> re=SiteListUtils.getSiteList();
        model.addAttribute("siteList", re);*/
    	List<Record> provincelist=siteMsgService.getprovincelist();
    	model.addAttribute("listarea", provincelist);
        model.addAttribute("headerData", stf);
        return "modules/" + "operate/fittingAnalyse";
    }

    @RequestMapping(value="addFittingApply")
    public String addFittingApply(HttpServletRequest request, HttpServletResponse response, Model model){
        String id=request.getParameter("id");
        String type=request.getParameter("type");
        String emNamId=request.getParameter("emNamId");
        String number=request.getParameter("number");
       /* if(StringUtils.isBlank(emNamId)){
            throw Exception
            return "";
        }*/
        try {
            if (emNamId.indexOf(",") != -1) {
                emNamId = emNamId.split(",")[0];
            }
        } catch (Exception ex) {
            if (emNamId == null) {
                logger.error(String.format("<><>add fitting apply:id=%s,type=%s,number=%s", id, type, number));
            }
            throw ex;
        }
        Employe employe= employeService.get(emNamId);
     //   Fitting fit= fittingservice.get(id);
        String siteId = CrmUtils.getCurrentSiteId(UserUtils.getUser());
        if(StringUtils.isNotBlank(number)){
            Record reOrder = orderFittingService.getOrderOr400(number,siteId);
            model.addAttribute("reOrder",reOrder);
        }
        //List<Record> fittings = fittingservice.getFittings(siteId);
       // model.addAttribute("fittings", fittings);
        model.addAttribute("siteId", siteId);
        model.addAttribute("type", type);
     //   model.addAttribute("fit",fit);
        model.addAttribute("employe",employe);
        return "modules/" + "fitting/addApply";
    }
    
    /*
     * 删除备件申请信息
    */
    @ResponseBody
    @RequestMapping(value = "deleteFittingApply")
    public Result<Void> deleteFittingApply( HttpServletRequest request, HttpServletResponse response) {
    	String id = request.getParameter("id");
    	if(StringUtils.isNotBlank(id)){
    		FittingApply fa = fittingApplyService.getFittingApplyId(id);
    		Fitting fi = fiService.get(fa.getFittingId());
    		String orderNumber = fa.getOrderNumber();
    		String siteId = CrmUtils.getCurrentSiteId(UserUtils.getUser());
    		String status = fa.getStatus();
    		String name = CrmUtils.getUserXM();
    		if(Integer.parseInt(status) > 3){
    			//删除失败，数据信息错误
    			return Result.fail("400", "FittingStatus already adopted");
    		}
    		fa.setUpdateName(name);
    		fa.setUpdateTime(new Date());
    		fa.setEndTime(new Date());
    		fa.setAuditMarks("反馈封单删除申请");
    		fa.setStatus("7");
    		if("2".equals(status)){
    			//审核通过待出库（需要更改Fitting表的审核通过待出库数量）
    			fittingApplyService.RejectFittingApply(fa,fi);
    		}else{
    			fittingApplyService.deleteFittingApply(fa);
    		}

    		//更改工单中备件标记；fitting_flag
    		if (StringUtil.isNotBlank(orderNumber)) {
        		Long countOrder = fittingApplyService.countOrder(orderNumber, siteId);
        		if (countOrder > 0) {
        			String orderFittingFlag = fittingApplyService.getOrderFittingFlag(orderNumber, siteId);
        			Db.update("update crm_order a set a.fitting_flag = ? where a.number =? ", orderFittingFlag, orderNumber);
        		}
        	}
    		
            //取消预警
            StringBuilder sb = new StringBuilder();
            sb.append(" update crm_site_alarm set is_cancel = '1' ");
            sb.append(" where site_id = '" + siteId + "' and target_id = '" + id + "' and type = '4'  ");
            Db.update(sb.toString());
    		return Result.ok();
    	}
    	return Result.fail("400", "FittingSId id null");
    }
    
    @ResponseBody
    @RequestMapping(value = "getFittingManageList")
    public String getFittingManageList(FittingApply fittingApply, HttpServletRequest request, HttpServletResponse response, Model model) {
        User user = UserUtils.getUser();
       // String siteId = CrmUtils.getCurrentSiteId(user);
		Map<String, Object> ma = new TrimMap(getParams(request));
        Page<Record> page = fittingApplyService.getfitList(new Page<Record>(request, response), ma);// 0表示待审核的配件申请
        return renderJson(new JqGridPage<>(page));
    }
    
    @RequestMapping(value = "export2")
    public String exportFile2(HttpServletRequest request, HttpServletResponse response, RedirectAttributes redirectAttributes) {
        try {
            String formPath = request.getParameter("formPath");
            User user = UserUtils.getUser();
            String siteId = CrmUtils.getCurrentSiteId(user);
            Page<Record> pages = new Page<Record>(request, response);
            pages.setPageNo(1);
            pages.setPageSize(10000);
            SiteTableHeaderForm stf = JqGridTableUtils.getCustomizedTableHead(siteId, formPath);
            String title = stf.getExcelTitle();
            String fileName = title + "数据" + DateUtils.getDate("yyyyMMddHHmmss") + ".xlsx";
            Map<String, Object> ma = new TrimMap(getParams(request));
            JSONArray jarray = JSONArray.fromObject(stf.getTableHeader());
           // jarray.remove(0);
            List<Record> list = null;
            if ("备件分析".equals(title)) {
                list = fittingApplyService.getfitList(pages, ma).getList();
 
            } else {


            }
            new ExportJqExcel(title + "数据", jarray.toString(), stf.getSortHeader())
                    .setDataList(list).write(request, response, fileName).dispose();
            return null;
        } catch (Exception e) {
            e.printStackTrace();
            addMessage(redirectAttributes, "导出数据失败！失败信息：" + e.getMessage());
        }
        return "redirect:" + Global.getAdminPath() + "/sys/user/?repage";
    }
    
    
    //备件申请管理待出库表头
    @RequestMapping(value = "ThelibraryHeader")
    public String ThelibraryHeader(FittingApply fittingApply, HttpServletRequest request, HttpServletResponse response, Model model) {
        User user = UserUtils.getUser();
        String siteId = CrmUtils.getCurrentSiteId(user);
        SiteTableHeaderForm stf = JqGridTableUtils.getCustomizedTableHead(siteId, request.getServletPath());
        List<Record> listR= GoodsCategoryUtil.getSiteCategory(CrmUtils.getCurrentSiteId(UserUtils.getUser()));
        List<Record> applianceCategory = CategoryUtils.getListCategorySite(siteId);
        model.addAttribute("applianceCategory", applianceCategory);
        model.addAttribute("listR", listR);
        model.addAttribute("headerData", stf);
        return "modules/" + "fitting/fittingThelibrary";
    }

    //备件申请管理待出库数据
    @ResponseBody
    @RequestMapping(value = "Thelibrary")
    public String Thelibrarylist(FittingApply fittingApply, HttpServletRequest request, HttpServletResponse response, Model model) {
        User user = UserUtils.getUser();
        String siteId = CrmUtils.getCurrentSiteId(user);
        Map<String, Object> ma = new TrimMap(getParams(request));
        Page<Record> pages = new Page<Record>(request, response);
        Page<Record> page = fittingApplyService.getfindList(pages, siteId, 1, ma);// 1表示待出库的配件申请
        return renderJson(new JqGridPage<>(page));
    }

    //全部备件申请表头
    @RequestMapping(value = "ApplyallHeader")
    public String ApplyallHeader(FittingApply fittingApply, HttpServletRequest request, HttpServletResponse response, Model model) {
        User user = UserUtils.getUser();
        String siteId = CrmUtils.getCurrentSiteId(user);
        SiteTableHeaderForm stf = JqGridTableUtils.getCustomizedTableHead(siteId, request.getServletPath());
        List<Record> listR= GoodsCategoryUtil.getSiteCategory(CrmUtils.getCurrentSiteId(UserUtils.getUser()));
        List<Record> applianceCategory = CategoryUtils.getListCategorySite(siteId);
        model.addAttribute("applianceCategory", applianceCategory);
        model.addAttribute("listR", listR);
        model.addAttribute("headerData", stf);
        List<Record> emps = employeService.findBySiteId(siteId);
        model.addAttribute("emps", emps);
        return "modules/" + "fitting/ApplyallList";
    }

    //全部申请数据
    @ResponseBody
    @RequestMapping(value = "Applyall")
    public String Applyalllist(FittingApply fittingApply, HttpServletRequest request, HttpServletResponse response, Model model) {
        User user = UserUtils.getUser();
        String siteId = CrmUtils.getCurrentSiteId(user);
        Map<String, Object> ma = new TrimMap(getParams(request));
        Page<Record> page = fittingApplyService.getfindList(new Page<Record>(request, response), siteId, 2, ma);// 2表示全部的配件申请
        return renderJson(new JqGridPage<>(page));
    }

    @ResponseBody
    @RequestMapping(value = "getOrderByEmp")
    public List<Record> getOrderByEmp(HttpServletRequest request, HttpServletResponse response, Model model) {
        User user = UserUtils.getUser();
        String siteId = CrmUtils.getCurrentSiteId(user);
        String employeId=request.getParameter("employId");
        String employName=request.getParameter("employName");
        String sql="select * from crm_order where site_id='"+siteId+"' and employe_id='"+employeId+"' and  DATE_SUB(CURDATE(), INTERVAL 1 MONTH) <= date(create_time) ";
        List<Record> reList=null;
        if(StringUtils.isNotBlank(employeId)){
            reList = Db.find(sql);
            if(reList==null){
                String sql4="select * from crm_order_400 where site_id='"+siteId+"' and (employe1='"+employName+"' or employe2='"+employName+"' or employe3='"+employName+"') and  DATE_SUB(CURDATE(), INTERVAL 1 MONTH) <= date(create_time) ";
                reList=Db.find(sql4);
            }
        }
        return reList;
    }


    @ResponseBody
    @RequestMapping(value = "getOrderByNumber")
    public Record getOrderByNumber(HttpServletRequest request, HttpServletResponse response, Model model) {
        User user = UserUtils.getUser();
        String siteId = CrmUtils.getCurrentSiteId(user);
        String number=request.getParameter("number");
        String employeId=request.getParameter("employeId");
        Record re=orderFittingService.getOrderOr400(number,siteId);
        return re;
    }


    /**
     * // 配件申请有可能是直接输入配件名称
     */
    @RequestMapping(value = "form")
    public String form(HttpServletRequest request, Model model) {
    	String siteId = CrmUtils.getCurrentSiteId(UserUtils.getUser());
        String id = request.getParameter("id");
        FittingApply fa = fittingApplyService.getFittingApplyId(id);
        String fittingImgs = fa.getFittingImg();
        String[] imgs = null;
        if (StringUtils.isNotBlank(fittingImgs)) {
            imgs = fittingImgs.split(",");
            model.addAttribute("fittingApplyImgs", imgs);
        }
        if (imgs != null && imgs.length > 0) {
            model.addAttribute("hasApplyImgs", true);
        }
        if (StringUtils.isNotEmpty(fa.getFittingId())) {
            Fitting fi = fiService.getId(fa.getFittingId());
            String fittingImages=fi.getImg();
            String[] fitImgs=null;
            if(StringUtils.isNotBlank(fittingImages)){
                fitImgs=fittingImages.split(",");
                model.addAttribute("fitImgs",fitImgs);
            }
            if (fitImgs != null && fitImgs.length > 0) {
                model.addAttribute("hasFitImgs", true);
            }
            model.addAttribute("fitting", fi);
        } else if (StringUtils.isNotBlank(fa.getFittingCode())) {
            Fitting fi = fiService.getByCode(fa.getFittingCode(), siteId);
            model.addAttribute("fitting", fi);
        }
        if (StringUtils.isNotEmpty(fa.getOrderNumber())) {
            Record rd  = orderFittingService.getOrderOr400(fa.getOrderNumber(),siteId);
            model.addAttribute("order", rd);
        }
        Record applyPlan=Db.findFirst(" select * from crm_site_fitting_apply_plan where fitting_apply_id=? ",id);
        model.addAttribute("applyPlan", applyPlan);

        model.addAttribute("siteRelos",goodsSiteSelfService.getSiteServiceInfoList(siteId));
        model.addAttribute("fa", fa);
        model.addAttribute("fmtWT", translationService.translationWarrantyType(fa.getWarrantyType()));
        BigDecimal fittingAuditNum = fa.getFittingAuditNum();
        if (fittingAuditNum == null || fittingAuditNum.doubleValue() == 0) { // 审核数量不允许为0
            fittingAuditNum = fa.getFittingApplyNum();
            model.addAttribute("auditNum", fittingAuditNum);
        } else {
            model.addAttribute("auditNum", fittingAuditNum);
        }
        return "modules/" + "fitting/fittingApplyForm";
    }

    @ResponseBody
    @RequestMapping(value="commitApplyPlan")
    public String commitApplyPlan(String fittingCode,String applyId,Date planTime,String planApplicant,String planApplicantId,String planMarks,Double planNum,HttpServletRequest request){
        if(StringUtils.isBlank(applyId)){
            return "201";
        }
        Record re=Db.findFirst("select * from crm_site_fitting where code=? and status='1' ",fittingCode);
        if(re==null){
            return "202";
        }
        FittingApplyPlan applyPlan=new FittingApplyPlan();
        applyPlan.setFittingApplyId(applyId);
        applyPlan.setPlanTime(planTime);
        applyPlan.setCreateTime(new Date());
        applyPlan.setCreator(CrmUtils.getUserXM());
        applyPlan.setCreatorId(UserUtils.getUser().getId());
        applyPlan.setPlanApplicantId(planApplicantId);
        applyPlan.setPlanApplicant(planApplicant);
        applyPlan.setMarks(planMarks);
        applyPlan.setPlanNum(planNum);
        applyPlan.setStatus("1");
        applyPlan.setSiteId(CrmUtils.getCurrentSiteId(UserUtils.getUser()));
        fittingApplyPlanDao.save(applyPlan);
        return "ok";
    }

    /**
     * //备件强全部申请查看详情
     */
    @RequestMapping(value = "seeDetailForm")
    public String seeDetailForm(HttpServletRequest request, Model model) {
    	String siteId = CrmUtils.getCurrentSiteId(UserUtils.getUser());
    	String id = request.getParameter("id");
    	FittingApply fa = fittingApplyService.getFittingApplyId(id);
    	String fittingImgs = fa.getFittingImg();
    	String[] imgs = null;
    	if (StringUtils.isNotBlank(fittingImgs)) {
    		imgs = fittingImgs.split(",");
    		model.addAttribute("fittingApplyImgs", imgs);
    	}
    	if (imgs != null && imgs.length > 0) {
    		model.addAttribute("hasApplyImgs", true);
    	}
    	if (StringUtils.isNotEmpty(fa.getFittingId())) {
    		Fitting fi = fiService.getId(fa.getFittingId());
    		model.addAttribute("fitting", fi);
    	} else if (StringUtils.isNotBlank(fa.getFittingCode())) {
    		Fitting fi = fiService.getByCode(fa.getFittingCode(), siteId);
    		model.addAttribute("fitting", fi);
    	}
    	if (StringUtils.isNotEmpty(fa.getOrderNumber())) {
    		Record rd  = orderFittingService.getOrderOr400(fa.getOrderNumber(),siteId);
    		model.addAttribute("order", rd);
    	}
    	model.addAttribute("fa", fa);
    	model.addAttribute("fmtWT", translationService.translationWarrantyType(fa.getWarrantyType()));
    	BigDecimal fittingAuditNum = fa.getFittingAuditNum();
    	if (fittingAuditNum == null || fittingAuditNum.doubleValue() == 0) { // 审核数量不允许为0
    		fittingAuditNum = fa.getFittingApplyNum();
    		model.addAttribute("auditNum", fittingAuditNum);
    	} else {
    		model.addAttribute("auditNum", fittingAuditNum);
    	}
    	return "modules/" + "fitting/fittingApplyDetailForm";
    }

    /**
     * 备件申请上一个、下一个功能
     */
    @RequestMapping(value = "formClick")
    public String formClick(HttpServletRequest request, Model model) {
    	String siteId = CrmUtils.getCurrentSiteId(UserUtils.getUser());
    	String id = request.getParameter("id");
    	FittingApply fa = fittingApplyService.getFittingApplyId(id);
    	String fittingImgs = fa.getFittingImg();
    	String[] imgs = null;
    	if (StringUtils.isNotBlank(fittingImgs)) {
    		imgs = fittingImgs.split(",");
    		model.addAttribute("fittingApplyImgs", imgs);
    	}
    	if (imgs != null && imgs.length > 0) {
    		model.addAttribute("hasApplyImgs", true);
    	}
    	if (StringUtils.isNotEmpty(fa.getFittingId())) {
    		Fitting fi = fiService.getId(fa.getFittingId());
    		model.addAttribute("fitting", fi);
    	} else if (StringUtils.isNotBlank(fa.getFittingCode())) {
    		Fitting fi = fiService.getByCode(fa.getFittingCode(), siteId);
    		model.addAttribute("fitting", fi);
    	}
    	if (StringUtils.isNotEmpty(fa.getOrderNumber())) {
    		Record rd  = orderFittingService.getOrderOr400(fa.getOrderNumber(),siteId);
    		model.addAttribute("order", rd);
    	}
    	model.addAttribute("fa", fa);
    	model.addAttribute("fmtWT", translationService.translationWarrantyType(fa.getWarrantyType()));
    	BigDecimal fittingAuditNum = fa.getFittingAuditNum();
    	if (fittingAuditNum == null || fittingAuditNum.doubleValue() == 0) { // 审核数量不允许为0
    		fittingAuditNum = fa.getFittingApplyNum();
    		model.addAttribute("auditNum", fittingAuditNum);
    	} else {
    		model.addAttribute("auditNum", fittingAuditNum);
    	}
    	return "modules/" + "fitting/fittingApplyForm";
    }

    /**
     * 信息员添加申请备件, pc端口替服务工程申请配件。
     */
    @RequestMapping("saveFittingApply")
    @ResponseBody
    public Object saveFittingApply(@Valid FittingApply fa, BindingResult bindingResult) {
        if (bindingResult.hasErrors()) {
            return bindingResult.getAllErrors();
        }

        if (StringUtil.isBlank(fa.getEmployeId())) {
            logger.error("全部申请/工程师申请 -> 工程师id不能为空");
            HashMap<String, Object> ret = new HashMap<>();
            ret.put("error", "employe id not found");
            return ret;
        }

        if (StringUtil.isBlank(fa.getEmployeName())) {
            Employe employe = employeService.get(fa.getEmployeId());
            fa.setEmployeName(employe.getName());
        }

        Fitting fi = fiService.getId(fa.getFittingId());
        if (fi != null) {
            logger.info(String.format("全部申请/工程师申请：warning=%s,apply.num=%s,fitting.Id=%s,emp.id=%s,order.number=%s,fitting.number=%s",
                    fi.getWarning(), fa.getFittingApplyNum(), fi.getId(), fa.getEmployeId(), fa.getOrderNumber(), fi.getNumber()));
        } else {
            logger.error("全部申请/工程师申请 -> 未找到配件");
            HashMap<String, Object> ret = new HashMap<>();
            ret.put("error", "fitting not found");
            return ret;
        }

        double amount = fi.getWarning() - fa.getFittingApplyNum().doubleValue();
        if (amount < 0 || fa.getFittingApplyNum().doubleValue() <= 0) {
            HashMap<String, String> ret = new HashMap<>();
            ret.put("noInventory", "true");
            return ret;
        }

        User user = UserUtils.getUser();
        fittingApplyService.employeApply(fa, fi, user);

        fiService.refresh(fi);
        logger.info(String.format("全部申请/工程师申请：warning=%s,apply.num=%s,fitting.Id=%s,emp.id=%s,order.number=%s,fitting.number=%s",
                fi.getWarning(), fa.getFittingApplyNum(), fi.getId(), fa.getEmployeId(), fa.getOrderNumber(), fi.getNumber()));

        /*库存预警*/
        fiService.stockAlert(fa.getFittingId());
        return fi;
    }

    /**
     * 添加工程师备件申请
      * @param fa
     * @return
     */
    @RequestMapping(value="addFittingApplys")
    @ResponseBody
    public Object addFittingApplys(FittingApply fa) {
        Fitting fi = fiService.getId(fa.getFittingId());
        String orderFittingFlag ="";
        Long countOrder =0L;
        User user = UserUtils.getUser();
        fittingApplyService.addEmpApply(fa,user,fi);
        if(StringUtils.isNotBlank(fa.getOrderNumber())){
        	String siteId= CrmUtils.getCurrentSiteId(UserUtils.getUser());
        	orderFittingFlag = fittingApplyService.getOrderFittingFlag(fa.getOrderNumber(),siteId);
        	countOrder = fittingApplyService.countOrder(fa.getOrderNumber(), fa.getSiteId());
        }

        if(countOrder > 0 ){
            Db.update("update crm_order a set a.fitting_flag = ? where a.number =? ",orderFittingFlag,fa.getOrderNumber());
        }

        return null;
    }


    @ResponseBody
    @RequestMapping(value = "updateFittingApply")
    public Object getupdateFittingApply(HttpServletRequest request, HttpServletResponse response) {
    	String auditMarks = request.getParameter("auditMarks");
        String id = request.getParameter("id");
        String fittingId = request.getParameter("fittingId");
        String fittingCode = request.getParameter("fittingCode");
        String fittingCode1 = request.getParameter("fittingCode1");
        String fittingAuditNum = request.getParameter("fittingAuditNum");
        String oldFittingFlag = request.getParameter("oldFittingFlag");
        String orderNumber = request.getParameter("orderNumber");
        String orderType = request.getParameter("orderType");
        String fittingName = request.getParameter("fittingName");
        String fiCount = request.getParameter("ficount");//库存数量
        String name = CrmUtils.getUserXM();
        FittingApply fa = fittingApplyService.getFittingApplyId(id);
        fa.setOldFittingFlag(oldFittingFlag);
        fa.setAuditMarks(auditMarks);
        fa.setUpdateTime(new Date());
        fa.setUpdateName(name);
        fa.setFittingAuditNum(new BigDecimal(fittingAuditNum));
        fa.setFittingCode(fittingCode);
        logger.info(String.format("UFA: fa.id=%s,fitting_code=%s,fitting_code1=%s,marks=%s,audit_num=%s,status=%s", id, fittingCode, fittingCode1, auditMarks, fittingAuditNum,fa.getStatus()));

        if (!"0".equals(fa.getStatus()) && !"1".equals(fa.getStatus())) {
            logger.error(String.format("UFA: cannot update,fa.id=%s,fa.status=%s", id, fa.getStatus()));
            return null;
        }

        //如果两个备件条码相同则不会更新备件信息，fittingCode1是配件原来的编号，fittingCode是本次要更新的配件编号。
        if (!fittingCode1.equals(fittingCode)) {
            Fitting fitting = fiService.getId(fittingId);
            if (fitting != null) {
                fa.setFittingName(fitting.getName());
                fa.setFittingVersion(fitting.getVersion());
                fa.setFittingId(fittingId);
                fa.setFittingCode(fittingCode);
            }
        }

        String exits = request.getParameter("exi");
        if ("no".equals(exits)) {
            logger.info(String.format("UFA: set fa.status=1,old status=%s,fa.id=%s", fa.getStatus(), id));
            fa.setStatus("1");
        } else {
            logger.info(String.format("UFA: set fa.status=0,old status=%s,fa.id=%s", fa.getStatus(), id));
            fa.setStatus("0");
        }
        
        //配件条码为空，不标为缺件
        if((StringUtils.isBlank(fittingCode) && StringUtils.isBlank(fittingCode1)) || StringUtils.isBlank(fittingCode)){
            logger.info(String.format("UFA: set fa.status=0,old status=%s,fa.id=%s", fa.getStatus(), id));
        	fa.setStatus("0");
        }
        fittingApplyService.save(fa);

        //系统预警
        Double fCount =0.0;
        if(StringUtils.isNotBlank(fiCount)){
        	fCount = Double.valueOf(fiCount);
        }
        if (fCount == 0) {
            String content;
            if (StringUtils.isNotEmpty(orderNumber)) {
                content = "" + orderNumber + "、" + orderType + "申请的" + fittingName + "、" + fittingCode + "缺件，请及时处理！";
            } else {
                content = "" + fittingName + "、" + fittingCode + "缺件，请及时处理！";
            }

            String siteId = CrmUtils.getCurrentSiteId(UserUtils.getUser());
            StringBuilder sb = new StringBuilder();
            sb.append(" insert into crm_site_alarm (id, site_id, type, target_id, target_name, content, create_time, status, is_cancel, is_send) ");
            sb.append(" values ('" + IdGen.uuid() + "', '" + siteId + "', '4', '" + id + "', '" + fittingCode + "', '" + content + "', '" + DateUtils.getDate("yyyy-MM-dd HH:mm:ss") + "', '0', '0', '0') ");
            Db.update(sb.toString());
        }
        return fa;
    }

    /**
     * @return 通过备件申请
     */
    @ResponseBody
    @RequestMapping(value = "adoptFittingApply")
    public Result<Void> adoptFittingApply(HttpServletRequest request, HttpServletResponse response) {
    	String auditMarks = request.getParameter("auditMarks");
        String id = request.getParameter("id");
        String fittingId = request.getParameter("fittingId");
        String fittingCode = request.getParameter("fittingCode");
        String fittingCode1 = request.getParameter("fittingCode1");
        String fittingAuditNum = request.getParameter("fittingAuditNum");
        String oldFittingFlag = request.getParameter("oldFittingFlag");
        String siteId = CrmUtils.getCurrentSiteId(UserUtils.getUser());
        logger.info(String.format("adopt fitting apply,id=%s,code=%s,code1=%s,audit_num=%s,old fitting flag=%s,siteId=%s",
                fittingId, fittingCode, fittingCode1, fittingAuditNum, oldFittingFlag, siteId));

        FittingApply fa = fittingApplyService.getFittingApplyId(id);
        if ("2".equals(fa.getStatus())) {
            logger.error(String.format("fitting apply [%s] is already adopted, blocked.", fa.getId()));
            return Result.fail("422", "fitting apply already adopted");
        }

        if (StringUtils.isBlank(fittingCode) || StringUtils.isBlank(fittingId)) {
            logger.error(String.format("fitting apply %s fittingId or fittingCode is null", id));
            return Result.fail("423", "fitting apply illegal state");
        }

        String name = CrmUtils.getUserXM();
        User user = UserUtils.getUser();
        Fitting fi = fiService.getId(fittingId);

        if (!checkBinding(fittingCode, fi)) {
            logger.error(String.format("fitting code=%s and fitting id=%s binding failed for apply %s", fittingCode, fittingCode1, id));
            return Result.fail("424", "fitting code and id binding failed");
        }

        Double auditNum = Double.valueOf(fittingAuditNum);
        if (fi.getWarning() < auditNum) {
            logger.error(String.format("adopt fitting apply %s failed for not enough warning", id));
            return Result.fail("425", "fitting has not enough warning");
        }

        fa.setOldFittingFlag(oldFittingFlag);
        fa.setAuditMarks(auditMarks);
        fa.setUpdateTime(new Date());
        fa.setUpdateName(name);
        fa.setFittingAuditNum(new BigDecimal(fittingAuditNum));
        fa.setStatus("2");
        fa.setAuditor(name);
        fa.setAuditorId(user.getId());
        fa.setAuditTime(new Date());
        fa.setFittingId(fi.getId());
        fa.setFittingName(fi.getName());
        fa.setFittingCode(fi.getCode());
        fa.setFittingVersion(fi.getVersion());
        fittingApplyService.adoptFittingApply(fa, fi); 

        String orderNumber = fa.getOrderNumber();
        if (StringUtil.isNotBlank(orderNumber)) {
            Long countOrder = fittingApplyService.countOrder(orderNumber, siteId);
            if (countOrder > 0) {
                String orderFittingFlag = fittingApplyService.getOrderFittingFlag(orderNumber, siteId);
                Db.update("update crm_order a set a.fitting_flag = ? where a.number =? ", orderFittingFlag, orderNumber);
            }
        }
        //取消预警
        StringBuilder sb = new StringBuilder();
        sb.append(" update crm_site_alarm set is_cancel = '1' ");
        sb.append(" where site_id = '" + siteId + "' and target_id = '" + id + "' and type = '4'  ");
        Db.update(sb.toString());

        return Result.ok();
    }
    /**
     * @return 待出库中驳回申请
     */
    @ResponseBody
    @RequestMapping(value = "RejectFittingApply")
    public Result<Void> RejectFittingApply(HttpServletRequest request, HttpServletResponse response) {
    	String id = request.getParameter("id");
    	String siteId = CrmUtils.getCurrentSiteId(UserUtils.getUser());
    	FittingApply fa = fittingApplyService.getFittingApplyId(id);
    	if (!"2".equals(fa.getStatus())) {
    		logger.error(String.format("fitting apply [%s] is already adopted, blocked.", fa.getId()));
    		return Result.fail("422", "fitting apply already adopted");
    	}
    	logger.error(String.format("<<--- RejectFittingApply fitting apply id=%s", fa.getId())+";"+ new Date());
    	String name = CrmUtils.getUserXM();
    	Fitting fi = fiService.getId(fa.getFittingId());
    	Double auditNum = fa.getFittingAuditNum().doubleValue();
    	String orderNumber = fa.getOrderNumber();
    	if (fi.getWarning() < auditNum) {
    		//添加预警信息操作
    		logger.error(String.format("<<--Reject fitting apply %s failed for not enough warning", id));
    		//
    		Record rd = fittingApplyService.getalarm(siteId, id);
    		if(rd != null){
    			StringBuilder sb = new StringBuilder();
    			sb.append(" update crm_site_alarm set is_cancel = '0' ");
    			sb.append(" where site_id = '" + siteId + "' and target_id = '" + id + "' and type = '4'  ");
    			Db.update(sb.toString());
    		}else{
    		    String sql = null;
                try {
                    String content;
                    if (StringUtils.isNotEmpty(orderNumber)) {
                        content = "" + orderNumber + "、" + "申请的" + fi.getName() + "、" + fi.getCode() + "缺件，请及时处理！";
                    } else {
                        content = "" + fi.getName() + "、" + fi.getCode() + "缺件，请及时处理！";
                    }
                    StringBuilder sb = new StringBuilder();
                    sb.append(" insert into crm_site_alarm (id, site_id, type, target_id, target_name, content, create_time, status, is_cancel, is_send) ");
                    sb.append(" values (?, ?, '4', ?, ?, ?, ?, '0', '0', '0') ");
                    sql = sb.toString();
                    Db.update(sql, IdGen.uuid(), siteId, id, fi.getCode(), content, new Date());
                } catch (Exception e) {
                    logger.error(String.format("create crm site alarm failed,sql=[%s]", sql), e);
                    throw e;
                }
            }
    	}
    	fa.setAuditMarks(fa.getAuditMarks()+";"+DateUtils.formatDate(new Date(), "yyyy-MM-dd HH:mm:ss")+"驳回申请");
    	fa.setUpdateTime(new Date());
    	fa.setUpdateName(name);
    	fa.setStatus("0");
    	fittingApplyService.RejectFittingApply(fa, fi); 
    	logger.error(String.format("<<--Reject fitting apply %s Change the status of the application and the number of spare parts to be delivered", id+";"+new Date()));
    
    	if (StringUtil.isNotBlank(orderNumber)) {
    		Long countOrder = fittingApplyService.countOrder(orderNumber, siteId);
    		if (countOrder > 0) {
    			String orderFittingFlag = fittingApplyService.getOrderFittingFlag(orderNumber, siteId);
    			Db.update("update crm_order a set a.fitting_flag = ? where a.number =? ", orderFittingFlag, orderNumber);
    		}
    	}
    	
    	return Result.ok();
    }

    private boolean checkBinding(String fittingCode, Fitting fitting) {
        return fitting.getCode().equals(fittingCode);
    }

    /**
     * @return 拒绝备件申请
     */
    @ResponseBody
    @RequestMapping(value = "refuseFittingApply")
    public Object refuseFittingApply(HttpServletRequest request, HttpServletResponse response) {
        String id = request.getParameter("id");
        String auditMarks = request.getParameter("auditMarks");
        String reason = request.getParameter("reason");
        return fittingApplyService.refuseFittingApply(id,reason,auditMarks);
    }

    //申请反馈
    @ResponseBody
    @RequestMapping(value = "messageApply")
    public Object messageApply(HttpServletRequest request, HttpServletResponse response) {
        String id = request.getParameter("id");
        String message = request.getParameter("message");
        FittingApply fa = fittingApplyService.getFittingApplyId(id);
        ArrayList<Target> list = WebPageFunUtils.getOrderProcess(fa.getMessage());
        Target ta = new Target();
        String name = CrmUtils.getUserXM();
        ta.setContent(message);
        ta.setName(name);
        ta.setTime(DateUtils.formatDate(new Date(), "yyyy-MM-dd HH:mm:ss"));
        list.add(ta);
        Gson gson = new Gson();
        @SuppressWarnings("serial")
        String str = gson.toJson(list, new TypeToken<ArrayList<Target>>() {
        }.getType());
        fa.setMessage(str);

        fittingApplyService.save(fa);

        //推送消息给服务工程师
        pushmessageService.notifyFittingApplyFeedback(fa.getId(), message, fa.getEmployeId());
        return fa;
    }

    //备件出库
    @ResponseBody
    @RequestMapping(value = "thelibraryApply")
    public Object thelibraryApply(HttpServletRequest request, HttpServletResponse response) {
        String id = request.getParameter("id");
        FittingApply fa = fittingApplyService.getFittingApplyId(id);
        String name = CrmUtils.getUserXM();
        User user = UserUtils.getUser();
        fa.setConfirmor(name);
        fa.setConfirmorId(user.getId());
        logger.info(String.format("fitting out stock,apply -> id=%s,site_id=%s,audit_num=%s,apply_num=%s,empid=%s,orderNumber=%s",
                fa.getId(), fa.getSiteId(), fa.getFittingAuditNum(), fa.getFittingApplyNum(), fa.getEmployeId(), fa.getOrderNumber()));

        Object ob = fittingApplyService.outStockByFittingApply(fa, user);
        try {
            Fitting fi = fiService.get(fa.getFittingId());
            logger.info("after update site stock,apply.id=" + fa.getId() + ";fitting.id=" + fi.getId() + ";warning=" + fi.getWarning() + ";audited_sum=" + fi.getAuditedSum() + ";number=" + fi.getNumber());
        } catch (Exception ex) {
            logger.error("log upate site stock failed,apply.id=" + fa.getId());
        }
        String orderFittingFlag = fittingApplyService.getOrderFittingFlag(fa.getOrderNumber(), fa.getSiteId());
        
        Long countOrder = fittingApplyService.countOrder(fa.getOrderNumber(), fa.getSiteId());
    	if(countOrder > 0 ){
    		Db.update("update crm_order a set a.fitting_flag = ? where a.number =? ",orderFittingFlag,fa.getOrderNumber());
    	}
    	/*库存预警*/
        fiService.stockAlert(fa.getFittingId());
        return ob;
    }

    //备件出库
    @ResponseBody
    @RequestMapping(value = "batchOutStock")
    public Object batchOutStock(HttpServletRequest request) {
        String[] id = request.getParameterValues("id[]");
        User user = UserUtils.getUser();
        String name = CrmUtils.getUserXM();
        List<FittingApply> applyList = fittingApplyService.getFittingApplyList(id, CrmUtils.getCurrentSiteId(user));
        for (FittingApply fa : applyList) {
            fa.setConfirmor(name);
            fa.setConfirmorId(user.getId());
            logger.info(String.format("fitting out stock,apply -> id=%s,site_id=%s,audit_num=%s,apply_num=%s,empid=%s,orderNumber=%s",
                    fa.getId(), fa.getSiteId(), fa.getFittingAuditNum(), fa.getFittingApplyNum(), fa.getEmployeId(), fa.getOrderNumber()));

            fittingApplyService.outStockByFittingApply(fa, user);
            try {
                Fitting fi = fiService.get(fa.getFittingId());
                logger.info("after update site stock,apply.id=" + fa.getId() + ";fitting.id=" + fi.getId() + ";warning=" + fi.getWarning() + ";audited_sum=" + fi.getAuditedSum() + ";number=" + fi.getNumber());
            } catch (Exception ex) {
                logger.error("log upate site stock failed,apply.id=" + fa.getId());
            }
            String fittingFlag = fittingApplyService.getOrderFittingFlag(fa.getOrderNumber(), fa.getSiteId());
            Long relatedOrder = fittingApplyService.countOrder(fa.getOrderNumber(), fa.getSiteId());
            if (relatedOrder > 0) {
                Db.update("update crm_order a set a.fitting_flag = ? where a.`number` =? ", fittingFlag, fa.getOrderNumber());
            }
        }
        return Result.ok();
    }

    @RequestMapping(value = "export")
    public String exportFile(HttpServletRequest request, HttpServletResponse response, RedirectAttributes redirectAttributes) {
        try {
            String formPath = request.getParameter("formPath");
            User user = UserUtils.getUser();
            String siteId = CrmUtils.getCurrentSiteId(user);
            Page<Record> pages = new Page<Record>(request, response);
            pages.setPageNo(1);
            pages.setPageSize(10000);
            SiteTableHeaderForm stf = JqGridTableUtils.getCustomizedTableHead(siteId, formPath);
            String title = stf.getExcelTitle();
            System.out.println(title);
            String fileName = title + "数据" + DateUtils.getDate("yyyyMMddHHmmss") + ".xlsx";
            Map<String, Object> ma = new TrimMap(getParams(request));
            JSONArray jarray = JSONArray.fromObject(stf.getTableHeader());
            jarray.remove(0);
            List<Record> list = null;
            if ("全部申请".equals(title)) {
                list = fittingApplyService.getfindList(pages, siteId, 2, ma).getList();
                //申请状态：0.申请待审核 1.缺件中 2.审核通过待出库 3.确认出库待领取 4.已领取可使用 5.申请已取消 6.申请审核未通过，默认0
                for (Record re : list) {
                    if ("1".equals(re.getStr("warranty_type"))) {
                        re.set("warranty_type", "保外");
                    } else if ("2".equals(re.getStr("warranty_type"))) {
                        re.set("warranty_type", "保内");
                    } else if ("3".equals(re.getStr("warranty_type"))) {
                        re.set("warranty_type", "保外转保内");
                    } else if ("0".equals(re.getStr("warranty_type"))) {
                        re.set("warranty_type", "其他");
                    }
                    String fapStatus = re.getStr("fapStatus");
                    if("0".equals(fapStatus)) {
                    	re.set("fapStatus", "待提交");
                    }
                    if("1".equals(fapStatus)) {
                    	re.set("fapStatus", "已提交");
                    }
                    if("2".equals(fapStatus)) {
                    	re.set("fapStatus", "已出库");
                    }
                    switch (re.getStr("status")) {
                        case "0":
                            re.set("status", "申请待审核");
                            break;
                        case "1":
                            re.set("status", "缺件中");
                            break;
                        case "2":
                            re.set("status", "审核通过待出库");
                            break;
                        case "3":
                            re.set("status", "确认出库待领取");
                            break;
                        case "4":
                            re.set("status", "已领取可使用");
                            break;
                        case "5":
                            re.set("status", "申请已取消");
                            break;
                        case "6":
                            re.set("status", "申请审核未通过");
                            break;
                        default:
                            break;
                    }
                }
            } else {


            }
            new ExportJqExcel(title + "数据", jarray.toString(), stf.getSortHeader())
                    .setDataList(list).write(request, response, fileName).dispose();
            return null;
        } catch (Exception e) {
            e.printStackTrace();
            addMessage(redirectAttributes, "导出数据失败！失败信息：" + e.getMessage());
        }
        return "redirect:" + Global.getAdminPath() + "/sys/user/?repage";
    }

    @RequestMapping(value = "q_bjapply")
    @ResponseBody
    public Map<String, Object> q_bjapply(HttpServletRequest request, HttpServletResponse response, Model model) {
        Map<String, Object> map = Maps.newHashMap();
        String siteId = CrmUtils.getCurrentSiteId(UserUtils.getUser());
        String code = request.getParameter("code");
        List<Record> list = fittingApplyService.q_bjapply(siteId, code);
        if (list.size() > 0) {
            Record re = list.get(0);
            String name = re.getStr("name");
            String version = re.getStr("version");
            BigDecimal num = re.getBigDecimal("warning");
            String remark = re.getStr("remarks");
            String fittingId = re.getStr("id");
            map.put("name", name);
            map.put("version", version);
            map.put("maxnum", num);
            map.put("remarks", remark);
            map.put("fittingId", fittingId);
            map.put("jg", "data");
        }
        return map;
    }

    @RequestMapping(value = "tj_bjapply")
    @ResponseBody
    public void tj_bjapply(@Valid FittingApply fa,
                           BindingResult bindingResult, HttpServletRequest request, HttpServletResponse response, Model model) {

        if (bindingResult.hasErrors()) {
            // intentionally left empty
            return;
        }

        String fittingId = request.getParameter("fittingId");
        Fitting fi = fiService.getId(fittingId);
        String name = CrmUtils.getUserXM();
        User user = UserUtils.getUser();
        String siteId = CrmUtils.getCurrentSiteId(user);
        String num = request.getParameter("num");
        String type = request.getParameter("type");
        String remarks = request.getParameter("remarks");
        String eid = request.getParameter("empId");
        String orderId = request.getParameter("orderId");
        String empName = request.getParameter("empName");
        BigDecimal bg = new BigDecimal(num);
        fa.setConfirmor(name);
        fa.setConfirmorId(user.getId());
        fa.setFittingAuditNum(fa.getFittingApplyNum());
        fa.setStatus("0"); // 申请待确认
        fa.setNumber(CrmUtils.no());
        fa.setCreateTime(new Date());
        fa.setSuitCategory(fi.getSuitCategory());
        fa.setFittingImg(fi.getImg());
        fa.setCreator(fa.getEmployeName());
        fa.setOldFittingFlag(fi.getRefundOldFlag());
        fa.setAuditor(name);//审核人
        fa.setAuditorId(user.getId());
        fa.setAuditTime(new Date());
        fa.setType("1");
        fa.setOrderId(orderId);
        fa.setSiteId(siteId);
        fa.setFittingApplyNum(bg);
        fa.setEmployeId(eid);
        fa.setFittingName(name);
        fa.setFittingVersion(type);
        fa.setEmployeFeedback(remarks);
        fa.setFittingCode(fi.getCode());
        fa.setFittingImg(fi.getImg());
        fa.setEmployeName(empName);
        fa.setCreator(empName);
        fa.setMessage(new SimpleDateFormat("yyyy-MM-dd hh:mm:ss").format(new Date()) + "@#" + remarks);
        fittingApplyService.bjApplyTj(fa);
    }

}
