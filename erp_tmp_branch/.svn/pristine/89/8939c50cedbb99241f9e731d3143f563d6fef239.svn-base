package com.jojowonet.modules.order.service;

import java.math.BigDecimal;
import java.util.List;
import java.util.Map;

import org.hibernate.SQLQuery;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;
import org.springframework.transaction.annotation.Transactional;

import com.jfinal.plugin.activerecord.Db;
import com.jfinal.plugin.activerecord.Record;
import com.jojowonet.modules.order.dao.OrderCollectionsDao;
import com.jojowonet.modules.order.utils.StringUtil;

import ivan.common.persistence.Page;
import ivan.common.service.BaseService;

/**
 * 二维码收款Service
 * 
 * @author Ivan
 * @version 2017-05-04
 */
@Component
@Transactional(readOnly = true)
public class OrderCollectionsService extends BaseService {

	@Autowired
	private OrderCollectionsDao orderCollectionsDao;

	public Page<Record> orderCollectionsList(Page<Record> page, String siteId, Map<String, Object> map) {
		List<Record> list = orderCollectionsDao.orderCollectionsList(page, siteId, map);
		Long count = orderCollectionsDao.queryCount(siteId, map);

		page.setList(list);
		page.setCount(count);
		return page;
	}

	public List<Record> employeList(String siteId) {
		return Db.find("select * from crm_employe a where a.status='0' and a.site_id='" + siteId + "'");
	}

	public BigDecimal orderCollectionsSumamount(String siteId, Map<String, Object> map) {
		BigDecimal sum = orderCollectionsDao.orderCollectionsSumamount(siteId, map);
		return sum;
	}

	public BigDecimal commissionSumanount(String siteId, Map<String, Object> map) {
		BigDecimal sum = orderCollectionsDao.commissionSumanount(siteId, map);
		return sum;
	}

	public Record getDetailbyid(String id) {
		return orderCollectionsDao.getDetailbyid(id);
	}

	public String confirmdz(String id) {
		String result = "";
		int i = orderCollectionsDao.confirmdz(id);
		if (i > 0) {
			result = "ok";
		}
		return result;
	}

	public String saveCommission(String id, String commissionMoney) {
		String result = "";
		if (StringUtil.isEmpty(commissionMoney)) {
			commissionMoney = "0";
		}
		// BigDecimal bd=new BigDecimal(commissionMoney);
		int i = orderCollectionsDao.saveCommission(id, commissionMoney);
		if (i > 0) {
			result = "ok";
		}
		return result;
	}

	@Transactional(rollbackFor = Exception.class)
	public String saveMarks(String id, String marks) {
		SQLQuery sqlQuery = orderCollectionsDao.getSession().createSQLQuery("update crm_order_collections a set a.marks=:marks where a.id=:ids");
		sqlQuery.setParameter("marks", marks);
		sqlQuery.setParameter("ids", id);
		sqlQuery.executeUpdate();
		return "200";
	}
}
