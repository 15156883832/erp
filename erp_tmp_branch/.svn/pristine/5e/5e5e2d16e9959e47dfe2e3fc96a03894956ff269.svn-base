package com.jojowonet.modules.operate.web;

import java.math.BigDecimal;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.apache.commons.lang.StringUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.servlet.mvc.support.RedirectAttributes;

import com.jfinal.plugin.activerecord.Record;
import com.jojowonet.modules.finance.form.OrderExcel;
import com.jojowonet.modules.operate.service.EmployeDailySignService;
import com.jojowonet.modules.operate.utils.DateJson;
import com.jojowonet.modules.operate.utils.SignRecord;
import com.jojowonet.modules.order.form.SiteTableHeaderForm;
import com.jojowonet.modules.order.utils.CrmUtils;
import com.jojowonet.modules.order.utils.JqGridTableUtils;

import ivan.common.config.Global;
import ivan.common.entity.mysql.common.User;
import ivan.common.persistence.JqGridPage;
import ivan.common.persistence.Page;
import ivan.common.utils.DateUtils;
import ivan.common.utils.UserUtils;
import ivan.common.utils.excel.ExportExcel;
import ivan.common.utils.excel.ExportJqExcel;
import ivan.common.web.BaseController;
import net.sf.json.JSONArray;

/**
 * 员工每日签到记录表Controller
 * 
 * @author Ivan
 * @version 2017-06-13
 */
@Controller
@RequestMapping(value = "${adminPath}/operate/employeDailySign")
public class EmployeDailySignController extends BaseController {

	@Autowired
	private EmployeDailySignService employeDailySignService;

	/*
	 * 工程师考勤 表头字段
	 */
	@RequestMapping(value = "headerList")
	public String getHeaderList(HttpServletRequest request, HttpServletResponse response, Model model) {
		Map<String, Object> map = getParams(request);
		String siteId = CrmUtils.getCurrentSiteId(UserUtils.getUser());
		Page<Record> pages = new Page<Record>(request, response);
		Integer pageNo = 1;
		Integer pageSize = 20;
		if (map.get("rows") != null) {
			if (StringUtils.isNotBlank(map.get("rows").toString())) {
				pageNo = Integer.valueOf(map.get("page").toString());
				pageSize = Integer.valueOf(map.get("rows").toString());
			}
		}
		map.put("pageNo", pageNo);
		map.put("pageSize", pageSize);
		SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
		if (map.get("startDate1") == null) {
			map.put("startDate1", sdf.format(new Date()));
			map.put("endDate1", sdf.format(new Date()));
		}
		map.put("siteId", siteId);
		List<Record> listEmp = employeDailySignService.getAllEmpList(siteId, map);
		List<String> listDate = DateJson.getDateJsonList(map.get("startDate1").toString(), map.get("endDate1").toString());
		Map<String, Object> mapsn = employeDailySignService.dealFinalList(listEmp, listDate, map);
		List<Record> finalList = (List<Record>) mapsn.get("list");
		Long countPage = Long.valueOf(mapsn.get("count").toString());
		model.addAttribute("dateList", listDate);
		model.addAttribute("listEmp", listEmp);
		model.addAttribute("finalList", finalList);

		model.addAttribute("map", map);
		Page<Record> page = employeDailySignService.getEmployeDailySignList(pages, siteId, map, finalList, listDate, countPage);
		model.addAttribute("page", page);
		return "modules/operate/employeDailySign";
	}

	@RequestMapping(value = "employeLeaveList")
	public String employeLeaveList(HttpServletRequest request, HttpServletResponse response, Model model) {
		String siteId = CrmUtils.getCurrentSiteId(UserUtils.getUser());
		Map<String, Object> map = getParams(request);
		SiteTableHeaderForm stf = JqGridTableUtils.getCustomizedTableHead(siteId, request.getServletPath());
		model.addAttribute("headerData", stf);
		model.addAttribute("map", map);
		return "modules/" + "operate/employeLeaveList";
	}

	/*
	 * 工程师考勤 列表
	 */
	@ResponseBody
	@RequestMapping(value = "employeLeaveGrid")
	public String employeLeaveGrid(HttpServletRequest request, HttpServletResponse response) {
		String siteId = CrmUtils.getCurrentSiteId(UserUtils.getUser());
		Map<String, Object> map = getParams(request);
		Page<Record> pages = new Page<Record>(request, response);
		Page<Record> page = employeDailySignService.employeLeaveGrid(pages, siteId, map);
		return renderJson(new JqGridPage<>(page));
	}

	/*
	 * 工程师考勤 列表
	 */
	@ResponseBody
	@RequestMapping(value = "employeDailySignGrid")
	public String getEmployeDailySignList(HttpServletRequest request, HttpServletResponse response) {
		String siteId = CrmUtils.getCurrentSiteId(UserUtils.getUser());
		Map<String, Object> map = request.getParameterMap();
		Page<Record> pages = new Page<Record>(request, response);
		Page<Record> page = employeDailySignService.employeDailySignList(pages, siteId, map);
		return renderJson(new JqGridPage<>(page));
	}

	/*
	 * 修改打卡时间
	 */
	@ResponseBody
	@RequestMapping(value = "editSignTime")
	public Boolean getEditSignTime(String rowId, String signTime, String signType, HttpServletRequest request, HttpServletResponse response) {
		return employeDailySignService.editSignTime(rowId, signTime, signType);
	}

	/*
	 * 设置
	 */
	@RequestMapping(value = "signEdit")
	public String signEdit(String rowId, String signTime, HttpServletRequest request, HttpServletResponse response, Model model) {
		model.addAttribute("type", "1");
		return "modules/operate/signEdit";
	}

	/*
	 * 保存新增的考勤设置
	 */
	@ResponseBody
	@RequestMapping(value = "saveSign")
	public String saveSign(String workingTime, String offWorkingTime, String signPoint, Integer signRange, BigDecimal latitude, BigDecimal longitude, String employeIds,
			HttpServletRequest request, HttpServletResponse response) {
		return employeDailySignService.saveSign(workingTime, offWorkingTime, signPoint, signRange, latitude, longitude, employeIds);
	}

	@ResponseBody
	@RequestMapping(value = "deleteSign")
	public void deleteSign(String id) {
		employeDailySignService.deleteSign(id);
	}

	@ResponseBody
	@RequestMapping(value = "getSignInfo")
	public Record getSignInfo(String id) {
		String siteId = CrmUtils.getCurrentSiteId(UserUtils.getUser());
		return employeDailySignService.getInfoById(id, siteId);
	}

	@ResponseBody
	@RequestMapping(value = "getSignInfos")
	public List<Record> getSignInfos() {
		String siteId = CrmUtils.getCurrentSiteId(UserUtils.getUser());
		return employeDailySignService.getSignInfos(siteId);
	}

	/*
	 * 系统设置下考勤模块saveSignEdit
	 */
	@RequestMapping(value = "signSet")
	public String signSet(HttpServletRequest request, HttpServletResponse response, Model model) {
		String siteId = CrmUtils.getCurrentSiteId(UserUtils.getUser());
		Page<Record> pages = new Page<Record>(request, response);
		Map<String, Object> map = getParams(request);
		if (map.get("mark") != null) {// 切换tab时
			if ("2".equals(map.get("mark"))) {
				employeDailySignService.deleteOtherTimes(map, siteId);
			}
		}
		if (map.get("signNum") == null) {
			map.put("signNum", employeDailySignService.getDefaultSignNum(siteId));
		}
		Page<Record> page = employeDailySignService.getSignSetDetailList(siteId, pages, map);
		model.addAttribute("page", page);
		model.addAttribute("map", map);
		return "modules/operate/workAttendance";
	}

	@ResponseBody
	@RequestMapping(value = "getSignSetList")
	public String getSignSetList(HttpServletRequest request, HttpServletResponse response, Model model) {
		String siteId = CrmUtils.getCurrentSiteId(UserUtils.getUser());
		Map<String, Object> map = getParams(request);
		Page<Record> pages = new Page<Record>(request, response);
		Page<Record> page = employeDailySignService.getSignSetList(siteId, pages);
		model.addAttribute("page", page);
		return renderJson(new JqGridPage<>(page));
	}

	/*
	 * 保存修改的考勤设置
	 */
	@ResponseBody
	@RequestMapping(value = "saveSignEdit")
	public String saveSignEdit(String workingTime, String offWorkingTime, String signPoint, Integer signRange, BigDecimal latitude, BigDecimal longitude, String signId,
			String employeIds, HttpServletRequest request, HttpServletResponse response) {
		return employeDailySignService.saveSignEdit(workingTime, offWorkingTime, signPoint, signRange, latitude, longitude, signId, employeIds);
	}

	@RequestMapping(value = "toAddSignSetPage")
	public String toAddSignSetPage(HttpServletRequest request, HttpServletResponse response, Model model) {
		String siteId = CrmUtils.getCurrentSiteId(UserUtils.getUser());
		model.addAttribute("siteId", siteId);
		model.addAttribute("ifEmploye", employeDailySignService.getDefaultSign(siteId));
		model.addAttribute("tag", request.getParameter("tag"));
		return "modules/operate/signSet/addSignSet";
	}

	@RequestMapping(value = "toEditSignSetPage")
	public String toEditSignSetPage(HttpServletRequest request, HttpServletResponse response, Model model) {
		String id = request.getParameter("id");
		model.addAttribute("siteId", CrmUtils.getCurrentSiteId(UserUtils.getUser()));
		model.addAttribute("detail", employeDailySignService.getSingSetById(id));
		return "modules/operate/signSet/editSignSet";
	}

	@ResponseBody
	@RequestMapping(value = "saveAddSignSet")
	public String saveAddSignSet(HttpServletRequest request, HttpServletResponse response) {
		Map<String, Object> map = getParams(request);
		return employeDailySignService.saveAddSignSet(map);
	}

	@ResponseBody
	@RequestMapping(value = "saveEditSignSet")
	public String saveEditSignSet(HttpServletRequest request, HttpServletResponse response) {
		Map<String, Object> map = getParams(request);
		return employeDailySignService.saveEditSignSet(map);
	}

	/*
	 * 修改打卡时间
	 */
	@ResponseBody
	@RequestMapping(value = "editSignTimes")
	public String editSignTimes(HttpServletRequest request, HttpServletResponse response) {
		Map<String, Object> map = getParams(request);
		String siteId = CrmUtils.getCurrentSiteId(UserUtils.getUser());
		return employeDailySignService.editSignTimes(map, siteId);
	}

	// 导出数据
	@RequestMapping(value = "exportLeave")
	public String exportLeave(HttpServletRequest request, HttpServletResponse response, RedirectAttributes redirectAttributes) {
		try {
			String formPath = request.getParameter("formPath");
			User user = UserUtils.getUser();
			String siteId = CrmUtils.getCurrentSiteId(user);
			Page<Record> pages = new Page<Record>(request, response);
			pages.setPageNo(1);
			pages.setPageSize(10000);
			Map<String, Object> map = getParams(request);
			SiteTableHeaderForm stf = JqGridTableUtils.getCustomizedTableHead(siteId, formPath);
			String title = stf.getExcelTitle();
			System.out.println(title);
			String fileName = title + "数据" + DateUtils.getDate("yyyyMMddHHmmss") + ".xlsx";
			JSONArray jarray = JSONArray.fromObject(stf.getTableHeader());
			List<Record> list = null;
			Page<Record> precord = employeDailySignService.employeLeaveGrid(pages, siteId, map);
			list = precord.getList();
			for (Record rd : list) {

			}
			new ExportJqExcel(title + "数据", jarray.toString(), stf.getSortHeader()).setDataList(list).write(request, response, fileName).dispose();
			return null;
		} catch (Exception e) {
			e.printStackTrace();
			addMessage(redirectAttributes, "导出数据失败！失败信息：" + e.getMessage());
		}
		return "redirect:" + Global.getAdminPath() + "/sys/user/?repage";
	}

	@ResponseBody
	@RequestMapping(value = "getSignDetailById")
	public Record getSignDetailById(HttpServletRequest request, HttpServletResponse response) {
		String id = request.getParameter("id");
		return employeDailySignService.getSignDetailById(id);
	}

	@ResponseBody
	@RequestMapping(value = "getAnnouncement")
	public Map<String, Object> getAnnouncement(HttpServletRequest request, HttpServletResponse response) {
		String siteId = CrmUtils.getCurrentSiteId(UserUtils.getUser());
		return employeDailySignService.getAnnouncement(siteId);
	}

	// 导出
	@RequestMapping(value = "export")
	public String exportFile(OrderExcel orderExcel, HttpServletRequest request, HttpServletResponse response, RedirectAttributes redirectAttributes) {
		try {
			String fileName = "考勤记录" + DateUtils.getDate("yyyyMMddHHmmss") + ".xlsx";
			Map<String, Object> map = getParams(request);
			String siteId = CrmUtils.getCurrentSiteId(UserUtils.getUser());
			Page<Record> pages = new Page<Record>(request, response);
			pages.setPageNo(1);
			pages.setPageSize(10000);
			map.put("pageNo", pages.getPageNo());
			map.put("pageSize", pages.getPageSize());
			SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
			if (map.get("startDate1") == null) {
				map.put("startDate1", sdf.format(new Date()));
				map.put("endDate1", sdf.format(new Date()));
			}
			map.put("siteId", siteId);
			List<Record> listEmp = employeDailySignService.getAllEmpList(siteId, map);
			List<String> listDate = DateJson.getDateJsonList(map.get("startDate1").toString(), map.get("endDate1").toString());
			Map<String, Object> mapsn = employeDailySignService.dealFinalList(listEmp, listDate, map);
			List<Record> finalList = (List<Record>) mapsn.get("list");
			Long countPage = Long.valueOf(mapsn.get("count").toString());
			Page<Record> page = employeDailySignService.getEmployeDailySignList(pages, siteId, map, finalList, listDate, countPage);

			List<Record> list = page.getList();
			List<SignRecord> list1 = new ArrayList<>();
			if (list.size() > 0) {
				for (Record rd : list) {
					String empName = rd.getStr("empName");
					String date = rd.getStr("date");

					List<Record> list2 = (List<Record>) rd.get("detailList");
					for (Record rd1 : list2) {
						SignRecord sr = new SignRecord();
						sr.setDate(date);
						sr.setEmployeName(empName);
						String signSeri = "";
						if ("1".equals(rd1.getStr("sign_type"))) {
							signSeri = "上班" + rd1.get("sign_serial");
						} else {
							signSeri = "下班" + rd1.get("sign_serial");
						}
						sr.setSignNum(signSeri);
						sr.setSignTime(rd1.getStr("signTime"));
						if (rd1.getStr("id") == null) {
							sr.setSignType("— —");
							sr.setSignResult("未打卡");
						} else {
							sr.setSignType("1".equals(rd1.getStr("sign_type")) ? "签到" : "签退");
							if ("0".equals(rd1.getStr("sign_result"))) {
								sr.setSignResult("未打卡");
							}
							if ("1".equals(rd1.getStr("sign_result"))) {
								sr.setSignResult("迟到");
							}
							if ("2".equals(rd1.getStr("sign_result"))) {
								sr.setSignResult("早退");
							}
						}
						sr.setSignAddress(rd1.getStr("sign_address"));
						sr.setOutTime(rd1.get("out_time") != null ? rd1.get("out_time").toString() : "");
						if ("2".equals(rd.getStr("ifleave"))) {
							sr.setReason("是");
						} else {
							sr.setReason("否");
						}
						list1.add(sr);
					}
				}
			}
			new ExportExcel("考勤记录", SignRecord.class).setDataList(list1).write(response, fileName).dispose();
			return null;
		} catch (Exception e) {
			addMessage(redirectAttributes, "导出工单报表失败！失败信息：" + e.getMessage());
		}
		return "redirect:" + Global.getAdminPath() + "/sys/user/?repage";
	}
}
