/**
 */
package com.jojowonet.modules.order.web;

import java.util.Date;
import java.util.List;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import net.sf.json.JSONArray;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.servlet.mvc.support.RedirectAttributes;

import ivan.common.web.BaseController;
import ivan.common.config.Global;
import ivan.common.entity.mysql.common.User;
import ivan.common.persistence.JqGridPage;
import ivan.common.persistence.Page;
import ivan.common.utils.DateUtils;
import ivan.common.utils.StringUtils;
import ivan.common.utils.UserUtils;
import ivan.common.utils.excel.ExportJqExcel;

import com.google.common.collect.Lists;
import com.jfinal.plugin.activerecord.Db;
import com.jfinal.plugin.activerecord.Record;
import com.jojowonet.modules.fitting.entity.Fitting;
import com.jojowonet.modules.fitting.entity.FittingApply;
import com.jojowonet.modules.operate.service.SiteMsgService;
import com.jojowonet.modules.order.entity.Statistics;
import com.jojowonet.modules.order.form.SiteTableHeaderForm;
import com.jojowonet.modules.order.service.StatisticsService;
import com.jojowonet.modules.order.utils.CategoryUtils;
import com.jojowonet.modules.order.utils.CrmUtils;
import com.jojowonet.modules.order.utils.JqGridTableUtils;
import com.jojowonet.modules.sys.util.TrimMap;

/**
 * 统计信息Controller
 * @author Ivan
 * @version 2018-01-03
 */
@Controller
@RequestMapping(value = "${adminPath}/order/statistics")
public class StatisticsController extends BaseController {

	@Autowired
	private StatisticsService statisticsService;
	
	@Autowired
	private SiteMsgService siteMsgService;
	
	/*@ModelAttribute
	public Statistics get(@RequestParam(required=false) String id) {
		if (StringUtils.isNotBlank(id)){
			return statisticsService.get(id);
		}else{
			return new Statistics();
		}
	}*/
	
	@RequestMapping(value = {"list", ""})
	public String list(Statistics statistics, HttpServletRequest request, HttpServletResponse response, Model model) {
		String siteId = CrmUtils.getCurrentSiteId(UserUtils.getUser());
		SiteTableHeaderForm stf = JqGridTableUtils.getCustomizedTableHead(
				siteId, request.getServletPath());
		User user = UserUtils.getUser();
		String priname=""; 
		if(StringUtils.isNotEmpty(user.getPermission())){
			priname=CrmUtils.getUserPrivince(user.getPermission()); 
		}
		model.addAttribute("priname", priname);
		model.addAttribute("headerData", stf);
		List<Record> provincelist=siteMsgService.getprovincelist();
		model.addAttribute("listarea", provincelist);
		return "modules/" + "order/statisticsList";
	}
	
	@RequestMapping(value = "systems")
	public String systems(Statistics statistics, HttpServletRequest request, HttpServletResponse response, Model model) {
		SiteTableHeaderForm stf = JqGridTableUtils.getCustomizedTableHead(
				null, request.getServletPath());
		model.addAttribute("headerData", stf);
		List<Record> provincelist=siteMsgService.getprovincelist();
		model.addAttribute("listarea", provincelist);
		return "modules/" + "order/statisticssystemList";
	}
	
	@RequestMapping(value = "exportStatistics")
    public String exportFile1(HttpServletRequest request, HttpServletResponse response, RedirectAttributes redirectAttributes) {
		try {
			String formPath = request.getParameter("formPath");
			User user = UserUtils.getUser();
			String siteId= CrmUtils.getCurrentSiteId(user);
			String type = request.getParameter("type");
			String priname = request.getParameter("priname");
			 Map<String,Object> map = new TrimMap(getParams(request));
			SiteTableHeaderForm stf = JqGridTableUtils.getCustomizedTableHead(siteId, formPath);
			String title = stf.getExcelTitle();
            String fileName = title+"数据"+DateUtils.getDate("yyyyMMddHHmmss")+".xlsx";
			List<Record> list =null;
			list=statisticsService.getstatisticsList(map, priname, type);
    		new ExportJqExcel(title+"数据", stf.getTableHeader(), stf.getSortHeader())
    			.setDataList(list).write(request, response, fileName).dispose();
    		return null;
		} catch (Exception e) {
			e.printStackTrace();
			addMessage(redirectAttributes, "导出数据失败！失败信息："+e.getMessage());
		}
		return "redirect:"+Global.getAdminPath()+"/sys/user/?repage";
    }

	
	@RequestMapping(value = "statisticsList")
	@ResponseBody
	public String statisticsList(HttpServletRequest request,
			HttpServletResponse response, Model model) {
		String priname = request.getParameter("priname");
		String type = request.getParameter("type");//type值为2则是顾问查询列表,1是system查询列表
	   	 Map<String,Object> map = new TrimMap(getParams(request));
		Page<Record> page = new Page<>(request, response);
		page = statisticsService.findStatisticsList(page,map,priname,type);
		model.addAttribute("page", page);
		JqGridPage<Record> jqp = new JqGridPage<>(page);
		return renderJson(jqp);
	}
	
	@RequestMapping(value = "getStatisticsById")
	public String getStatisticsById(HttpServletRequest request,
			HttpServletResponse response, Model model) {
		String id = request.getParameter("id");
		Record rds = statisticsService.getStatisticsById(id);
		String siteId = rds.getStr("site_id");
		List<Record> category = CategoryUtils.getListCategorySite(siteId);
		List<Record> list = statisticsService.getstatisticsDetailedList(id);
		String detailed="";
		String cate = "";
		if(rds != null ){
			if(rds.getDate("update_time") == null){
				
			}else if(DateUtils.formatDate(rds.getDate("update_time"), "yyyy-MM-dd").equals(DateUtils.formatDate(new Date(), "yyyy-MM-dd"))){
				detailed = rds.getStr("follow_up_detailed");
			}
		}
		for(Record rd : category) {
			if(StringUtils.isNotBlank(cate)) {
				cate = cate+"、"+rd.getStr("name")+"  ";
			}else {
				cate = rd.getStr("name");
			}
		}
		model.addAttribute("category", cate);
		model.addAttribute("detailed", detailed);
		model.addAttribute("list", list);
		model.addAttribute("rds", rds);
		return "modules/" + "order/statisticsForm";
	}
	
	@RequestMapping(value="addStatistics")
    @ResponseBody
    public Object addStatistics(Statistics sta,HttpServletRequest request,HttpServletResponse response) {
		User user = UserUtils.getUser();
		sta.setContacts(user.getLoginName());
		statisticsService.update(sta,user.getId());
		//statisticsService.insetoDet(sta.getId(), sta.getFollowUpDetailed());

        return true;
    }
	
	@RequestMapping(value = "getStatistics")
	public String gettodaySignout(HttpServletRequest request, Model model){
		//获取月份
		String time = request.getParameter("month");
		String times = "";
		if(StringUtils.isNotBlank(time)){
			times = time;
		}else{
			times = DateUtils.formatDate(new Date(), "yyyy-MM");
		}
		JSONArray rds = statisticsService.getCountForms(times);
		JSONArray addrds = statisticsService.getnewlyAddedCount(times);
		model.addAttribute("data", rds);
		model.addAttribute("assdata", addrds);
		model.addAttribute("month", time);
		model.addAttribute("times", times);
		return "modules/sys/sysStatistics";
	}
	
	@ResponseBody
	@RequestMapping(value = "getlisttimes")
	public Object getEmployeSign(HttpServletRequest request,HttpServletResponse response) {
		String time = request.getParameter("month");
		List<String> lists = Lists.newArrayList();
		int curMonthDay = statisticsService.curMonthDay(time);
		for(int i =1;i<=curMonthDay;i++){
			String month = time; 
			if(i < 10){
				month = month + "-" +  "0" + i;
			}else{
				month =  month + "-" + i;
			}
			lists.add(month);
		}
		
		return lists;
	}
	@ResponseBody
	@RequestMapping(value = "gettimes")
	public Object gettimes(HttpServletRequest request,HttpServletResponse response) {
		List<Record> lists = statisticsService.gettimes();
		return lists;
	}

}
