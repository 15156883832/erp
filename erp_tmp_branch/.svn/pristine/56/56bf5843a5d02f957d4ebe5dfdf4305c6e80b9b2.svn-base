package com.jojowonet.modules.order.web;

import cn.jiguang.common.utils.StringUtils;
import com.jfinal.plugin.activerecord.Record;
import com.jojowonet.modules.order.form.SiteTableHeaderForm;
import com.jojowonet.modules.order.service.SmsSignSetService;
import com.jojowonet.modules.order.service.SmsTempletService;
import com.jojowonet.modules.order.utils.CrmUtils;
import com.jojowonet.modules.order.utils.JqGridTableUtils;
import com.jojowonet.modules.order.utils.StringUtil;
import com.jojowonet.modules.sys.util.SMSUtils;
import com.jojowonet.modules.sys.util.TrimMap;
import ivan.common.persistence.JqGridPage;
import ivan.common.persistence.Page;
import ivan.common.utils.UserUtils;
import ivan.common.web.BaseController;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.ResponseBody;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import java.util.*;

/**
 * Created by Administrator on 2018/1/15.
 */
@Controller
@RequestMapping(value = "${adminPath}/order/smstempletSet")
public class SmsTempletController  extends BaseController{
    @Autowired
    private SmsTempletService smsTempletService;

    @Autowired
    private SmsSignSetService smsSignSetService;

    @RequestMapping(value="headlist")
    public String headList(HttpServletRequest request, HttpServletResponse response, Model model){
        String siteId = CrmUtils.getCurrentSiteId(UserUtils.getUser());
        SiteTableHeaderForm stf = JqGridTableUtils.getCustomizedTableHead(siteId, request.getServletPath());
        model.addAttribute("headerData", stf);
        model.addAttribute("siteSign",smsSignSetService.getSiteSmsSign(siteId));
        return "modules/" + "order/smstemplist";
    }
    @RequestMapping(value = "getsmslist")
    @ResponseBody
    public String smstempletList(HttpServletRequest request, HttpServletResponse response, Model model){
        String siteId = CrmUtils.getCurrentSiteId(UserUtils.getUser());
        Map<String,Object> map = new TrimMap(getParams(request));
        Page<Record> page = new Page<>(request, response);
        page = smsTempletService.smstempletList(page,map,siteId);
        model.addAttribute("page", page);
        JqGridPage<Record> jqp = new JqGridPage<>(page);
        return renderJson(jqp);
    }

    @RequestMapping(value = "saveSms")
    @ResponseBody
    public String save(HttpServletRequest request, HttpServletResponse response,Model model,String name,String content,String id,String number,String createBy,String createType,String faildreason){
        String result ="";
        String siteId = CrmUtils.getCurrentSiteId(UserUtils.getUser());
        String userId = UserUtils.getUser().getId();
        String userType = UserUtils.getUser().getUserType();
        List<Record> namelist = smsTempletService.getnamelist(name,id,siteId);
        if(namelist.size()>0){
            result="rename";
            return result;
        }
        if(StringUtils.isEmpty(name)){
            result = "模板名称不能为空";
            return result;
        }
        if(StringUtils.isEmpty(content)){
            result = "模板内容不能为空";
            return result;
        }
/*        String[] strarr = content.split("");
       List<String> list = new ArrayList <>();
       for(int i = 0;i<strarr.length;i++){
           list.add(strarr[i]);
       }
        for(int i = 0 , len= list.size();i<len;++i){
            if("@".equals(list.get(i))){
                list.remove(i+1);
                --len;//减少一个
            }
        }*/
       String contentforsms = content.replace("@1","@");
          contentforsms = contentforsms.replace("@2","@");
         contentforsms = contentforsms.replace("@3","@");
         contentforsms = contentforsms.replace("@4","@");
         contentforsms = contentforsms.replace("@5","@");
         contentforsms = contentforsms.replace("@6","@");
         contentforsms = contentforsms.replace("@7","@");
        contentforsms = contentforsms.replace("@8","@");
        contentforsms = contentforsms.replace("@9","@");
        contentforsms = contentforsms.replace("\n","");
        StringBuffer sf = new StringBuffer();
     /*   for (String str:list) {
            sf.append(str);
        }*/
      sf.append(contentforsms);
        String signname = smsSignSetService.getSiteSmsSign(siteId).getStr("sms_sign");
        if(StringUtil.isEmpty(signname)){
            result = "nullsignname";
            return result;
        }
        sf.append("【"+signname+"】");
        Map<String,Object> map = new HashMap <>();
        if(StringUtils.isEmpty(id)||StringUtils.isEmpty(number)){
            map = SMSUtils.saveTemplet(sf.toString());
        }else{
            map = SMSUtils.updateTemplet(sf.toString(),number);
        }
        content = content+"【"+signname+"】";
        if(map!=null&&map.get("result")!=null){
            if((boolean)map.get("result")){
                if(StringUtils.isEmpty(id)||StringUtils.isEmpty(number)){
                    smsTempletService.save((String)map.get("tid"),name,content,userId,userType,siteId,"0");
                    result="ok1";
                }else{
                    smsTempletService.update(name,content,siteId,"0",id,number,createBy,createType,faildreason);
                    result="ok2";
                }
            }else{
                result="faild";
            }
        }else{
            result="faild";
        }
        return result;
    }

    @RequestMapping(value = "delete")
    @ResponseBody
    public String deleteSms(String id){
        String userId = UserUtils.getUser().getId();
        return smsTempletService.deleteSms(userId,id);
    }

    @RequestMapping(value = "getByid")
    @ResponseBody
    public Record getByid(String id){
      return smsTempletService.getByid(id);
    }
}
