package com.jojowonet.modules.order.dao;

import com.google.common.collect.Lists;
import com.jfinal.plugin.activerecord.Db;
import com.jfinal.plugin.activerecord.Record;
import com.jojowonet.modules.order.entity.CrmOrder2017;
import com.jojowonet.modules.order.entity.Order;
import com.jojowonet.modules.order.utils.CrmUtils;
import com.jojowonet.modules.order.utils.SqlKit;
import com.jojowonet.modules.order.utils.StringUtil;
import ivan.common.persistence.BaseDao;
import ivan.common.persistence.Page;
import ivan.common.utils.StringUtils;
import org.springframework.stereotype.Repository;

import java.util.List;
import java.util.Map;

@Repository
public class Order2017Dao extends BaseDao<CrmOrder2017> {
    //待回访结算工单/历史工单
    public List<Record> getOrderWaitForDhf(Page<Record> page, String siteId, String status, Map<String, Object> map, List<String> cateList, List<String> brandList) {
        String table = getTable(map, cateList, brandList, siteId);
        StringBuffer sf = new StringBuffer();
        sf.append(" SELECT o.*, cb.service_attitude, cb.remarks as cbremarks,cod.dispatch_time, cod.id as dispId,cod.`status` as disp_status, cod.completion_result as completion_result,cod.drop_in_time,  ");
        sf.append("(SELECT f.name FROM `crm_order_mark_settings` AS f WHERE f.`id`=o.`flag`) AS flag,");
        sf.append("(SELECT f.feedback FROM `crm_order_feedback_2017` AS f WHERE f.`order_id`=o.`id` ORDER BY f.feedback_time DESC LIMIT 1) AS feedresult FROM " + table);
        sf.append(" left join crm_order_callback_2017 cb on cb.order_id = o.id and cb.site_id = '" + siteId + "' ");
        sf.append(" left join crm_order_dispatch_2017 cod on cod.order_id = o.id and cod.site_id = '" + siteId + "' and cod.status in ('1','2','4','5') ");
        sf.append(" WHERE o.site_id=? ");
        sf.append(" AND o.status <>'9' ");
        if(status == null) {
            status = "";
        }
        String[] statusx = null;
        if (StringUtil.isNotBlank(status)) {
            statusx = status.split(",");
        }
        if (statusx != null && statusx.length > 0) {
            sf.append(" AND o.status IN (" + StringUtil.joinInSql(statusx) + ") ");
        }

        sf.append(getOrderWholeCondition(map,siteId,cateList,brandList));
        sf.append(createOrderBy(map," ORDER BY o.create_time DESC,o.number desc"));
        if (page != null) {
            sf.append(" limit " + page.getPageSize() + " offset " + (page.getPageNo() - 1) * page.getPageSize());
        }
        return Db.find(sf.toString(), siteId);
    }

    public long getOrderWaitDhfCount(String siteId,String status,Map<String,Object> map,List<String> cateList,List<String> brandList){
        StringBuffer sf = new StringBuffer();
        sf.append(" SELECT count(*) as count FROM " + getTable(map, cateList, brandList, siteId));
        sf.append(" left join crm_order_dispatch_2017 cod on cod.order_id = o.id and cod.site_id = '"+siteId+"' and cod.status in ('1','2','4','5')");
        sf.append(" WHERE o.site_id=?  ");
//		if("3".equals(status)){
//			sf.append(" AND o.status IN ('3','4') ");
//		}else if("5".equals(status)){
//			sf.append(" AND o.status IN ('5','8') ");
//		}
        if(status == null) {
            status = "";
        }
        String[] statusx = null;
        if (StringUtil.isNotBlank(status)) {
            statusx = status.split(",");
        }
        if (statusx != null && statusx.length > 0) {
            sf.append(" AND o.status IN (" + StringUtil.joinInSql(statusx) + ") ");
        }

        sf.append(getOrderWholeCondition(map,siteId,cateList,brandList));
        return Db.queryLong(sf.toString(),siteId);
    }

    // 优化查询效率
    private String getTable(Map<String, Object> map, List<String> cateList, List<String> brandList, String siteId) {
        boolean hasLimitedOrders = false;
        if (!CrmUtils.isSite()) {
//			if (brandList != null && !StringUtil.checkParamsValid(map.get("applianceBrand"))) {
//				//设置类品牌并且查询的时候没有关联品牌，此时应该只显示登录人员关联的品牌。
//				hasLimitedOrders = true;
//			}
            if (cateList != null && !StringUtil.checkParamsValid(map.get("applianceCategory"))) {
                hasLimitedOrders = true;
            }
        }
        return (!hasLimitedOrders ? "crm_order_2017 o " : String.format("(select * from `crm_order_2017` a where a.`site_id` = '%s') as o ", siteId));
    }

    //待派工查询条件
    public String getOrderWholeCondition(Map<String,Object> map,String siteId,List<String> cateList,List<String> brandList){
        StringBuffer sf = new StringBuffer();
        if(StringUtil.checkParamsValid(map.get("number"))){//工单编号
            sf.append(" and o.number like '%"+(map.get("number"))+"%' ");
        }
        if(StringUtil.checkParamsValid(map.get("factorynumber"))){//厂家工单编号
            sf.append(" and o.factory_number like '%"+(map.get("factorynumber"))+"%' ");
        }
        if(StringUtil.checkParamsValid(map.get("pleaseReferMall"))){//购机商场
            sf.append(" and o.please_refer_mall like '%"+(map.get("pleaseReferMall"))+"%' ");
        }
        if(StringUtil.checkParamsValid(map.get("review"))){
            sf.append(" and o.review = '"+(map.get("review"))+"' ");
        }
        if(StringUtil.checkParamsValid(map.get("recordAccount"))){//是否录单
            sf.append(" and o.record_account = '"+(map.get("recordAccount"))+"' ");
        }
        if (StringUtil.checkParamsValid(map.get("customerName"))){
            sf.append(" and o.customer_name like '%"+(map.get("customerName"))+"%' ");
        }
        if(StringUtil.checkParamsValid(map.get("customerMobile"))){
            sf.append(" and (o.customer_mobile like '%"+(map.get("customerMobile"))+"%' or o.customer_telephone like '%"+map.get("customerMobile")+"%' or o.customer_telephone2 like '%"+map.get("customerMobile")+"%') ");
        }
        if(StringUtil.checkParamsValid(map.get("customerAddress"))){
            sf.append(" and o.customer_address like '%"+(map.get("customerAddress"))+"%' ");
        }

        if(!CrmUtils.isSite()){
            if (cateList == null) {
                // 说明没有设置品类
                if (StringUtil.checkParamsValid(map.get("applianceCategory"))) {
                    sf.append(" and o.appliance_category like '%" + (map.get("applianceCategory")) + "%' ");
                }
            } else {
                if (StringUtil.checkParamsValid(map.get("applianceCategory"))) {
                    sf.append(" and o.appliance_category='" + (map.get("applianceCategory")) + "' ");
                } else {
                    sf.append(" and o.appliance_category in (" + StringUtil.joinInSqlforllist(cateList) + ") ");
                }
            }

            if (brandList == null) {
                // 说明没有设置品牌
                if (StringUtil.checkParamsValid(map.get("applianceBrand"))) {
                    sf.append(" and o.appliance_brand like '%" + (map.get("applianceBrand")) + "%' ");
                }
            } else {
                if (StringUtil.checkParamsValid(map.get("applianceBrand"))) {
                    sf.append(" and o.appliance_brand='" + (map.get("applianceBrand")) + "' ");
                } else {
                    sf.append(" and o.appliance_brand in (" + StringUtil.joinInSqlforllist(brandList) + ") ");
                }
            }

//
//				if(StringUtil.checkParamsValid( map.get("applianceBrand"))){
//					sf.append(" and o.appliance_brand='"+(map.get("applianceBrand"))+"' ");
//				}else{
//					if(brandList!=null){
//						sf.append(" and o.appliance_brand in ("+StringUtil.joinInSqlforllist(brandList)+") ");
//					}
//				}
//				if(StringUtil.checkParamsValid(map.get("applianceCategory"))){
//					sf.append(" and o.appliance_category='"+(map.get("applianceCategory"))+"' ");
//				}else{
//					if(cateList!=null){
//						sf.append(" and o.appliance_category in ("+StringUtil.joinInSqlforllist(cateList)+") ");
//					}
//				}
        }else{
            if(StringUtil.checkParamsValid( map.get("applianceBrand"))){
                sf.append(" and o.appliance_brand like '%"+(map.get("applianceBrand"))+"%' ");
            }
            if(StringUtil.checkParamsValid(map.get("applianceCategory"))){
                sf.append(" and o.appliance_category like '%"+(map.get("applianceCategory"))+"%' ");
            }
        }


        if(StringUtil.checkParamsValid(map.get("serviceType"))){
            sf.append(" and o.service_type = '"+(map.get("serviceType"))+"' ");
        }
        if(StringUtil.checkParamsValid(map.get("origin"))){
            sf.append(" and o.origin = '"+(map.get("origin"))+"' ");
        }
        if(StringUtil.checkParamsValid(map.get("orderType"))){
            sf.append(" and o.order_type = '"+(map.get("orderType"))+"' ");
        }
        if(StringUtil.checkParamsValid(map.get("remarks"))){
            sf.append(" and o.remarks  like '%"+(map.get("remarks"))+"%' ");
        }
        if(StringUtil.checkParamsValid(map.get("warrantyType"))){
            sf.append(" and o.warranty_type = '"+(map.get("warrantyType"))+"' ");
        }
        if(StringUtil.checkParamsValid(map.get("promiseTime"))){
            sf.append(" and o.promise_time = '"+(map.get("promiseTime"))+"' ");
        }

        if(StringUtil.checkParamsValid(map.get("level"))){
            sf.append(" and o.level = '"+(map.get("level"))+"' ");
        }
        if(StringUtil.checkParamsValid((map.get("messengerName")))){//登记人
//			sf.append(" and o.messenger_name like '%"+(map.get("messengerName"))+"%' ");
            SqlKit kit = new SqlKit()
                    .append("and exists(")
                    .append("select 1 from (")
                    .append("select user_id as id, name from crm_site")
                    .append("union all")
                    .append("select user_id as id, name from crm_non_serviceman")
                    .append(") as t")
                    .append("where t.id=o.create_by and t.name like '%" + map.get("messengerName") + "%'")
                    .append(")");

            sf.append(" ").append(kit.toString());
        }
        if(StringUtil.checkParamsValid((map.get("serviceMode")))){//
            sf.append(" and o.service_mode like '%"+(map.get("serviceMode"))+"%' ");
        }
        if(StringUtil.checkParamsValid(map.get("statuss"))){
            String[] status=((map.get("statuss").toString())).split(",");
            if(status.length>0) {
                sf.append(" and o.status in (" + StringUtil.joinInSql(status) + ") ");
            }
        }
        if(StringUtil.checkParamsValid(map.get("secondSite"))){
            String[] secondSites=((map.get("secondSite").toString())).split(",");
            if(secondSites.length>0) {
                sf.append(" and o.site_id in (" + StringUtil.joinInSql(secondSites) + ") ");
            }
        }
        //工单收费
        if(StringUtil.checkParamsValid(map.get("ifReceipt"))){
            if("0".equals(map.get("ifReceipt"))){//收费的工单
                sf.append(" and (serve_cost >0 or auxiliary_cost>0 or warranty_cost>0) ");
            }else{//未收费的工单
                sf.append(" and (serve_cost <=0 or auxiliary_cost<=0 or warranty_cost<=0) ");
            }
        }
        if(StringUtil.checkParamsValid(map.get("statusFlag"))){//工单状态
            String stat[]=((map.get("statusFlag").toString())).split(",");
            List<String> flg=Lists.newArrayList();//待备件/缺件中 fintting_flag字段
            List<String> statuss=Lists.newArrayList();//status字段
            for(int i=0;i<stat.length;i++){
                if(stat[i].equals("1")){
                    statuss.add(stat[i]);
                }else if(stat[i].equals("2")){
                    statuss.add(stat[i]);
                }else if(stat[i].equals("4")){
                    statuss.add(stat[i]);
                }else if(stat[i].equals("5")){
                    flg.add(stat[i]);
                }else if(stat[i].equals("6")){
                    flg.add(stat[i]);
                }
            }
            for(int k=0;k<flg.size();k++){
                if(flg.get(k).equals("5")){
                    flg.set(k,"1");
                }else if(flg.get(k).equals("6")){
                    flg.set(k,"2");
                }
            }
            if(flg.size()>0 && statuss.size()==0){//只有fintting_flag
                if(flg.size()==1){
                    sf.append(" and o.fitting_flag='"+flg.get(0)+"' ");
                }else if(flg.size()>1){
                    for(int i=0;i<flg.size();i++){
                        if(i==0){
                            sf.append(" and (o.fitting_flag='"+flg.get(i)+"' ");
                            continue;
                        }else if(i>0 && i<flg.size()-1){
                            sf.append(" or o.fitting_flag='"+flg.get(i)+"' ");
                            continue;
                        }else if(i==flg.size()-1){
                            sf.append(" or o.fitting_flag='"+flg.get(i)+"') ");
                            continue;
                        }

                    }
                }
            }else if(flg.size()>0 && statuss.size()>0){
                if(statuss.size()==1 && flg.size()>1){
                    if(statuss.get(0).equals("4")){
                        sf.append(" and (d.status = '4' ");
                    }else{
                        sf.append(" and (d.status='"+statuss.get(0)+"' ");
                    }
                    for(int i=0;i<flg.size();i++){
                        if(i==0){
                            sf.append(" or o.fitting_flag='"+flg.get(i)+"' ");
                            continue;
                        }else if(i>0 && i<flg.size()-1){
                            sf.append(" or o.fitting_flag='"+flg.get(i)+"' ");
                            continue;
                        }else if(i==flg.size()-1){
                            sf.append(" or o.fitting_flag='"+flg.get(i)+"') ");
                            continue;
                        }

                    }
                }else if(statuss.size()>1 && flg.size()==1){
                    for(int j=0;j<statuss.size();j++){
                        if(j==0){
                            if(statuss.get(j).equals("4")){
                                sf.append(" and (d.status = '4' ");
                                continue;
                            }else{
                                sf.append(" and (d.status='"+statuss.get(j)+"' ");
                                continue;
                            }
                        }
                        if(j>0 && j<(statuss.size()-1)){
                            if(statuss.get(j).equals("4")){
                                sf.append(" or d.status = '4' ");
                                continue;
                            }else{
                                sf.append(" or d.status='"+statuss.get(j)+"' ");
                                continue;
                            }
                        }
                        if(j==(statuss.size()-1)){
                            if(statuss.get(j).equals("4")){
                                sf.append(" or d.status = '4'  ");
                                continue;
                            }else{
                                sf.append(" or d.status='"+statuss.get(j)+"' ");
                                continue;
                            }
                        }
                    }
                    sf.append(" or d.status='"+statuss.get(0)+"') ");
                }else if(statuss.size()==1 && flg.size()==1){
                    if(statuss.get(0).equals("4")){
                        sf.append(" and (d.status = '4' ");
                    }else{
                        sf.append(" and (d.status='"+statuss.get(0)+"' ");
                    }
                    sf.append(" or o.fitting_flag='"+flg.get(0)+"') ");
                }else if(statuss.size()>1 && flg.size()>1){
                    for(int j=0;j<statuss.size();j++){
                        if(j==0){
                            if(statuss.get(j).equals("4")){
                                sf.append(" and (d.status = '4' ");
                                continue;
                            }else{
                                sf.append(" and (d.status='"+statuss.get(j)+"' ");
                                continue;
                            }
                        }
                        if(j>0 && j<(statuss.size()-1)){
                            if(statuss.get(j).equals("4")){
                                sf.append(" or d.status = '4' ");
                                continue;
                            }else{
                                sf.append(" or d.status='"+statuss.get(j)+"' ");
                                continue;
                            }
                        }
                        if(j==(statuss.size()-1)){
                            if(statuss.get(j).equals("4")){
                                sf.append(" or d.status = '4' ) ");
                                continue;
                            }else{
                                sf.append(" or d.status='"+statuss.get(j)+"' )");
                                continue;
                            }

                        }
                    }
                }
            }
            else if(flg.size()==0 && statuss.size()>0){
                if(statuss.size()==1){
                    if(statuss.get(0).equals("4")){
                        sf.append(" and (d.status = '4' )");
                    }else{
                        sf.append(" and (d.status='"+statuss.get(0)+"' )");
                    }
                }else if(statuss.size()>1){
                    for(int j=0;j<statuss.size();j++){
                        if(j==0){
                            if(statuss.get(j).equals("4")){
                                sf.append(" and (d.status = '4' ");
                                continue;
                            }else{
                                sf.append(" and (d.status='"+statuss.get(j)+"' ");
                                continue;
                            }
                        }
                        if(j>0 && j<(statuss.size()-1)){
                            if(statuss.get(j).equals("4")){
                                sf.append(" or d.status = '4' ");
                                continue;
                            }else{
                                sf.append(" or d.status='"+statuss.get(j)+"' ");
                                continue;
                            }
                        }
                        if(j==(statuss.size()-1)){
                            if(statuss.get(j).equals("4")){
                                sf.append(" or d.status = '4' ) ");
                                continue;
                            }else{
                                sf.append(" or d.status='"+statuss.get(j)+"') ");
                                continue;
                            }

                        }
                    }
                }
            }else{
                sf.append(" and d.status='100' ");
            }

        }
        if(StringUtil.checkParamsValid(map.get("employeNames"))){//服务工程师
            String[] emps=((map.get("employeNames").toString())).split(",");
            sf.append(" and ( ");
            for(int i=0;i<emps.length;i++){
                if(i==0){
                    sf.append(" o.employe_name like '%"+emps[i]+"%' ");
                }else{
                    sf.append(" or o.employe_name like '%"+emps[i]+"%' ");
                }
            }
            sf.append(" ) ");
        }
        if(StringUtil.checkParamsValid(map.get("whetherCollection"))){//交款
            sf.append(" and o.whether_collection = '"+( map.get("whetherCollection"))+"' ");
        }
        if (StringUtil.checkParamsValid(map.get("returnCard"))) {//交单
            String returnCard = (String) map.get("returnCard");
            Object fromWxgdListQuery = map.get("__WXGDList");
            if (fromWxgdListQuery == null) {
                if (!"1".equals(returnCard)) {
                    sf.append(" and (o.return_card in ('0','2') or o.return_card is null) and o.status in('3','4','5') ");
                } else {
                    sf.append(" and o.return_card = '1' and o.status in('3','4','5') ");
                }
            }else{
                if (!"1".equals(returnCard)) {
                    sf.append(" and (o.return_card in ('0','2') or o.return_card is null) and o.status in('5','8')");
                } else {
                    sf.append(" and o.return_card = '1' and o.status in('5','8') ");
                }
            }
        }

        if(StringUtil.checkParamsValid(map.get("repairTimeMin"))){//报修时间
            if(((String)map.get("repairTimeMin")).matches("^(\\d{4})-([0-1]\\d)-([0-3]\\d)\\s([0-5]\\d):([0-5]\\d):([0-5]\\d)$")){
                sf.append(" and o.repair_time >= '"+(map.get("repairTimeMin"))+"'  ");
            }else{
                sf.append(" and o.repair_time >= '"+(map.get("repairTimeMin"))+"'  ");
            }
        }
        if(StringUtil.checkParamsValid(map.get("repairTimeMax"))){
            if(((String)map.get("repairTimeMax")).matches("^(\\d{4})-([0-1]\\d)-([0-3]\\d)\\s([0-5]\\d):([0-5]\\d):([0-5]\\d)$")){
                sf.append(" and o.repair_time <= '"+(map.get("repairTimeMax"))+"' ");
            }else{
                sf.append(" and o.repair_time <= '"+(map.get("repairTimeMax"))+"' ");
            }
        }


        if(StringUtil.checkParamsValid(map.get("createTimeMin"))){//接入时间
            sf.append(" and o.create_time >= '"+(map.get("createTimeMin"))+"' ");
        }
        if(StringUtil.checkParamsValid(map.get("createTimeMax"))){
            sf.append(" and o.create_time <= '"+(map.get("createTimeMax"))+"' ");
        }

        if(StringUtil.checkParamsValid(map.get("dispatchTimeMin"))){//派工时间
            if(((String)map.get("dispatchTimeMin")).matches("^(\\d{4})-([0-1]\\d)-([0-3]\\d)\\s([0-5]\\d):([0-5]\\d):([0-5]\\d)$")){
                sf.append(" and cod.dispatch_time >= '"+(map.get("dispatchTimeMin"))+"' ");
            }else{
                sf.append(" and cod.dispatch_time >= '"+(map.get("dispatchTimeMin"))+"' ");
            }
        }
        if(StringUtil.checkParamsValid(map.get("dispatchTimeMax"))){
            if(((String)map.get("dispatchTimeMax")).matches("^(\\d{4})-([0-1]\\d)-([0-3]\\d)\\s([0-5]\\d):([0-5]\\d):([0-5]\\d)$")){
                sf.append(" and cod.dispatch_time <= '"+(map.get("dispatchTimeMax"))+"' ");
            }else{
                sf.append(" and cod.dispatch_time <= '"+(map.get("dispatchTimeMax"))+"' ");
            }
        }
        if(StringUtil.checkParamsValid(map.get("alertDateMin"))){//标记时间
            if(((String)map.get("alertDateMin")).matches("^(\\d{4})-([0-1]\\d)-([0-3]\\d)\\s([0-5]\\d):([0-5]\\d):([0-5]\\d)$")){
                sf.append(" and o.flag_alert_date >= '"+(map.get("alertDateMin"))+"' ");
            }else{
                sf.append(" and o.flag_alert_date >= '"+(map.get("alertDateMin"))+"' ");
            }
        }
        if(StringUtil.checkParamsValid(map.get("alertDateMax"))){
            if(((String)map.get("alertDateMax")).matches("^(\\d{4})-([0-1]\\d)-([0-3]\\d)\\s([0-5]\\d):([0-5]\\d):([0-5]\\d)$")){
                sf.append(" and o.flag_alert_date <= '"+(map.get("alertDateMax"))+"' ");
            }else{
                sf.append(" and o.flag_alert_date <= '"+(map.get("alertDateMax"))+"' ");
            }
        }

        if(StringUtil.checkParamsValid(map.get("endTimeMin"))){
            if(((String)map.get("endTimeMin")).matches("^(\\d{4})-([0-1]\\d)-([0-3]\\d)\\s([0-5]\\d):([0-5]\\d):([0-5]\\d)$")){
                sf.append(" and o.end_time >= '"+(map.get("endTimeMin"))+"' ");
            }else{
                sf.append(" and o.end_time >= '"+(map.get("endTimeMin"))+"' ");
            }
        }
        if(StringUtil.checkParamsValid(map.get("endTimeMax"))){
            if(((String)map.get("endTimeMax")).matches("^(\\d{4})-([0-1]\\d)-([0-3]\\d)\\s([0-5]\\d):([0-5]\\d):([0-5]\\d)$")){
                sf.append(" and o.end_time <= '"+(map.get("endTimeMax"))+"' ");
            }else{
                sf.append(" and o.end_time <= '"+(map.get("endTimeMax"))+"' ");
            }
        }
        if(StringUtil.checkParamsValid(map.get("recordDateMin"))){//标记时间
            if(((String)map.get("recordDateMin")).matches("^(\\d{4})-([0-1]\\d)-([0-3]\\d)\\s([0-5]\\d):([0-5]\\d):([0-5]\\d)$")){
                sf.append(" and o.record_account_time >= '"+(map.get("recordDateMin"))+"' ");
            }else{
                sf.append(" and o.record_account_time >= '"+(map.get("recordDateMin"))+"' ");
            }
        }
        if(StringUtil.checkParamsValid(map.get("recordDateMax"))){
            if(((String)map.get("recordDateMax")).matches("^(\\d{4})-([0-1]\\d)-([0-3]\\d)\\s([0-5]\\d):([0-5]\\d):([0-5]\\d)$")){
                sf.append(" and o.record_account_time <= '"+(map.get("recordDateMax"))+"' ");
            }else{
                sf.append(" and o.record_account_time <= '"+(map.get("recordDateMax"))+"' ");
            }
        }
        if(StringUtil.checkParamsValid(map.get("elictrictyBarcode"))){
            sf.append(" and ( o.appliance_barcode like '%"+( map.get("elictrictyBarcode"))+"%' or o.appliance_machine_code like '%"+( map.get("elictrictyBarcode"))+"%' )  ");
        }
        if(StringUtil.checkParamsValid(map.get("applianceModel"))){
            sf.append(" and  o.appliance_model like '%"+( map.get("applianceModel"))+"%'   ");
        }
        if(StringUtil.checkParamsValid(map.get("signType"))){
            String str[]=map.get("signType").toString().split(",");
            sf.append(" and o.flag in (" + StringUtil.joinInSql(str) + ")");
        }

        if(StringUtil.checkParamsValid(map.get("isPrintSrue"))){
            Integer num=Integer.parseInt(map.get("isPrintSrue").toString());
            if(num==0){
                sf.append(" and o.print_times=0 ");
            }else{
                sf.append(" and o.print_times != 0 ");
            }
        }

        return sf.toString();
    }

    //表头排序
    private String createOrderBy(Map<String, Object> map, String defaultOrderBy) {
        String sort = null;
        String dir = null;
        if (map.get("sidx") != null) {
            if (StringUtils.isNotBlank(map.get("sidx").toString())) {
                if ("end_time".equals(map.get("sidx").toString())) {
                    sort = " o.end_time ";
                } else {
                    sort = map.get("sidx").toString();
                }
            }
        }
        if (map.get("sord") != null) {
            if (StringUtils.isNotBlank(map.get("sord").toString())) {
                dir = map.get("sord").toString();
            }
        }

        String result = defaultOrderBy;
        if (map.get("sidx") != null) {
            if ("end_time".equals(map.get("sidx").toString())) {
                result = (StringUtils.isNotBlank(sort) && StringUtils.isNotBlank(dir)) ? (" order by " + sort + " " + dir) : defaultOrderBy;
            } else {
                result = (StringUtils.isNotBlank(sort) && StringUtils.isNotBlank(dir)) ? (" order by `" + sort + "` " + dir) : defaultOrderBy;
            }
        }

        return result;
    }

}
