package com.jojowonet.modules.order.service;




import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.TreeMap;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.google.common.collect.Lists;
import com.jfinal.plugin.activerecord.Db;
import com.jfinal.plugin.activerecord.Record;
import com.jojowonet.modules.order.dao.CategoryDao;
import com.jojowonet.modules.order.entity.Brand;
import com.jojowonet.modules.order.entity.Category;
import com.jojowonet.modules.order.utils.CategoryUtils;
import com.jojowonet.modules.order.utils.CrmUtils;
import com.jojowonet.modules.order.utils.SqlKit;

import ivan.common.persistence.Page;
import ivan.common.service.BaseService;
import ivan.common.utils.StringUtils;
import ivan.common.utils.UserUtils;

@Service(value = "CategoryService")
@Transactional(readOnly = true)
public class CategoryService extends BaseService {

	@Autowired
	private CategoryDao categoryDao;
	
	public String getCategoryNameById(String id){
		return categoryDao.getCategoryNameById(id);
	}

	public List<Category> findAll() {
		return CategoryUtils.getCategoryList();
	}

	public List<Category> findAllList() {
		return CategoryUtils.getCategoryList();
	}

	public List<Category> getUnselCat() {
		List<Record> rds = categoryDao.getUnselCat();
		List<Category> list = Lists.newArrayList();
		for(Record r : rds){
			Category c = new Category();
			c.setId(r.getInt("id"));
			c.setName(r.getStr("name"));
			list.add(c);
		}
		return list;
	}

	/**
	 * Save modify.
	 *
	 * @param category the category
	 * @return true, if successful
	 */
	@Transactional(readOnly = false)
	public boolean saveModify(Category category)
	{
		if(category != null)
		{
			//获取id
			Integer id = category.getId();
			if(id == null)//新增的
			{
				//要判断是否已经存在同名的
				Category same = categoryDao.getByName(category.getName());
				if(same != null)//已经存在，则不保存
				{}
				else//不存在，才保存
					categoryDao.save(category);
			}
			else//修改的
			{
				categoryDao.updateCategory(category);
			}
		}
		return true;
	}

	public Category get(Integer id) {
		return categoryDao.get(id);
	}
	
    public Page<Record> findCategory(Page<Record> page) {
        List<Record> list =categoryDao.getListCategory(page);
        long count = categoryDao.getListcount();
        page.setCount(count);
        page.setList(list);
        return page;
    }
    
    public Page<Record> getSeviceCategoryList(Page<Record> page,String siteId) {
		List<Record> list = categoryDao.getServiceCategoryList(page,siteId);
		Long count = categoryDao.getListcountforca(siteId);
    	page.setList(list);
    	page.setCount(count);
    	return page;
	}
    
    public Boolean getQueryNum(String name,String siteId) {
		String sql = "SELECT * FROM crm_category WHERE name='"+name+"' AND (site_id='"+siteId+"' OR site_id='')";
		List <Record> list = Db.find(sql);
		return !(list.size()>0);
	}
    
    @Transactional(readOnly=false)
	public void save(Category category,String siteId){
		if(category.getId()==null){
			category.setCreateTime(new Date());
			category.setSiteId(siteId);
			categoryDao.save(category);
		}else{
			categoryDao.updateServiceMode(category);
		}
	}
    
	@Transactional(readOnly = false)
	public void delete1(String id) {
		categoryDao.delete1(id);
	}
	
	@Transactional(readOnly = false)
	public String delete(String id) {
		String turn=categoryDao.delete(id);
		return turn;
	}

	
	public Category getCate(Integer integer) {
		Record rec = Db.findFirst("SELECT * FROM crm_category WHERE del_flag='0' AND id='"+integer+"'");
		Category cate = new Category();
		cate.setCreateTime(rec.getDate("create_time"));
		cate.setDelFlag(rec.getStr("del_flag"));
		cate.setId(rec.getInt("id"));
		cate.setImg(rec.getStr("img"));
		cate.setName(rec.getStr("name"));
		cate.setSort(rec.getInt("sort"));
		cate.setSiteId(rec.getStr("site_id"));;
		return cate;
	}
	
	public Boolean saveEdit(Integer rowId,String namee,String sortt){
		StringBuffer sf = new StringBuffer();
		String rId = rowId.toString();
		if("".equals(sortt)){
			 sf.append("UPDATE crm_category SET name='"+namee+"',sort=0 WHERE id='"+rId+"'");
		}else{
		    sf.append("UPDATE crm_category SET name='"+namee+"',sort='"+sortt+"' WHERE id='"+rId+"'");
		}
	   
		Db.update(sf.toString());
        return true;
	}
	
	 @Transactional(readOnly=false)
		public String addSave(String userId,String siteId,String[] sorts,String[] names){
		 List<Category> list = Lists.newArrayList();
		 String[] Strings = queryName(); 
		 if(names.length<1){
			 return "2";//为空 
		 }else{
			 for(int j=0;j<Strings.length;j++){
				 for(int i=0;i<names.length;i++){
					 if((Strings[j].trim()).equals(names[i].trim())){
						 return names[i];//重复
					 }
				 }
			 }
		 }
		 for(int i=0;i<names.length;i++){
			 Category category = new Category();
			 category.setCreateTime(new Date());
			 if(sorts.length!=0){
				 Integer st=0;
				 if(sorts[i].length()!=0||sorts[i]!=""){
					st = Integer.valueOf(sorts[i]);
					 category.setSort(st);
				 }else{
					 category.setSort(st);
				 }
			 }
		
			 
			 category.setName(names[i]);;
			 category.setSiteId(siteId);
			 category.setCreateBy(userId);
			 list.add(category);
		 }	 
		 categoryDao.save(list);
		return "0";	 
		}
	 
	 public String[] queryName(){
		 String siteId = CrmUtils.getCurrentSiteId(UserUtils.getUser());
		 String sql =  "SELECT a.name FROM crm_category a WHERE del_flag='0' AND (a.site_id='' OR a.site_id='"+siteId+"')";
		 List<Record> rds = Db.find(sql);
		 List<String> list = Lists.newArrayList();
		 for(Record record : rds){
		        String name = record.getStr("name");
		        	list.add(name);
		        }
		        String strArray[] = new String[list.size()];
		        list.toArray(strArray);
		 return strArray;
			
		}
	 
	 public List<Category> getSiteBrandRelList(String siteId){
		List<Category> list = new ArrayList<>();
		List<Record> records = categoryDao.getSiteBrandRelList(siteId);
		for(Record r : records){
			Category category =new Category();
			 category.setName(r.getStr("name"));
			 category.setCreateBy(r.getStr("creeate_by"));;
			 category.setCreateTime(r.getDate("create_time"));
			 category.setDelFlag(r.getStr("del_flag"));
			 category.setId(r.getInt("id"));
			 category.setImg(r.getStr("img"));
			 category.setSiteId(r.getStr("site_id"));
			 category.setSort(r.getInt("sort"));
			 
			list.add(category);
		}
		return list;
	}

	 public List<Map<String, Object>> getCategoryBrandRelList(String siteId) {
		 List<Map<String, Object>> ret = new ArrayList<>();
		 SqlKit sqlKit = new SqlKit()
		 
			.append(" SELECT c.id AS category_id,c.`name` AS category_name, b.id AS brand_id ,b.`name` AS brand_name FROM crm_category c ")
			.append(" LEFT JOIN  crm_site_brand_rel sc ON sc.category_id=c.id AND sc.site_id =? ")
			.append(" LEFT JOIN crm_brand b ON b.id=sc.brand_id ")
			.append("  WHERE 1=1 AND c.site_id=? AND c.del_flag='0'")
			.append("  ORDER BY c.sort ASC  ");

//		        .append(" SELECT a.`category_id`, b.`name` AS category_name, a.`brand_id`, c.`name` AS brand_name, c.`sort`  ")
//				.append(" FROM crm_site_brand_rel a ")
//				.append(" LEFT JOIN crm_category b ON a.`category_id` = b.`id` ")
//				.append(" LEFT JOIN crm_brand c ON a.`brand_id` = c.`id` ")
//				.append(" WHERE a.`site_id` = ? AND b.`del_flag` = 0 ")
//				.append(" ORDER BY c.`sort` ");
		List<Record> queryResult = Db.find(sqlKit.toString(), siteId, siteId);
		
		Map<Integer, Map<String, Object>> categoryMapper = getCategory(queryResult);
		for(Record r : queryResult) {
			Integer cid = r.getInt("category_id");
			Integer bid = r.getInt("brand_id");
			String bname = r.getStr("brand_name");
			Map<String, Object> map = categoryMapper.get(cid);//先根据cid定位到那个子集
			Brand brand = new Brand();
			brand.setName(bname);
			brand.setId(bid);
			ArrayList<Brand> brands = (ArrayList<Brand>) map.get("brands");//在定位到brands
			if(StringUtils.isNotEmpty(bname) && bid != null){
				brands.add(brand);
			}
		}
		ret.addAll(categoryMapper.values());
		return ret;
	 }
	 
	 private Map<Integer, Map<String, Object>> getCategory(List<Record> records) {
		 Map<Integer, Map<String, Object>> ret = new TreeMap<>();
		 for(Record r : records) {
			Integer categoryId = r.getInt("category_id");
			String cname = r.getStr("category_name");
			if(!ret.containsKey(categoryId)) {
				HashMap<String, Object> tMap = new HashMap<>();
				tMap.put("cid", categoryId);
				tMap.put("cname", cname);
				tMap.put("brands", new ArrayList<>());
				ret.put(categoryId, tMap);
			}
		 }
		return ret;
	 }
	 
	 public Boolean delSiteBrandRelList( String siteId, Integer cid, Integer bid){
		 String sql = "DELETE FROM crm_site_brand_rel WHERE site_id='"+siteId+"' AND category_id='"+cid+"' AND brand_id='"+bid+"'";
		 Db.update(sql);
		 return true;
	 }
	 
	 /*
	  * 服务商添加自己的品类关联哪些品牌
	  */
	 public List<Record> queryBrandname(Integer cid,String queryname, String siteId){
		 StringBuffer sql = new StringBuffer();
		 sql.append("select a.name, a.id from crm_brand a where a.del_flag = '0' ");
//		 sql.append("SELECT DISTINCT a.brand_id,b.name FROM crm_category_brand_rel a  LEFT JOIN crm_brand b ON a.brand_id=b.id WHERE  (a.category_id='"+cid+"' ");
		 
		if(StringUtils.isNotEmpty(queryname)){
			sql.append("and a.name LIKE '%"+queryname.trim()+"%' ");
		}
		sql.append("ORDER BY sort ASC ");
		
		return Db.find(sql.toString());
	 }
	 
	 
	 public Boolean saveBrand(String siteId, Integer cid, String[] IdVals) {

		 // 删除网点当前的品牌和品类关系
		 StringBuffer sql2 = new StringBuffer();
		 sql2.append("DELETE FROM crm_site_brand_rel WHERE site_id = ? AND category_id = ?");
		 Db.update(sql2.toString(), siteId, cid);
		 
		 // 新增网点的品牌品类关系
		 StringBuffer sql1 = new StringBuffer();
		 sql1.append("INSERT INTO crm_site_brand_rel (category_id,site_id,brand_id) VALUES (?,?,?)");
		 for(int i=0;i<IdVals.length;i++){
			 Db.update(sql1.toString(),cid,siteId,IdVals[i]);
		 }
		 return true;
	}
	 
	 public Integer[] queryBycid(String siteId,Integer cid){
		 List<Record> records = Db.find("SELECT * FROM crm_site_brand_rel WHERE site_id = '"+siteId+"' AND category_id='"+cid+"'");
		 List<Integer> list1 = new ArrayList<>();
		 for(Record r : records){
			 Integer bId = r.getInt("brand_id");
			 list1.add(bId);
		 }
		 Integer list[] = new Integer[list1.size()];
         list1.toArray(list);
	      return list;  
	 }

	public String querycatebyname(String catename, String siteId) {
		String name="";
	Record cate=Db.findFirst("SELECT * FROM crm_category WHERE name='"+catename+"' AND site_id='"+siteId+"' AND del_flag=0");
	if(cate!=null){
		name=cate.getStr("name");
	}
		return name;
	}

	public Integer querysortbyname(String catename) {
		Integer sort=null;
		Record cate=categoryDao.querysortbyname(catename);
		if(cate!=null){
			sort=cate.getInt("sort");
		}
		return sort;
	}

	public void save(Category cate) {
		categoryDao.save(cate);
		
	}

	public Record selectcatebyid(String namee, String siteId, Integer rowId) {
		String sql="SELECT * FROM crm_category WHERE name='"+namee+"' AND site_id='"+siteId+"' AND id!='"+rowId+"' AND del_flag='0'";
		return Db.findFirst(sql);
		
	}
}
