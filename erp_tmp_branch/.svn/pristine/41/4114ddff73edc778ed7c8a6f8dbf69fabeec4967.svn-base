/**
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 */
package com.jojowonet.modules.sys.web;

import ivan.common.config.Global;
import ivan.common.entity.mysql.common.Menu;
import ivan.common.entity.mysql.common.User;
import ivan.common.service.SystemService;
import ivan.common.utils.StringUtils;
import ivan.common.utils.UserUtils;
import ivan.common.web.BaseController;

import java.io.IOException;
import java.io.PrintWriter;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import net.sf.json.JSONObject;

import org.apache.shiro.authz.annotation.RequiresPermissions;
import org.apache.shiro.authz.annotation.RequiresUser;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.servlet.mvc.support.RedirectAttributes;

import com.google.common.collect.Lists;
import com.google.common.collect.Maps;
import com.jojowonet.modules.operate.service.SiteService;
import com.jojowonet.modules.order.entity.MenuVo;
import com.jojowonet.modules.sys.util.AuthUtils;

/**
 * 菜单Controller
 * @version 2013-3-23
 */
@Controller
@RequestMapping(value = "${adminPath}/sys/menu")
public class MenuController extends BaseController {

	@Autowired
	private SystemService systemService;
	@Autowired
	private SiteService siteService;
	
/*
	public static final List<Map<String, String>> topMenuList = Lists.newArrayList();
	static {
		Map<String, String> payMap = new HashMap<String, String>();
		payMap.put("id", "1");
		payMap.put("name", "")
	}*/
	
	@ModelAttribute("menu")
	public Menu get(@RequestParam(required=false) String id) {
		if (StringUtils.isNotBlank(id)){
			return systemService.getMenu(id);
		}else{
			return new Menu();
		}
	}

//	@RequiresPermissions("sys:menu:view")
	@RequestMapping(value = {"list", ""})
	public String list(Model model) {
		List<Menu> list = Lists.newArrayList();
		List<Menu> sourcelist = systemService.findAllMenu();
		if (UserUtils.getUser().isAdmin()) {
			sourcelist = UserUtils.getAllMenuList();
		} else {
			sourcelist = UserUtils.getMenuList();
		}
		Menu.sortList(list, sourcelist, "1");
        model.addAttribute("list", list);
 /*       for(Menu m : list){
        	System.out.println(m.getName()+"href:"+m.getHref());
        }*/
		return "modules/jojowonet/menuList";
	}

//	@RequiresPermissions("sys:menu:view")
	@RequestMapping(value = "form")
	public String form(Menu menu, Model model) {
		if (menu.getParent()==null||menu.getParent().getId()==null){
			menu.setParent(new Menu("1"));
		}
		menu.setParent(systemService.getMenu(menu.getParent().getId()));
		model.addAttribute("menu", menu);
		return "modules/jojowonet/menuForm";
	}
	
//	@RequiresPermissions("sys:menu:edit")
	@RequestMapping(value = "save")
	public String save(Menu menu, Model model, RedirectAttributes redirectAttributes) {
		if(Global.isDemoMode()){
			addMessage(redirectAttributes, "演示模式，不允许操作！");
			return "redirect:"+Global.getAdminPath()+"/sys/menu/";
		}
		if (!beanValidator(model, menu)){
			return form(menu, model);
		}
		systemService.saveMenu(menu);
		AuthUtils.initPageMenus();
		addMessage(redirectAttributes, "保存菜单'" + menu.getName() + "'成功");
		return "redirect:"+Global.getAdminPath()+"/sys/menu/";
	}
	
//	@RequiresPermissions("sys:menu:edit")
	@RequestMapping(value = "delete")
	public String delete(String id, RedirectAttributes redirectAttributes) {
		if(Global.isDemoMode()){
			addMessage(redirectAttributes, "演示模式，不允许操作！");
			return "redirect:"+Global.getAdminPath()+"/sys/menu/";
		}
		if (Menu.isRoot(id)){
			addMessage(redirectAttributes, "删除菜单失败, 不允许删除顶级菜单或编号为空");
		}else{
			systemService.deleteMenu(id);
			addMessage(redirectAttributes, "删除菜单成功");
		}
		AuthUtils.initPageMenus();
		return "redirect:"+Global.getAdminPath()+"/sys/menu/";
	}

	@RequiresUser
	@RequestMapping(value = "tree")
	public void tree(	HttpServletRequest request, 
			HttpServletResponse response, 
			Model model,
			RedirectAttributes redirectAttributes
			) 
	{
		PrintWriter write ;
		
		//获取parentid和childid
		String parentid = request.getParameter("parentId");
		String childid = request.getParameter("childId");
		model.addAttribute("parentid", parentid);
		model.addAttribute("childid", childid);
		List<MenuVo> cmlist = new ArrayList<MenuVo>();
		List<Menu> cmList = Lists.newArrayList();
		for(Menu m : UserUtils.getMenuList()){
			if(StringUtils.isNotBlank(parentid) && m.getParent() != null 
					&& parentid.equalsIgnoreCase(m.getParent().getId())){
				cmList.add(m);
			}
		}
		for(Menu m : cmList){
			MenuVo mv = new MenuVo();
			mv.setMenuId(m.getId());
			mv.setHref(m.getHref());
			mv.setIcon(m.getIcon());
			mv.setIsActiviti(m.getIsActiviti());
			mv.setName(m.getName());
			mv.setParentIds(m.getParentIds());
				cmlist.add(mv);	
		}
		
		//将lists转换成json
		JSONObject obj = new JSONObject();
		obj.accumulate("cmlist", cmlist);
		obj.accumulate("isAdmin", UserUtils.getUser().isAdmin());
		try {
			write = response.getWriter();
			write.print(obj);
		} catch (IOException e) {
			e.printStackTrace();
		}
	}
	
	/**
	 * 同步工作流权限数据
	 */
	@RequiresPermissions("sys:menu:edit")
	@RequestMapping(value = "synToActiviti")
	public String synToActiviti(RedirectAttributes redirectAttributes) {
		if(Global.isDemoMode()){
			addMessage(redirectAttributes, "演示模式，不允许操作！");
			return "redirect:"+Global.getAdminPath()+"/sys/menu/";
		}
		//systemService.synToActiviti();
    	addMessage(redirectAttributes, "同步工作流权限数据成功!");
		return "redirect:"+Global.getAdminPath()+"/sys/menu/";
	}
	
	private String getCurrentSiteId() {
		User user = UserUtils.getUser();
		String Id = null;

		if (User.USER_TYPE_SIT.equals(user.getUserType())) {
			Id = siteService.findSiteIdByUserId(user.getId());
		}
		return Id;
	}
	
	/**
	 * 批量修改菜单排序
	 */
	@RequiresPermissions("sys:menu:edit")
	@RequestMapping(value = "updateSort")
	public String updateSort(String[] ids, Integer[] sorts, RedirectAttributes redirectAttributes) {
		if(Global.isDemoMode()){
			addMessage(redirectAttributes, "演示模式，不允许操作！");
			return "redirect:"+Global.getAdminPath()+"/sys/menu/";
		}
    	int len = ids.length;
    	Menu[] menus = new Menu[len];
    	for (int i = 0; i < len; i++) {
    		menus[i] = systemService.getMenu(ids[i]);
    		menus[i].setSort(sorts[i]);
    		systemService.saveMenu(menus[i]);
    	}
    	addMessage(redirectAttributes, "保存菜单排序成功!");
		return "redirect:"+Global.getAdminPath()+"/sys/menu/";
	}
	
	@RequiresUser
	@ResponseBody
	@RequestMapping(value = "treeData")
	public List<Map<String, Object>> treeData(@RequestParam(required=false) Long extId, HttpServletResponse response) {
		response.setContentType("application/json; charset=UTF-8");
		List<Map<String, Object>> mapList = Lists.newArrayList();
		List<Menu> list = systemService.findAllMenu();
		for (int i=0; i<list.size(); i++){
			Menu e = list.get(i);
//			if (extId == null || (extId!=null && !extId.equals(e.getId()) && e.getParentIds().indexOf(","+extId+",")==-1)){
			if (extId == null || !e.getParentIds().contains("," + extId + ",")){
				Map<String, Object> map = Maps.newHashMap();
				map.put("id", e.getId());
				map.put("pId", e.getParent()!=null?e.getParent().getId():0);
				map.put("name", e.getName());
				mapList.add(map);
			}
		}
		return mapList;
	}
}
