package com.jojowonet.modules.order.web;

import java.io.File;
import java.io.FileOutputStream;
import java.util.Arrays;
import java.util.List;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import com.jojowonet.modules.fmss.utils.HttpUtils;
import com.jojowonet.modules.order.utils.StringUtil;
import com.jojowonet.modules.sys.util.HttpKit;
import ivan.common.utils.FileUtils;
import ivan.common.utils.IdGen;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.RequestMapping;

import com.jfinal.plugin.activerecord.Db;
import com.jfinal.plugin.activerecord.Record;
import com.jojowonet.modules.operate.entity.Site;
import com.jojowonet.modules.operate.service.SiteService;
import com.jojowonet.modules.order.entity.Order;
import com.jojowonet.modules.order.service.OrderService;
import com.jojowonet.modules.order.service.PrintService;
import com.jojowonet.modules.order.utils.CrmUtils;
import com.jojowonet.modules.order.utils.SqlKit;

import ivan.common.utils.StringUtils;
import ivan.common.utils.UserUtils;
import ivan.common.web.BaseController;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.context.ContextLoader;
//import sun.misc.BASE64Decoder;

@Controller
@RequestMapping(value = "${adminPath}/print")
public class PrintOrderController extends BaseController {
	@Autowired
	private OrderService orderService;
	@Autowired
	private PrintService printService;
	@Autowired
	private SiteService siteService;

	
	@RequestMapping(value = "order")
	public String list(Order data, HttpServletRequest request, HttpServletResponse response, Model model) {
		String orderId = request.getParameter("orderId");
		Order order = null;
	    String siteId = CrmUtils.getCurrentSiteId(UserUtils.getUser());
	    Map<String, Object> params = getParams(request);
	    Object orderObjs = params.get("orderId");
	    if(orderObjs != null){
	    	String orderIds = String.valueOf(orderObjs);
	    	if(StringUtils.isNotBlank(orderIds) && orderIds.indexOf(",") != -1){	    		
	    		String[] orderArr = orderIds.split(",");
	    		StringBuilder sb = new StringBuilder("");
	    		sb.append(" SELECT a.service_attitude,c.name as siteName, c.mobile,c.sms_phone, d.end_time,d.dispatch_time, co.* ");
	    		sb.append(" FROM crm_order co LEFT JOIN crm_order_callback a ON a.order_id = co.id ");
	    		sb.append(" left join crm_order_dispatch d on d.order_id = co.id and d.status != '6' and d.status != '3' ");
	    		sb.append(" LEFT JOIN crm_site c ON c.id = co.site_id ");
	    		sb.append(" WHERE co.id in ("+SqlKit.joinInSql(Arrays.asList(orderArr))+") ");
	    		List<Record> rds = Db.find(sb.toString());
	    		
	    		model.addAttribute("orders", rds);

	    		String numbers="";
	    		for(Record re:rds){
					numbers+=re.getStr("number")+",";
				}
				model.addAttribute("numbers", numbers);
	    		if("690eacb5cb60c9253ffad7c305f40e40".equals(siteId)){//365特殊处理
	    			return "modules/order/print/sfPrintOrders2";
	    		}else{
	    			return "modules/order/print/sfPrintOrders";
	    		}
	    	}
	    }
		if(StringUtils.isNotBlank(orderId)){
			order = orderService.get(orderId);
			
			//查询额外的信息
			StringBuilder sb = new StringBuilder("");
			sb.append(" SELECT a.service_attitude,c.name as siteName, c.mobile,c.sms_phone, d.end_time,d.dispatch_time ");
			sb.append(" FROM crm_order co LEFT JOIN crm_order_callback a ON a.order_id = co.id ");
			sb.append(" left join crm_order_dispatch d on d.order_id = co.id and d.status != '6' and d.status != '3' ");
			sb.append(" LEFT JOIN crm_site c ON c.id = co.site_id ");
			sb.append(" WHERE co.id = '"+orderId+"' ");
			sb.append(" ORDER BY a.create_time DESC  LIMIT 1 ");
			Record rd = printService.getOrderMsg(orderId);
			model.addAttribute("rd", rd);
			model.addAttribute("order", order);
		}else{
			model.addAttribute("order", data);
		}
		//if("40000011111222223333344444555556".equals(siteId)){
		if("690eacb5cb60c9253ffad7c305f40e40".equals(siteId)){
			return "modules/order/print/sfPrint2";
		}else{
			return "modules/order/print/sfPrint";
		}
	
	}

	/**
	 * 预览pdf文件
	 */
	/*@RequestMapping("previewPrint")
	public void pdfStreamHandler(HttpServletRequest request, HttpServletResponse response) {
		String dataUri = request.getParameter("datauri");
		String operType = request.getParameter("operType");
		try {
			byte[] buffer = new BASE64Decoder().decodeBuffer(dataUri);
			// 重置response对象中的缓冲区，该方法可以不写，但是你要保证response缓冲区没有其他数据，否则导出可能会出现问题，
			String filePrefix = ContextLoader.getCurrentWebApplicationContext().getServletContext().getRealPath("/") + "plug-in";
			String filePath =  File.separator + "print_tmp_file" + File.separator + IdGen.uuid() + ".pdf";
			File pdfFile = new File(filePrefix + filePath);
			if (!pdfFile.getParentFile().exists()) {
				pdfFile.getParentFile().mkdirs();
			}
			FileOutputStream out = new FileOutputStream(pdfFile);
			out.write(buffer);
			out.close();
			response.reset();
			//response.setContentType("application/octet-stream");
			//直接下载时加attachment,预览时候不加
			//response.addHeader("Content-Disposition", "attachment; filename=工单打印.pdf");
//            response.addHeader("Content-Disposition",
//                               "filename=\"" + GeneralUtil.getFilename(request, file.getFileName()) + "\"");
			*//*byte[] buffer = new byte[1024];
			int length;
			while ((length = in.read(buffer)) > 0) {
				response.getOutputStream().write(buffer, 0, length);
			}*//*
			response.getOutputStream().write(buffer);
		} catch (Exception e) {
			logger.error("下载文件出错", e);
		} finally {
			*//*if (in != null) {
				try {
					in.close();
				} catch (IOException e) {
				}
			}*//*
		}
	}*/

	@RequestMapping(value = "order400")
	public String list400(Order data, HttpServletRequest request, HttpServletResponse response, Model model) {
		String orderId = request.getParameter("orderId");
		String siteId = CrmUtils.getCurrentSiteId(UserUtils.getUser());
		Site site = siteService.get(siteId);
		model.addAttribute("site", site);

		String dataUri = request.getParameter("datauri");
		String operType = request.getParameter("operType");
		if("1".equalsIgnoreCase(operType)){
			model.addAttribute("dataUri", dataUri);
			try{
				/*byte[] buffer = new BASE64Decoder().decodeBuffer(dataUri);
				String filePrefix = ContextLoader.getCurrentWebApplicationContext().getServletContext().getRealPath("/") + "plug-in";
				String filePath =  File.separator + "print_tmp_file" + File.separator + IdGen.uuid() + ".pdf";
				File pdfFile = new File(filePrefix + filePath);
				if (!pdfFile.getParentFile().exists()) {
					pdfFile.getParentFile().mkdirs();
				}
				FileOutputStream out = new FileOutputStream(pdfFile);
				out.write(buffer);
				out.close();
				model.addAttribute("pdfPath", filePath);*/
			}catch (Exception e){
				e.printStackTrace();
			}
			//System.out.println(" dataUri: " + dataUri);
			return "modules/base/printView3";
		}

		if (StringUtils.isNotBlank(orderId)) {
			String[] orderIds = orderId.split(",");
			if (orderIds.length > 0) {
				SqlKit kit = new SqlKit()
						.append("select * from crm_order_400")
						.append("where id in (" + StringUtil.joinInSql(orderIds) + ")")
						.append("order by create_time desc");
				List<Record> orders = Db.find(kit.toString());
				model.addAttribute("orders", orders);

				String numbers="";
				for(Record re:orders){
					numbers+=re.getStr("number")+",";
				}
				model.addAttribute("numbers", numbers);

				return "modules/order/print/sfPrint400Orders";
//				return "modules/order/print/sfPrint400Orders_bk";
			} else {
				//查询额外的信息
				StringBuilder sb = new StringBuilder("");
				sb.append(" SELECT * FROM crm_order_400 ");
				sb.append(" WHERE id = '" + orderId + "' ");
				sb.append(" ORDER BY create_time DESC  LIMIT 1 ");
				Record rd = Db.findFirst(sb.toString());
				model.addAttribute("order", rd);
				return "modules/order/print/sfPrint400";
			}
		}
		throw new RuntimeException("order id required");
	}

	/**
	 * 打印历史400工单（2017）
	 * @param data
	 * @param request
	 * @param response
	 * @param model
	 * @return
	 */
	@RequestMapping(value = "order400For2017")
	public String order400For2017(Order data, HttpServletRequest request, HttpServletResponse response, Model model) {
		String orderId = request.getParameter("orderId");
		String siteId = CrmUtils.getCurrentSiteId(UserUtils.getUser());
		Site site = siteService.get(siteId);
		model.addAttribute("site", site);

		if (StringUtils.isNotBlank(orderId)) {
			String[] orderIds = orderId.split(",");
			if (orderIds.length > 0) {
				SqlKit kit = new SqlKit()
						.append("select * from crm_order_400_2017")
						.append("where id in (" + StringUtil.joinInSql(orderIds) + ")")
						.append("order by create_time desc");
				List<Record> orders = Db.find(kit.toString());
				model.addAttribute("orders", orders);

				String numbers="";
				for(Record re:orders){
					numbers+=re.getStr("number")+",";
				}
				model.addAttribute("numbers", numbers);

				return "modules/order/print/sfPrint400OldOrders";
			} else {
				//查询额外的信息
				StringBuilder sb = new StringBuilder("");
				sb.append(" SELECT * FROM crm_order_400_2017 ");
				sb.append(" WHERE id = '" + orderId + "' ");
				sb.append(" ORDER BY create_time DESC  LIMIT 1 ");
				Record rd = Db.findFirst(sb.toString());
				model.addAttribute("order", rd);
				return "modules/order/print/sfPrintOld400";
			}
		}
		throw new RuntimeException("order id required");
	}

	/**
	 * 工单打印次数
	 */
	@ResponseBody
	@RequestMapping(value="writePrintTimes")
	public void writePrintTimes(HttpServletRequest request){
		String number = request.getParameter("number");
		try {
			Db.update("update crm_order a set a.print_times=a.print_times+1 where a.number=? and a.site_id=? ",number,CrmUtils.getCurrentSiteId(UserUtils.getUser()));
		}catch (Exception e){
			e.printStackTrace();
		}
	}

	/**
	 * 多次工单打印次数
	 */
	@ResponseBody
	@RequestMapping(value="writeMorePrintTimes")
	public void writeMorePrintTimes(HttpServletRequest request){
		String numbers = request.getParameter("numbers");
		String[] number=numbers.split(",");
		try {
			Db.update("update crm_order a set a.print_times=a.print_times+1 where a.number in ("+StringUtil.joinInSql(number)+") and a.site_id=? ",CrmUtils.getCurrentSiteId(UserUtils.getUser()));
		}catch (Exception e){
			e.printStackTrace();
		}
	}

	/**
	 * 400工单打印次数
	 */
	@ResponseBody
	@RequestMapping(value="writePrintTimesFor400")
	public void writePrintTimesFor400(HttpServletRequest request){
		String number = request.getParameter("number");
		try {
			Db.update("update crm_order_400 a set a.print_times=a.print_times+1 where a.number=? and a.site_id=? ",number,CrmUtils.getCurrentSiteId(UserUtils.getUser()));
		}catch (Exception e){
			e.printStackTrace();
		}
	}
	/**
	 * 400历史工单打印次数（2017）
	 */
	@ResponseBody
	@RequestMapping(value="writePrintTimesForOld400")
	public void writePrintTimesForOld400(HttpServletRequest request){
		String number = request.getParameter("number");
		try {
			Db.update("update crm_order_400_2017 a set a.print_times=a.print_times+1 where a.number=? and a.site_id=? ",number,CrmUtils.getCurrentSiteId(UserUtils.getUser()));
		}catch (Exception e){
			e.printStackTrace();
		}
	}
	/**
	 * 400工单批量打印次数
	 */
	@ResponseBody
	@RequestMapping(value="writeMorePrintTimesFor400")
	public void writeMorePrintTimesFor400(HttpServletRequest request){
		String numbers = request.getParameter("numbers");
		String[] number=numbers.split(",");
		try {
			Db.update("update crm_order_400 a set a.print_times=a.print_times+1 where a.number in ("+StringUtil.joinInSql(number)+") and a.site_id=? ",CrmUtils.getCurrentSiteId(UserUtils.getUser()));
		}catch (Exception e){
			e.printStackTrace();
		}
	}
	/**
	 * 400工单批量打印次数
	 */
	@ResponseBody
	@RequestMapping(value="writeMorePrintTimesForOld400")
	public void writeMorePrintTimesForOld400(HttpServletRequest request){
		String numbers = request.getParameter("numbers");
		String[] number=numbers.split(",");
		try {
			Db.update("update crm_order_400_2017 a set a.print_times=a.print_times+1 where a.number in ("+StringUtil.joinInSql(number)+") and a.site_id=? ",CrmUtils.getCurrentSiteId(UserUtils.getUser()));
		}catch (Exception e){
			e.printStackTrace();
		}
	}

}
